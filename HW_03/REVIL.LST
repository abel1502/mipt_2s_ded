Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 1
revil.asm



      1	0000			     .model tiny
      2				     .286
      3	0000			     .code
      4
      5	      =B800		     VIDEOSEG	     equ 0b800h
      6	      =001F		     FrameStyle	     equ 00011111b
      7
      8
      9				     InstallIRQ	     macro number
     10
     11						     mov ax, 3500h OR number
     12						     int 21h
     13						     mov ax, es
     14
     15						     cmp bx, offset Int&number&Handler
     16						     je	SkipInstall
     17
     18
     19						     mov Int&number&Handler_oldOff, bx
     20						     mov Int&number&Handler_oldSeg, ax
     21
     22						     ; cli not needed
     23
     24						     mov ax, 2500h OR number
     25						     mov dx, offset Int&number&Handler
     26						     int 21h
     27
     28						     endm
     29
     30
     31				     UninstallIRQ    macro number
     32
     33						     push ds
     34
     35						     mov ax, 2500h OR number
     36						     mov dx, Int&number&Handler_oldOff
     37						     mov bx, Int&number&Handler_oldSeg
     38						     mov ds, bx
     39
     40						     int 21h
     41
     42						     pop ds
     43
     44						     endm
     45
     46
     47				     NextIRQ	     macro number
     48
     49						     db	0eah  ;	jmp far
     50				     Int&number&Handler_oldOff	     dw	0
     51				     Int&number&Handler_oldSeg	     dw	0
     52
     53						     endm
     54
     55
     56				     org 100h
     57	0100  E8 0294		     Start:	     call SetCharInit
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 2
revil.asm



     58
     59						     ; mov ax, 3509h
     60						     ; int 21h
     61						     ; mov ax, es
     62
     63						     ; cmp bx, offset Int9Handler
     64						     ; je SkipInstall
     65
     66
     67						     ; mov Int9Handler_oldOff, bx
     68						     ; mov Int9Handler_oldSeg, ax
     69
     70						     ; ; As the	docs recommend,	we may as well free our	environment block
     71						     ; push es
     72						     ; push cs:2ch
     73						     ; pop es
     74						     ; mov ah, 49h
     75						     ; int 21h
     76						     ; pop es
     77
     78
     79						     ; ; cli not needed
     80
     81						     ; mov ax, 2509h
     82						     ; mov dx, offset Int9Handler
     83						     ; int 21h
     84
     85
     86						     ; As the docs recommend, we may as	well free our environment block
     87	0103  06				     push es
     88	0104  2E: FF 36	002C			     push cs:2ch
     89	0109  07				     pop es
     90	010A  B4 49				     mov ah, 49h
     91	010C  CD 21				     int 21h
     92	010E  07				     pop es
     93
     94						     InstallIRQ	9
1    95
1    96	010F  B8 3509				     mov ax, 3500h OR 9
1    97	0112  CD 21				     int 21h
1    98	0114  8C C0				     mov ax, es
1    99
1   100	0116  81 FB 015Fr			     cmp bx, offset Int9Handler
1   101	011A  74 37				     je	SkipInstall
1   102
1   103
1   104	011C  89 1E 01B4r			     mov Int9Handler_oldOff, bx
1   105	0120  A3 01B6r				     mov Int9Handler_oldSeg, ax
1   106
1   107						     ; cli not needed
1   108
1   109	0123  B8 2509				     mov ax, 2500h OR 9
1   110	0126  BA 015Fr				     mov dx, offset Int9Handler
1   111	0129  CD 21				     int 21h
1   112
    113
    114						     InstallIRQ	8
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 3
revil.asm



1   115
1   116	012B  B8 3508				     mov ax, 3500h OR 8
1   117	012E  CD 21				     int 21h
1   118	0130  8C C0				     mov ax, es
1   119
1   120	0132  81 FB 01B8r			     cmp bx, offset Int8Handler
1   121	0136  74 1B				     je	SkipInstall
1   122
1   123
1   124	0138  89 1E 027Dr			     mov Int8Handler_oldOff, bx
1   125	013C  A3 027Fr				     mov Int8Handler_oldSeg, ax
1   126
1   127						     ; cli not needed
1   128
1   129	013F  B8 2508				     mov ax, 2500h OR 8
1   130	0142  BA 01B8r				     mov dx, offset Int8Handler
1   131	0145  CD 21				     int 21h
1   132
    133
    134	0147  B8 3100				     mov ax, 3100h
    135	014A  BA 048Br				     mov dx, offset ProgEnd
    136	014D  C1 EA 04				     shr dx, 4
    137	0150  42				     inc dx
    138	0151  CD 21				     int 21h
    139
    140
    141	0153  B4 09		     SkipInstall:    mov ah, 09h
    142	0155  BA 0000r				     mov dx, offset SkipMsg
    143	0158  CD 21				     int 21h
    144
    145	015A  B8 4C00				     mov ax, 4c00h
    146	015D  CD 21				     int 21h
    147
    148
    149				     ; INT 9 (kbd) handler
    150	015F			     Int9Handler     proc far
    151
    152						     ;pusha
    153
    154						     ;mov ax, 0ah
    155						     ;mov bx, 0bh
    156						     ;mov cx, 0ch
    157						     ;mov dx, 0dh
    158
    159	015F  60				     pusha
    160	0160  06 1E				     push es ds
    161
    162	0162  8B EC				     mov bp, sp	 ; Old bp saved	by pusha
    163
    164	0164  8C C8				     mov ax, cs
    165	0166  8E D8				     mov ds, ax
    166
    167						     ;call SetCharInit	; I guess we may always	call it
    168
    169	0168  E4 60				     in	al, 60h
    170	016A  8A E0				     mov ah, al
    171	016C  C0 EC 07				     shr ah, 7	; ah holds whether it's	a key pressed or depressed
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 4
revil.asm



    172	016F  24 7F				     and al, 01111111b
    173
    174	0171  3C 4F				     cmp al, 4fh  ; Numpad 1
    175	0173  74 07				     je	Int9Handler_Num1
    176	0175  3C 52				     cmp al, 52h  ; Numpad 0
    177	0177  74 0A				     je	Int9Handler_Num0
    178
    179	0179  EB 35 90				     jmp Int9Handler_next
    180
    181	017C			     Int9Handler_Num1:
    182	017C  30 26 0282r			     xor Int8Handler_show, ah  ; TODO: ?
    183
    184	0180  EB 18 90				     jmp Int9Handler_end
    185
    186	0183			     Int9Handler_Num0:
    187						     UninstallIRQ 9
1   188
1   189	0183  1E				     push ds
1   190
1   191	0184  B8 2509				     mov ax, 2500h OR 9
1   192	0187  8B 16 01B4r			     mov dx, Int9Handler_oldOff
1   193	018B  8B 1E 01B6r			     mov bx, Int9Handler_oldSeg
1   194	018F  8E DB				     mov ds, bx
1   195
1   196	0191  CD 21				     int 21h
1   197
1   198	0193  1F				     pop ds
1   199
    200
    201	0194  C6 06 0284r 01 90			     mov Int8Handler_kill, 1
    202
    203						     ; Further shutdown	happens	within timer interrupt
    204
    205						     ; jmp Int9Handler_end ; Happens automatically
    206
    207	019A			     Int9Handler_end:
    208	019A  E4 61				     in	al, 61h
    209	019C  8A E0				     mov ah, al
    210	019E  0C 40				     or	al, 1000000b
    211	01A0  E6 61				     out 61h, al
    212	01A2  8A C4				     mov al, ah
    213	01A4  90				     nop
    214	01A5  90				     nop  ; As recommended
    215	01A6  E6 61				     out 61h, al
    216
    217	01A8  B0 20				     mov al, 20h
    218	01AA  E6 20				     out 20h, al
    219
    220	01AC  1F 07				     pop ds es
    221	01AE  61				     popa
    222
    223						     ;popa
    224
    225	01AF  CF				     iret
    226
    227	01B0			     Int9Handler_next:
    228	01B0  1F 07				     pop ds es
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 5
revil.asm



    229	01B2  61				     popa
    230
    231						     ;popa
    232
    233						     NextIRQ 9
1   234
1   235	01B3  EA				     db	0eah  ;	jmp far
1   236	01B4  0000		     Int9Handler_oldOff	     dw	0
1   237	01B6  0000		     Int9Handler_oldSeg	     dw	0
1   238
    239
    240	01B8			     Int9Handler     endp
    241
    242
    243				     ; INT 8 (timer) handler
    244	01B8			     Int8Handler     proc far
    245
    246						     ;push ax
    247						     ;mov al, 20h
    248						     ;out 20h, al
    249						     ;pop ax
    250						     ;iret
    251
    252						     ;pusha
    253
    254						     ;mov ax, 0ah
    255						     ;mov bx, 0bh
    256						     ;mov cx, 0ch
    257						     ;mov dx, 0dh
    258
    259	01B8  60				     pusha
    260	01B9  06 1E				     push es ds
    261
    262	01BB  8B EC				     mov bp, sp	 ; Old bp saved	by pusha
    263
    264	01BD  8C C8				     mov ax, cs
    265	01BF  8E D8				     mov ds, ax
    266
    267
    268	01C1  F6 06 0284r 01 90			     test Int8Handler_kill, 1
    269	01C7  75 70				     jnz Int8Handler_detach
    270
    271
    272	01C9  A0 0281r				     mov al, Int8Handler_ticks
    273	01CC  84 C0				     test al, al
    274	01CE  74 03				     jz	Int8Handler_doTick
    275	01D0  E9 00A2				     jmp Int8Handler_next
    276	01D3			     Int8Handler_doTick:
    277	01D3  C6 06 0281r 04 90			     mov Int8Handler_ticks, Int8Handler_interval
    278
    279	01D9  E8 01BB				     call SetCharInit  ; I guess we may	always call it
    280
    281
    282	01DC  F6 06 0282r 01 90			     test Int8Handler_show, 1
    283	01E2  75 03				     jnz Int8Handler_maybeShow	; TODO:	Restore	videobuf
    284	01E4  EB 6F 90				     jmp Int8Handler_maybeHide
    285
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 6
revil.asm



    286	01E7			     Int8Handler_maybeShow:
    287	01E7  F6 06 0283r 01 90			     test Int8Handler_wasShown,	1
    288	01ED  75 06				     jnz Int8Handler_notShow
    289
    290						     ; TODO: Save segment under	frame
    291	01EF  C6 06 0283r 01 90			     mov Int8Handler_wasShown, 1
    292
    293	01F5			     Int8Handler_notShow:
    294	01F5  BB 0102 90			     mov bx, Int8Handler_FrameS
    295	01F9  B9 060D 90			     mov cx, Int8Handler_FrameE
    296	01FD  E8 00A8				     call DrawFrame
    297
    298	0200  BB 0204 90			     mov bx, Int8Handler_FrameT
    299	0204  B1 23 90 90			     mov cl, Int8Handler_LegendLen
    300	0208  BE 0285r				     mov si, offset Int8Handler_Legend
    301	020B  E8 01FD				     call DrawStr
    302
    303	020E  8B 46 12				     mov ax, Int8Handler_OldA
    304	0211  BB 0207 90			     mov bx, Int8Handler_FrameTA
    305	0215  E8 024A				     call DrawNumHex
    306
    307	0218  8B 46 0C				     mov ax, Int8Handler_OldB
    308	021B  BB 0307 90			     mov bx, Int8Handler_FrameTB
    309	021F  E8 0240				     call DrawNumHex
    310
    311	0222  8B 46 10				     mov ax, Int8Handler_OldC
    312	0225  BB 0407 90			     mov bx, Int8Handler_FrameTC
    313	0229  E8 0236				     call DrawNumHex
    314
    315	022C  8B 46 0E				     mov ax, Int8Handler_OldD
    316	022F  BB 0507 90			     mov bx, Int8Handler_FrameTD
    317	0233  E8 022C				     call DrawNumHex
    318
    319	0236  EB 3D 90				     jmp Int8Handler_next
    320
    321	0239			     Int8Handler_detach:
    322						     UninstallIRQ 8
1   323
1   324	0239  1E				     push ds
1   325
1   326	023A  B8 2508				     mov ax, 2500h OR 8
1   327	023D  8B 16 027Dr			     mov dx, Int8Handler_oldOff
1   328	0241  8B 1E 027Fr			     mov bx, Int8Handler_oldSeg
1   329	0245  8E DB				     mov ds, bx
1   330
1   331	0247  CD 21				     int 21h
1   332
1   333	0249  1F				     pop ds
1   334
    335
    336						     ; TODO: Hide frame
    337
    338						     ; TODO: Verify interrupt isn't hijacked and refuse	to stop	in that	case (and   +
    339				     same for int8)
    340
    341						     ; Now I'll	do something incredibly	crotchy	- that is freeing the memory block I+
    342				     reside in.
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 7
revil.asm



    343						     ; That clearly contradicts	a well-known russian saying "Don't cut the branch   +
    344				     you're sitting on",
    345						     ; but I believe this shouldn't overwrite us, thanks to how	DOS doesn't support +
    346				     multithreading.
    347						     ; That should get us enough time to shut ourselves	down as	well. The only thing+
    348				     that has a	chance
    349						     ; to interrupt us is a timer tick (which I	intend to intercept myself as soon  +
    350				     as	I finish the
    351						     ; keyboard	part - then I'll move this bit of code there and it will become	    +
    352				     completely	invincible).
    353						     ; But even	now a disruption is unlikely - that would need the timer to request +
    354				     a memory block (or
    355						     ; start another program, which does that intrinsically), and that doesn't seem +
    356				     like things a timer
    357						     ; would ever want to do.
    358
    359	024A  06				     push es
    360	024B  0E				     push cs
    361	024C  07				     pop es
    362	024D  B4 49				     mov ah, 49h
    363	024F  CD 21				     int 21h
    364	0251  07				     pop es
    365
    366	0252  EB 21 90				     jmp Int8Handler_next
    367
    368	0255			     Int8Handler_maybeHide:
    369	0255  F6 06 0283r 01 90			     test Int8Handler_wasShown,	1
    370	025B  74 18				     jz	Int8Handler_next
    371
    372						     ; Restore saved videobuf from under frame
    373	025D  B8 0600				     mov ax, 0600h
    374	0260  B9 0102 90			     mov cx, Int8Handler_FrameS
    375	0264  BA 060D 90			     mov dx, Int8Handler_FrameE
    376	0268  B7 07				     mov bh, 7h
    377	026A  CD 10				     int 10h
    378
    379	026C  C6 06 0283r 00 90			     mov Int8Handler_wasShown, 0
    380
    381	0272  EB 01 90				     jmp Int8Handler_next
    382
    383	0275			     Int8Handler_next:
    384	0275  FE 0E 0281r			     dec Int8Handler_ticks
    385
    386	0279  1F 07				     pop ds es
    387	027B  61				     popa
    388
    389						     ;popa
    390
    391						     NextIRQ 8
1   392
1   393	027C  EA				     db	0eah  ;	jmp far
1   394	027D  0000		     Int8Handler_oldOff	     dw	0
1   395	027F  0000		     Int8Handler_oldSeg	     dw	0
1   396
    397
    398
    399	      =0004		     Int8Handler_interval    equ 4
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 8
revil.asm



    400	0281  00		     Int8Handler_ticks	     db	0
    401
    402	0282  00		     Int8Handler_show	     db	0
    403	0283  00		     Int8Handler_wasShown    db	0
    404	0284  00		     Int8Handler_kill	     db	0
    405
    406	0285  61 78 3A 20 30 30	30+  Int8Handler_Legend	     db	'ax: 0000', 0ah, \
    407	      30 0A 62 78 3A 20	30+				'bx: 0000', 0ah, \
    408	      30 30 30 0A 63 78	3A+				'cx: 0000', 0ah, \
    409	      20 30 30 30 30 0A	64+				'dx: 0000'
    410	      78 3A 20 30 30 30	30
    411	      =0023		     Int8Handler_LegendLen   equ $ - Int8Handler_Legend
    412
    413	      =0002		     Int8Handler_FrameSX     equ 2
    414	      =0001		     Int8Handler_FrameSY     equ 1
    415	      =000B		     Int8Handler_FrameW	     equ 11
    416	      =0005		     Int8Handler_FrameH	     equ 5
    417	      =000D		     Int8Handler_FrameEX     equ Int8Handler_FrameSX + Int8Handler_FrameW
    418	      =0006		     Int8Handler_FrameEY     equ Int8Handler_FrameSY + Int8Handler_FrameH
    419
    420	      =0102		     Int8Handler_FrameS	     equ (Int8Handler_FrameSY SHL 8) OR	Int8Handler_FrameSX
    421	      =060D		     Int8Handler_FrameE	     equ (Int8Handler_FrameEY SHL 8) OR	Int8Handler_FrameEX
    422
    423	      =0204		     Int8Handler_FrameT	     equ Int8Handler_FrameS + 0102h
    424	      =0207		     Int8Handler_FrameTA     equ Int8Handler_FrameT + 0003h
    425	      =0307		     Int8Handler_FrameTB     equ Int8Handler_FrameTA + 0100h
    426	      =0407		     Int8Handler_FrameTC     equ Int8Handler_FrameTB + 0100h
    427	      =0507		     Int8Handler_FrameTD     equ Int8Handler_FrameTC + 0100h
    428
    429	      =	[bp+18]		     Int8Handler_OldA	     equ [bp+18]
    430	      =	[bp+12]		     Int8Handler_OldB	     equ [bp+12]
    431	      =	[bp+16]		     Int8Handler_OldC	     equ [bp+16]
    432	      =	[bp+14]		     Int8Handler_OldD	     equ [bp+14]
    433
    434	02A8			     Int8Handler     endp
    435
    436
    437				     ; Same as Coords2Key, but embeddable
    438				     ; macro(result (register letter, can't be d), coords (register letter, can't be d))
    439				     Coords2KeyM     macro result, coords
    440
    441						     mov result&x, SetChar_width
    442						     mul coords&h
    443						     xor coords&h, coords&h
    444						     add result&l, coords&l
    445						     adc result&h, 0
    446						     shl result&x, 1
    447
    448						     endm
    449
    450
    451				     ; void DrawFrame(bh: fromRow, bl: fromCol,	ch: toRow, cl: toCol)
    452				     ; uses ax,	bx, cx,	dx, di,	SetChar
    453	02A8			     DrawFrame	     proc near
    454
    455	      =	[bp-1]		     DrawFrame_fromRow	     equ [bp-1]
    456	      =	[bp-2]		     DrawFrame_fromCol	     equ [bp-2]
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 9
revil.asm



    457	      =	[bp-3]		     DrawFrame_toRow	     equ [bp-3]
    458	      =	[bp-4]		     DrawFrame_toCol	     equ [bp-4]
    459
    460	02A8  55				     push bp
    461	02A9  8B EC				     mov bp, sp
    462	02AB  83 EC 04				     sub sp, 4
    463
    464	02AE  88 7E FF				     mov DrawFrame_fromRow, bh
    465	02B1  88 5E FE				     mov DrawFrame_fromCol, bl
    466	02B4  88 6E FD				     mov DrawFrame_toRow, ch
    467	02B7  88 4E FC				     mov DrawFrame_toCol, cl
    468
    469	02BA  B8 0600				     mov ax, 0600h
    470	02BD  8B D1				     mov dx, cx
    471	02BF  8B CB				     mov cx, bx
    472	02C1  B7 1F				     mov bh, FrameStyle
    473	02C3  CD 10				     int 10h
    474
    475	02C5  B5 1F				     mov ch, FrameStyle
    476	02C7  B1 C9				     mov cl, 201
    477	02C9  8A 7E FF				     mov bh, DrawFrame_fromRow
    478	02CC  8A 5E FE				     mov bl, DrawFrame_fromCol
    479	02CF  E8 00EE				     call SetChar
    480
    481	02D2  B5 1F				     mov ch, FrameStyle
    482	02D4  B1 BB				     mov cl, 187
    483	02D6  8A 7E FF				     mov bh, DrawFrame_fromRow
    484	02D9  8A 5E FC				     mov bl, DrawFrame_toCol
    485	02DC  E8 00E1				     call SetChar
    486
    487	02DF  B5 1F				     mov ch, FrameStyle
    488	02E1  B1 BC				     mov cl, 188
    489	02E3  8A 7E FD				     mov bh, DrawFrame_toRow
    490	02E6  8A 5E FC				     mov bl, DrawFrame_toCol
    491	02E9  E8 00D4				     call SetChar
    492
    493	02EC  B5 1F				     mov ch, FrameStyle
    494	02EE  B1 C8				     mov cl, 200
    495	02F0  8A 7E FD				     mov bh, DrawFrame_toRow
    496	02F3  8A 5E FE				     mov bl, DrawFrame_fromCol
    497	02F6  E8 00C7				     call SetChar
    498
    499
    500						     ; es is already set by SetChar
    501	02F9  FC				     cld
    502	02FA  32 ED				     xor ch, ch
    503
    504	02FC  8A 4E FC				     mov cl, DrawFrame_toCol
    505	02FF  2A 4E FE				     sub cl, DrawFrame_fromCol
    506	0302  FE C9				     dec cl
    507	0304  F6 C1 80				     test cl, 1	SHL 7
    508	0307  75 44				     jnz DrawFrame_loopH_end
    509
    510	0309  8A 5E FE				     mov bl, DrawFrame_fromCol
    511	030C  8A 7E FF				     mov bh, DrawFrame_fromRow
    512						     Coords2KeyM a, b
1   513
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 10
revil.asm



1   514	030F  A1 03DBr				     mov ax, SetChar_width
1   515	0312  F6 E7				     mul bh
1   516	0314  32 FF				     xor bh, bh
1   517	0316  02 C3				     add al, bl
1   518	0318  80 D4 00				     adc ah, 0
1   519	031B  D1 E0				     shl ax, 1
1   520
    521	031D  40				     inc ax
    522	031E  40				     inc ax
    523	031F  8B F8				     mov di, ax
    524
    525	0321  B4 1F				     mov ah, FrameStyle
    526	0323  B0 CD				     mov al, 205
    527
    528	0325  F3> AB				     rep stosw
    529
    530
    531	0327  8A 4E FC				     mov cl, DrawFrame_toCol
    532	032A  2A 4E FE				     sub cl, DrawFrame_fromCol
    533	032D  FE C9				     dec cl
    534
    535	032F  8A 5E FE				     mov bl, DrawFrame_fromCol
    536	0332  8A 7E FD				     mov bh, DrawFrame_toRow
    537						     Coords2KeyM a, b
1   538
1   539	0335  A1 03DBr				     mov ax, SetChar_width
1   540	0338  F6 E7				     mul bh
1   541	033A  32 FF				     xor bh, bh
1   542	033C  02 C3				     add al, bl
1   543	033E  80 D4 00				     adc ah, 0
1   544	0341  D1 E0				     shl ax, 1
1   545
    546	0343  40				     inc ax
    547	0344  40				     inc ax
    548	0345  8B F8				     mov di, ax
    549
    550	0347  B4 1F				     mov ah, FrameStyle
    551	0349  B0 CD				     mov al, 205
    552
    553	034B  F3> AB				     rep stosw
    554
    555	034D			     DrawFrame_loopH_end:
    556
    557	034D  8A 4E FD				     mov cl, DrawFrame_toRow
    558	0350  2A 4E FF				     sub cl, DrawFrame_fromRow
    559	0353  FE C9				     dec cl
    560	0355  F6 C1 80				     test cl, 1	SHL 7
    561	0358  75 F3				     jnz DrawFrame_loopH_end
    562
    563	035A  8A 5E FE				     mov bl, DrawFrame_fromCol
    564	035D  8A 7E FF				     mov bh, DrawFrame_fromRow
    565	0360  FE C7				     inc bh
    566						     Coords2KeyM a, b
1   567
1   568	0362  A1 03DBr				     mov ax, SetChar_width
1   569	0365  F6 E7				     mul bh
1   570	0367  32 FF				     xor bh, bh
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 11
revil.asm



1   571	0369  02 C3				     add al, bl
1   572	036B  80 D4 00				     adc ah, 0
1   573	036E  D1 E0				     shl ax, 1
1   574
    575
    576	0370  8B F8				     mov di, ax
    577	0372  A1 03DBr				     mov ax, SetChar_width  ; TODO: Change previous macro params instead
    578	0375  D1 E0				     shl ax, 1
    579
    580	0377  32 FF				     xor bh, bh
    581	0379  8A 5E FC				     mov bl, DrawFrame_toCol
    582	037C  2A 5E FE				     sub bl, DrawFrame_fromCol
    583	037F  D0 E3				     shl bl, 1
    584	0381  73 02				     jnc DrawFrame_loopV
    585	0383  32 DB				     xor bl, bl
    586
    587	0385			     DrawFrame_loopV:
    588	0385  26: C7 05	1FBA			     mov word ptr es:[di],    (FrameStyle SHL 8) OR 186
    589	038A  26: C7 01	1FBA			     mov word ptr es:[di+bx], (FrameStyle SHL 8) OR 186
    590
    591	038F  03 F8				     add di, ax
    592	0391  E2 F2				     loop DrawFrame_loopV
    593
    594	0393			     DrawFrame_loopV_end:
    595
    596
    597	0393  8B E5				     mov sp, bp
    598	0395  5D				     pop bp
    599	0396  C3				     ret
    600	0397			     DrawFrame	     endp
    601
    602
    603				     ; void SetCharInit()
    604				     ; uses: ax, bx, es
    605	0397			     SetCharInit     proc near
    606
    607	0397  CD 11				     int 11h
    608	0399  35 0030				     xor ax, 30h
    609	039C  C1 E0 0B				     shl ax, 11
    610	039F  0D B800				     or	ax, VIDEOSEG
    611	03A2  A3 03DDr				     mov SetChar_buf, ax
    612
    613	03A5  B8 0040				     mov ax, 40h
    614	03A8  8E C0				     mov es, ax
    615	03AA  26: A1 004A			     mov ax, es:4ah  ; 80 most often
    616	03AE  A3 03DBr				     mov SetChar_width,	ax
    617
    618	03B1  C3				     ret
    619
    620	03B2			     SetCharInit     endp
    621
    622
    623				     ; Coords2KeyM moved up
    624
    625
    626				     ; ax: coords Coords2Key(bh: row, bl: column)
    627				     ; uses: ax, (bx), dx
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 12
revil.asm



    628	03B2			     Coords2Key	     proc near
    629						     Coords2KeyM a, b
1   630
1   631	03B2  A1 03DBr				     mov ax, SetChar_width
1   632	03B5  F6 E7				     mul bh
1   633	03B7  32 FF				     xor bh, bh
1   634	03B9  02 C3				     add al, bl
1   635	03BB  80 D4 00				     adc ah, 0
1   636	03BE  D1 E0				     shl ax, 1
1   637
    638	03C0			     Coords2Key	     endp
    639
    640
    641				     ; ax: index SetChar(cl: letter, ch: attrs,	bh: row, bl: column)
    642				     ; uses: ax, (bx), (cx), dx, es
    643	03C0			     SetChar	     proc near
    644	03C0  53				     push bx
    645						     Coords2KeyM a, b
1   646
1   647	03C1  A1 03DBr				     mov ax, SetChar_width
1   648	03C4  F6 E7				     mul bh
1   649	03C6  32 FF				     xor bh, bh
1   650	03C8  02 C3				     add al, bl
1   651	03CA  80 D4 00				     adc ah, 0
1   652	03CD  D1 E0				     shl ax, 1
1   653
    654
    655	03CF  93				     xchg ax, bx
    656
    657	03D0  8B 16 03DDr			     mov dx, SetChar_buf
    658	03D4  8E C2				     mov es, dx
    659	03D6  26: 89 0F				     mov es:[bx], cx
    660
    661	03D9  5B				     pop bx
    662
    663	03DA  C3				     ret
    664
    665	03DB  0050		     SetChar_width   dw	80
    666	03DD  0000		     SetChar_buf     dw	0
    667	03DF			     SetChar	     endp
    668
    669
    670				     ; void Beep(bx: frequency,	cx: length)
    671				     ; uses ax,	bx, cx
    672	03DF			     Beep	     proc near
    673	03DF  B0 B6				     mov al, 182
    674	03E1  E6 43				     out 43h, al
    675	03E3  8B C3				     mov ax, bx
    676	03E5  E6 42				     out 42h, al
    677	03E7  8A C4				     mov al, ah
    678	03E9  E6 42				     out 42h, al
    679	03EB  E4 61				     in	al, 61h
    680	03ED  0C 03				     or	al, 00000011b
    681	03EF  E6 61				     out 61h, al
    682	03F1  8B D9				     mov bx, cx
    683
    684
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 13
revil.asm



    685	03F3  B9 FFFF		     Beep_pause1:    mov cx, 65535
    686	03F6  49		     Beep_pause2:    dec cx
    687	03F7  75 FD				     jnz Beep_pause2
    688	03F9  4B				     dec bx
    689	03FA  75 F7				     jnz Beep_pause1
    690	03FC  E4 61				     in	al, 61h
    691	03FE  24 FC				     and al, 11111100b
    692	0400  E6 61				     out 61h, al
    693
    694	0402  C3				     ret
    695	0403			     Beep	     endp
    696
    697
    698				     ; TODO: Maybe use the int 15h 81h
    699				     ; void Sleep(ax: duration)
    700				     ; uses ax
    701	0403			     Sleep	     proc near
    702
    703	0403  85 C0		     Sleep_loop:     test ax, ax
    704	0405  74 03				     jz	Sleep_loop_end
    705	0407  48				     dec ax
    706	0408  EB F9				     jmp Sleep_loop
    707	040A			     Sleep_loop_end:
    708	040A  C3				     ret
    709	040B			     Sleep	     endp
    710
    711
    712				     ; void DrawStr(bh:	row, bl: column, cl: length, si: source)
    713				     ; uses ax,	bx, cx,	si, SetChar
    714	040B			     DrawStr	     proc near
    715	      =	[bp-1]		     DrawStr_i	     equ [bp-1]
    716	      =	[bp-2]		     DrawStr_origCol equ [bp-2]
    717	040B  55				     push bp
    718	040C  8B EC				     mov bp, sp
    719	040E  83 EC 02				     sub sp, 2
    720
    721	0411  88 5E FE				     mov DrawStr_origCol, bl
    722	0414  88 4E FF				     mov DrawStr_i, cl
    723
    724	0417  8A 46 FF		     DrawStr_loop:   mov al, DrawStr_i
    725	041A  84 C0				     test al, al
    726	041C  74 20				     jz	DrawStr_loop_end
    727
    728	041E  8A 0C				     mov cl, [si]
    729	0420  80 F9 0A				     cmp cl, 0ah
    730	0423  74 0E				     je	DrawStr_nl
    731
    732	0425  84 C9				     test cl, cl
    733	0427  74 15				     jz	DrawStr_loop_end
    734
    735	0429  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    736	042B  E8 FF92				     call SetChar
    737
    738	042E  FE C3				     inc bl
    739
    740	0430  EB 06 90				     jmp DrawStr_nl_skip
    741
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 14
revil.asm



    742	0433  8A 5E FE		     DrawStr_nl:     mov bl, DrawStr_origCol
    743	0436  FE C7				     inc bh
    744
    745	0438			     DrawStr_nl_skip:
    746	0438  46				     inc si
    747	0439  FE 4E FF				     dec byte ptr DrawStr_i
    748	043C  EB D9				     jmp DrawStr_loop
    749	043E			     DrawStr_loop_end:
    750
    751	043E  8B E5				     mov sp, bp
    752	0440  5D				     pop bp
    753	0441  C3				     ret
    754	0442			     DrawStr	     endp
    755
    756
    757				     ; void DrawNum10(ax: num, bh: row,	bl: column)
    758				     ; uses ax,	bx, cx,	dx, SetChar
    759	0442			     DrawNum10	     proc near
    760	0442  80 C3 05				     add bl, 5
    761
    762	0445  85 C0		     DrawNum10_loop: test ax, ax
    763	0447  74 18				     jz	DrawNum10_loop_end
    764
    765						     ;aam  ; This is faster than division and more convenient, although	relies on ax+
    766				     being small enough
    767	0449  B1 0A				     mov cl, 10
    768	044B  32 ED				     xor ch, ch
    769	044D  33 D2				     xor dx, dx
    770	044F  F7 F1				     div cx
    771
    772	0451  80 C2 30				     add dl, '0'
    773	0454  8A CA				     mov cl, dl
    774	0456  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    775
    776	0458  50				     push ax
    777	0459  E8 FF64				     call SetChar
    778	045C  58				     pop ax
    779
    780	045D  FE CB				     dec bl
    781	045F  EB E4				     jmp DrawNum10_loop
    782	0461			     DrawNum10_loop_end:
    783
    784	0461  C3				     ret
    785	0462			     DrawNum10	     endp
    786
    787
    788				     ; void DrawNumHex(ax: num,	bh: row, bl: column)
    789				     ; uses ax,	bx, cx,	SetChar
    790	0462			     DrawNumHex	     proc near
    791	0462  80 C3 04				     add bl, 4
    792
    793	0465			     DrawNumHex_loop:
    794	0465  85 C0				     test ax, ax
    795	0467  74 21				     jz	DrawNumHex_loop_end
    796
    797	0469  8A C8				     mov cl, al
    798	046B  80 E1 0F				     and cl, 0fh
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 15
revil.asm



    799
    800	046E  80 F9 0A				     cmp cl, 10
    801	0471  73 06				     jae DrawNumHex_bigDigit
    802
    803	0473  80 C1 30				     add cl, '0'
    804
    805	0476  EB 04 90				     jmp DrawNumHex_notBigDigit
    806	0479			     DrawNumHex_bigDigit:
    807	0479  80 C1 37				     add cl, 'A'-10
    808	047C			     DrawNumHex_notBigDigit:
    809
    810	047C  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    811
    812	047E  C1 E8 04				     shr ax, 4
    813
    814	0481  50				     push ax
    815	0482  E8 FF3B				     call SetChar
    816	0485  58				     pop ax
    817
    818	0486  FE CB				     dec bl
    819	0488  EB DB				     jmp DrawNumHex_loop
    820	048A			     DrawNumHex_loop_end:
    821
    822	048A  C3				     ret
    823	048B			     DrawNumHex	     endp
    824
    825
    826	048B			     ProgEnd:
    827
    828	048B			     .data
    829
    830	0000  53 6B 69 70 70 69	6E+  SkipMsg	     db	"Skipping installation.", 0ah, 0dh, "$"
    831	      67 20 69 6E 73 74	61+
    832	      6C 6C 61 74 69 6F	6E+
    833	      2E 0A 0D 24
    834
    835				     end Start
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 16
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/18/21"
??FILENAME			  Text	 "revil	  "
??TIME				  Text	 "22:33:18"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REVIL
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BEEP				  Near	 DGROUP:03DF
BEEP_PAUSE1			  Near	 DGROUP:03F3
BEEP_PAUSE2			  Near	 DGROUP:03F6
COORDS2KEY			  Near	 DGROUP:03B2
DRAWFRAME			  Near	 DGROUP:02A8
DRAWFRAME_FROMCOL		  Text	 [bp-2]
DRAWFRAME_FROMROW		  Text	 [bp-1]
DRAWFRAME_LOOPH_END		  Near	 DGROUP:034D
DRAWFRAME_LOOPV			  Near	 DGROUP:0385
DRAWFRAME_LOOPV_END		  Near	 DGROUP:0393
DRAWFRAME_TOCOL			  Text	 [bp-4]
DRAWFRAME_TOROW			  Text	 [bp-3]
DRAWNUM10			  Near	 DGROUP:0442
DRAWNUM10_LOOP			  Near	 DGROUP:0445
DRAWNUM10_LOOP_END		  Near	 DGROUP:0461
DRAWNUMHEX			  Near	 DGROUP:0462
DRAWNUMHEX_BIGDIGIT		  Near	 DGROUP:0479
DRAWNUMHEX_LOOP			  Near	 DGROUP:0465
DRAWNUMHEX_LOOP_END		  Near	 DGROUP:048A
DRAWNUMHEX_NOTBIGDIGIT		  Near	 DGROUP:047C
DRAWSTR				  Near	 DGROUP:040B
DRAWSTR_I			  Text	 [bp-1]
DRAWSTR_LOOP			  Near	 DGROUP:0417
DRAWSTR_LOOP_END		  Near	 DGROUP:043E
DRAWSTR_NL			  Near	 DGROUP:0433
DRAWSTR_NL_SKIP			  Near	 DGROUP:0438
DRAWSTR_ORIGCOL			  Text	 [bp-2]
FRAMESTYLE			  Number 001F
INT8HANDLER			  Far	 DGROUP:01B8
INT8HANDLER_DETACH		  Near	 DGROUP:0239
INT8HANDLER_DOTICK		  Near	 DGROUP:01D3
INT8HANDLER_FRAMEE		  Number 060D
INT8HANDLER_FRAMEEX		  Number 000D
INT8HANDLER_FRAMEEY		  Number 0006
INT8HANDLER_FRAMEH		  Number 0005
INT8HANDLER_FRAMES		  Number 0102
INT8HANDLER_FRAMESX		  Number 0002
INT8HANDLER_FRAMESY		  Number 0001
Turbo Assembler	 Version 4.1	    02/18/21 22:33:18	    Page 17
Symbol Table



INT8HANDLER_FRAMET		  Number 0204
INT8HANDLER_FRAMETA		  Number 0207
INT8HANDLER_FRAMETB		  Number 0307
INT8HANDLER_FRAMETC		  Number 0407
INT8HANDLER_FRAMETD		  Number 0507
INT8HANDLER_FRAMEW		  Number 000B
INT8HANDLER_INTERVAL		  Number 0004
INT8HANDLER_KILL		  Byte	 DGROUP:0284
INT8HANDLER_LEGEND		  Byte	 DGROUP:0285
INT8HANDLER_LEGENDLEN		  Number 0023
INT8HANDLER_MAYBEHIDE		  Near	 DGROUP:0255
INT8HANDLER_MAYBESHOW		  Near	 DGROUP:01E7
INT8HANDLER_NEXT		  Near	 DGROUP:0275
INT8HANDLER_NOTSHOW		  Near	 DGROUP:01F5
INT8HANDLER_OLDA		  Text	 [bp+18]
INT8HANDLER_OLDB		  Text	 [bp+12]
INT8HANDLER_OLDC		  Text	 [bp+16]
INT8HANDLER_OLDD		  Text	 [bp+14]
INT8HANDLER_OLDOFF		  Word	 DGROUP:027D
INT8HANDLER_OLDSEG		  Word	 DGROUP:027F
INT8HANDLER_SHOW		  Byte	 DGROUP:0282
INT8HANDLER_TICKS		  Byte	 DGROUP:0281
INT8HANDLER_WASSHOWN		  Byte	 DGROUP:0283
INT9HANDLER			  Far	 DGROUP:015F
INT9HANDLER_END			  Near	 DGROUP:019A
INT9HANDLER_NEXT		  Near	 DGROUP:01B0
INT9HANDLER_NUM0		  Near	 DGROUP:0183
INT9HANDLER_NUM1		  Near	 DGROUP:017C
INT9HANDLER_OLDOFF		  Word	 DGROUP:01B4
INT9HANDLER_OLDSEG		  Word	 DGROUP:01B6
PROGEND				  Near	 DGROUP:048B
SETCHAR				  Near	 DGROUP:03C0
SETCHARINIT			  Near	 DGROUP:0397
SETCHAR_BUF			  Word	 DGROUP:03DD
SETCHAR_WIDTH			  Word	 DGROUP:03DB
SKIPINSTALL			  Near	 DGROUP:0153
SKIPMSG				  Byte	 DGROUP:0000
SLEEP				  Near	 DGROUP:0403
SLEEP_LOOP			  Near	 DGROUP:0403
SLEEP_LOOP_END			  Near	 DGROUP:040A
START				  Near	 DGROUP:0100
VIDEOSEG			  Number B800

Macro Name

COORDS2KEYM
INSTALLIRQ
NEXTIRQ
UNINSTALLIRQ

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0019 Word	  Public  DATA
  _TEXT				  16  048B Word	  Public  CODE
