Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 1
revil.asm



      1	0000			     .model tiny
      2				     .286
      3	0000			     .code
      4
      5	      =B800		     VIDEOSEG	     equ 0b800h
      6	      =001F		     FrameStyle	     equ 00011111b
      7
      8
      9				     InstallIRQ	     macro number
     10
     11						     mov ax, 3500h OR number
     12						     int 21h
     13						     mov ax, es
     14
     15						     cmp bx, offset Int&number&Handler
     16						     ;je SkipInstall
     17
     18
     19						     mov Int&number&Handler_oldOff, bx
     20						     mov Int&number&Handler_oldSeg, ax
     21
     22						     ; cli not needed
     23
     24						     mov ax, 2500h OR number
     25						     mov dx, offset Int&number&Handler
     26						     int 21h
     27
     28						     endm
     29
     30
     31				     CheckIRQ	     macro number, labelOverwritten
     32
     33						     mov ax, 3500h OR number
     34						     int 21h
     35						     mov ax, es
     36
     37						     cmp bx, offset Int&number&Handler
     38						     jne labelOverwritten
     39						     mov bx, cs
     40						     cmp ax, bx
     41						     jne labelOverwritten
     42
     43						     endm
     44
     45
     46				     UninstallIRQ    macro number
     47
     48						     push ds
     49
     50						     mov ax, 2500h OR number
     51						     mov dx, Int&number&Handler_oldOff
     52						     mov bx, Int&number&Handler_oldSeg
     53						     mov ds, bx
     54
     55						     int 21h
     56
     57						     pop ds
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 2
revil.asm



     58
     59						     endm
     60
     61
     62				     NextIRQ	     macro number
     63
     64						     db	0eah  ;	jmp far
     65				     Int&number&Handler_oldOff	     dw	0
     66				     Int&number&Handler_oldSeg	     dw	0
     67
     68						     endm
     69
     70
     71				     ; Same as Coords2Key, but embeddable
     72				     ; macro(result (register letter, can't be d), coords (register letter, can't be d))
     73				     Coords2KeyM     macro result, coords
     74
     75						     mov result&x, SetChar_width
     76						     mul coords&h
     77						     xor coords&h, coords&h
     78						     add result&l, coords&l
     79						     adc result&h, 0
     80						     shl result&x, 1
     81
     82						     endm
     83
     84
     85				     org 100h
     86	0100  E8 0455		     Start:	     call SetCharInit
     87
     88						     ; mov ax, 3509h
     89						     ; int 21h
     90						     ; mov ax, es
     91
     92						     ; cmp bx, offset Int9Handler
     93						     ; je SkipInstall
     94
     95
     96						     ; mov Int9Handler_oldOff, bx
     97						     ; mov Int9Handler_oldSeg, ax
     98
     99						     ; ; As the	docs recommend,	we may as well free our	environment block
    100						     ; push es
    101						     ; push cs:2ch
    102						     ; pop es
    103						     ; mov ah, 49h
    104						     ; int 21h
    105						     ; pop es
    106
    107
    108						     ; ; cli not needed
    109
    110						     ; mov ax, 2509h
    111						     ; mov dx, offset Int9Handler
    112						     ; int 21h
    113
    114
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 3
revil.asm



    115						     ; As the docs recommend, we may as	well free our environment block
    116	0103  06				     push es
    117	0104  2E: FF 36	002C			     push cs:2ch
    118	0109  07				     pop es
    119	010A  B4 49				     mov ah, 49h
    120	010C  CD 21				     int 21h
    121	010E  07				     pop es
    122
    123						     InstallIRQ	9
1   124
1   125	010F  B8 3509				     mov ax, 3500h OR 9
1   126	0112  CD 21				     int 21h
1   127	0114  8C C0				     mov ax, es
1   128
1   129	0116  81 FB 015Br			     cmp bx, offset Int9Handler
1   130						     ;je SkipInstall
1   131
1   132
1   133	011A  89 1E 01DAr			     mov Int9Handler_oldOff, bx
1   134	011E  A3 01DCr				     mov Int9Handler_oldSeg, ax
1   135
1   136						     ; cli not needed
1   137
1   138	0121  B8 2509				     mov ax, 2500h OR 9
1   139	0124  BA 015Br				     mov dx, offset Int9Handler
1   140	0127  CD 21				     int 21h
1   141
    142
    143						     InstallIRQ	8
1   144
1   145	0129  B8 3508				     mov ax, 3500h OR 8
1   146	012C  CD 21				     int 21h
1   147	012E  8C C0				     mov ax, es
1   148
1   149	0130  81 FB 01DEr			     cmp bx, offset Int8Handler
1   150						     ;je SkipInstall
1   151
1   152
1   153	0134  89 1E 02FCr			     mov Int8Handler_oldOff, bx
1   154	0138  A3 02FEr				     mov Int8Handler_oldSeg, ax
1   155
1   156						     ; cli not needed
1   157
1   158	013B  B8 2508				     mov ax, 2500h OR 8
1   159	013E  BA 01DEr				     mov dx, offset Int8Handler
1   160	0141  CD 21				     int 21h
1   161
    162
    163	0143  B8 3100				     mov ax, 3100h
    164	0146  BA 064Cr				     mov dx, offset ProgEnd
    165	0149  C1 EA 04				     shr dx, 4
    166	014C  42				     inc dx
    167	014D  CD 21				     int 21h
    168
    169
    170	014F  B4 09		     SkipInstall:    mov ah, 09h
    171	0151  BA 0000r				     mov dx, offset SkipMsg
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 4
revil.asm



    172	0154  CD 21				     int 21h
    173
    174	0156  B8 4C00				     mov ax, 4c00h
    175	0159  CD 21				     int 21h
    176
    177
    178				     ; INT 9 (kbd) handler
    179	015B			     Int9Handler     proc far
    180
    181						     ;pusha
    182
    183						     ;mov ax, 0ah
    184						     ;mov bx, 0bh
    185						     ;mov cx, 0ch
    186						     ;mov dx, 0dh
    187
    188	015B  60				     pusha
    189	015C  06 1E				     push es ds
    190
    191	015E  8B EC				     mov bp, sp	 ; Old bp saved	by pusha
    192
    193	0160  8C C8				     mov ax, cs
    194	0162  8E D8				     mov ds, ax
    195
    196						     ;call SetCharInit	; I guess we may always	call it
    197
    198	0164  E4 60				     in	al, 60h
    199	0166  8A E0				     mov ah, al
    200	0168  C0 EC 07				     shr ah, 7	; ah holds whether it's	a key pressed or depressed
    201	016B  24 7F				     and al, 01111111b
    202
    203	016D  3C 4F				     cmp al, 4fh  ; Numpad 1
    204	016F  74 07				     je	Int9Handler_Num1
    205	0171  3C 52				     cmp al, 52h  ; Numpad 0
    206	0173  74 0A				     je	Int9Handler_Num0
    207
    208	0175  EB 5F 90				     jmp Int9Handler_next
    209
    210	0178			     Int9Handler_Num1:
    211	0178  30 26 0301r			     xor Int8Handler_show, ah  ; TODO: ?
    212
    213	017C  EB 42 90				     jmp Int9Handler_end
    214
    215	017F			     Int9Handler_Num0:
    216						     CheckIRQ 9	Int9Handler_overwritten
1   217
1   218	017F  B8 3509				     mov ax, 3500h OR 9
1   219	0182  CD 21				     int 21h
1   220	0184  8C C0				     mov ax, es
1   221
1   222	0186  81 FB 015Br			     cmp bx, offset Int9Handler
1   223	018A  75 28				     jne Int9Handler_overwritten
1   224	018C  8C CB				     mov bx, cs
1   225	018E  3B C3				     cmp ax, bx
1   226	0190  75 22				     jne Int9Handler_overwritten
1   227
    228	0192  F6 06 0304r 01 90			     test Int8Handler_kill9, 1
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 5
revil.asm



    229	0198  75 26				     jnz Int9Handler_end
    230
    231						     UninstallIRQ 9
1   232
1   233	019A  1E				     push ds
1   234
1   235	019B  B8 2509				     mov ax, 2500h OR 9
1   236	019E  8B 16 01DAr			     mov dx, Int9Handler_oldOff
1   237	01A2  8B 1E 01DCr			     mov bx, Int9Handler_oldSeg
1   238	01A6  8E DB				     mov ds, bx
1   239
1   240	01A8  CD 21				     int 21h
1   241
1   242	01AA  1F				     pop ds
1   243
    244	01AB  C6 06 0303r 01 90			     mov Int8Handler_kill, 1
    245
    246	01B1  EB 0D 90				     jmp Int9Handler_end
    247
    248	01B4			     Int9Handler_overwritten:
    249
    250	01B4  C6 06 0304r 01 90			     mov Int8Handler_kill9, 1
    251	01BA  C6 06 0303r 01 90			     mov Int8Handler_kill, 1
    252
    253						     ; Further shutdown	happens	within timer interrupt
    254
    255						     ; jmp Int9Handler_end ; Happens automatically
    256
    257	01C0			     Int9Handler_end:
    258	01C0  E4 61				     in	al, 61h
    259	01C2  8A E0				     mov ah, al
    260	01C4  0C 40				     or	al, 1000000b
    261	01C6  E6 61				     out 61h, al
    262	01C8  8A C4				     mov al, ah
    263	01CA  90				     nop
    264	01CB  90				     nop  ; As recommended
    265	01CC  E6 61				     out 61h, al
    266
    267	01CE  B0 20				     mov al, 20h
    268	01D0  E6 20				     out 20h, al
    269
    270	01D2  1F 07				     pop ds es
    271	01D4  61				     popa
    272
    273						     ;popa
    274
    275	01D5  CF				     iret
    276
    277	01D6			     Int9Handler_next:
    278	01D6  1F 07				     pop ds es
    279	01D8  61				     popa
    280
    281						     ;popa
    282
    283						     NextIRQ 9
1   284
1   285	01D9  EA				     db	0eah  ;	jmp far
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 6
revil.asm



1   286	01DA  0000		     Int9Handler_oldOff	     dw	0
1   287	01DC  0000		     Int9Handler_oldSeg	     dw	0
1   288
    289
    290	01DE			     Int9Handler     endp
    291
    292
    293				     ; INT 8 (timer) handler
    294	01DE			     Int8Handler     proc far
    295
    296						     ;push ax
    297						     ;mov al, 20h
    298						     ;out 20h, al
    299						     ;pop ax
    300						     ;iret
    301
    302						     ;pusha
    303
    304						     ;mov ax, 0ah
    305						     ;mov bx, 0bh
    306						     ;mov cx, 0ch
    307						     ;mov dx, 0dh
    308
    309	01DE  60				     pusha
    310	01DF  06 1E				     push es ds
    311
    312	01E1  8B EC				     mov bp, sp	 ; Old bp saved	by pusha
    313
    314	01E3  8C C8				     mov ax, cs
    315	01E5  8E D8				     mov ds, ax
    316
    317
    318	01E7  F6 06 0303r 01 90			     test Int8Handler_kill, 1
    319	01ED  75 7B				     jnz Int8Handler_detach
    320
    321
    322	01EF  A0 0300r				     mov al, Int8Handler_ticks
    323	01F2  84 C0				     test al, al
    324	01F4  74 03				     jz	Int8Handler_doTick
    325	01F6  E9 00FB				     jmp Int8Handler_next
    326	01F9			     Int8Handler_doTick:
    327	01F9  C6 06 0300r 04 90			     mov Int8Handler_ticks, Int8Handler_interval
    328
    329	01FF  E8 0356				     call SetCharInit  ; I guess we may	always call it
    330
    331
    332	0202  F6 06 0301r 01 90			     test Int8Handler_show, 1
    333	0208  75 03				     jnz Int8Handler_maybeShow	; TODO:	Restore	videobuf
    334	020A  E9 00CB				     jmp Int8Handler_maybeHide
    335
    336	020D			     Int8Handler_maybeShow:
    337	020D  F6 06 0302r 01 90			     test Int8Handler_wasShown,	1
    338	0213  75 11				     jnz Int8Handler_notShow
    339
    340						     ; TODO: Save segment under	frame
    341	0215  BB 0102 90			     mov bx, Int8Handler_FrameS
    342	0219  B9 060D 90			     mov cx, Int8Handler_FrameE
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 7
revil.asm



    343	021D  E8 01BE				     call SaveBG
    344
    345	0220  C6 06 0302r 01 90			     mov Int8Handler_wasShown, 1
    346
    347	0226			     Int8Handler_notShow:
    348	0226  BB 0102 90			     mov bx, Int8Handler_FrameS
    349	022A  B9 060D 90			     mov cx, Int8Handler_FrameE
    350	022E  E8 0238				     call DrawFrame
    351
    352	0231  BB 0204 90			     mov bx, Int8Handler_FrameT
    353	0235  B1 23 90 90			     mov cl, Int8Handler_LegendLen
    354	0239  BE 0305r				     mov si, offset Int8Handler_Legend
    355	023C  E8 038D				     call DrawStr
    356
    357	023F  8B 46 12				     mov ax, Int8Handler_OldA
    358	0242  BB 0207 90			     mov bx, Int8Handler_FrameTA
    359	0246  E8 03DA				     call DrawNumHex
    360
    361	0249  8B 46 0C				     mov ax, Int8Handler_OldB
    362	024C  BB 0307 90			     mov bx, Int8Handler_FrameTB
    363	0250  E8 03D0				     call DrawNumHex
    364
    365	0253  8B 46 10				     mov ax, Int8Handler_OldC
    366	0256  BB 0407 90			     mov bx, Int8Handler_FrameTC
    367	025A  E8 03C6				     call DrawNumHex
    368
    369	025D  8B 46 0E				     mov ax, Int8Handler_OldD
    370	0260  BB 0507 90			     mov bx, Int8Handler_FrameTD
    371	0264  E8 03BC				     call DrawNumHex
    372
    373	0267  E9 008A				     jmp Int8Handler_next
    374
    375	026A			     Int8Handler_detach:
    376	026A  F6 06 0301r 01 90			     test Int8Handler_show, 1
    377	0270  74 0B				     jz	Int8Handler_detach_noHide
    378
    379	0272  BB 0102 90			     mov bx, Int8Handler_FrameS
    380	0276  B9 060D 90			     mov cx, Int8Handler_FrameE
    381	027A  E8 01A9				     call RestoreBG
    382
    383						     ; mov Int8Handler_show, 0
    384						     ; mov Int8Handler_wasShown, 0
    385
    386	027D			     Int8Handler_detach_noHide:
    387
    388						     CheckIRQ 9	Int8Handler_detach_8
1   389
1   390	027D  B8 3509				     mov ax, 3500h OR 9
1   391	0280  CD 21				     int 21h
1   392	0282  8C C0				     mov ax, es
1   393
1   394	0284  81 FB 015Br			     cmp bx, offset Int9Handler
1   395	0288  75 1F				     jne Int8Handler_detach_8
1   396	028A  8C CB				     mov bx, cs
1   397	028C  3B C3				     cmp ax, bx
1   398	028E  75 19				     jne Int8Handler_detach_8
1   399
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 8
revil.asm



    400	0290  F6 06 0304r 01 90			     test Int8Handler_kill9, 1
    401	0296  74 11				     jz	Int8Handler_detach_8
    402
    403						     UninstallIRQ 9
1   404
1   405	0298  1E				     push ds
1   406
1   407	0299  B8 2509				     mov ax, 2500h OR 9
1   408	029C  8B 16 01DAr			     mov dx, Int9Handler_oldOff
1   409	02A0  8B 1E 01DCr			     mov bx, Int9Handler_oldSeg
1   410	02A4  8E DB				     mov ds, bx
1   411
1   412	02A6  CD 21				     int 21h
1   413
1   414	02A8  1F				     pop ds
1   415
    416
    417	02A9			     Int8Handler_detach_8:
    418
    419						     CheckIRQ 8	Int8Handler_next
1   420
1   421	02A9  B8 3508				     mov ax, 3500h OR 8
1   422	02AC  CD 21				     int 21h
1   423	02AE  8C C0				     mov ax, es
1   424
1   425	02B0  81 FB 01DEr			     cmp bx, offset Int8Handler
1   426	02B4  75 3E				     jne Int8Handler_next
1   427	02B6  8C CB				     mov bx, cs
1   428	02B8  3B C3				     cmp ax, bx
1   429	02BA  75 38				     jne Int8Handler_next
1   430
    431
    432						     UninstallIRQ 8
1   433
1   434	02BC  1E				     push ds
1   435
1   436	02BD  B8 2508				     mov ax, 2500h OR 8
1   437	02C0  8B 16 02FCr			     mov dx, Int8Handler_oldOff
1   438	02C4  8B 1E 02FEr			     mov bx, Int8Handler_oldSeg
1   439	02C8  8E DB				     mov ds, bx
1   440
1   441	02CA  CD 21				     int 21h
1   442
1   443	02CC  1F				     pop ds
1   444
    445
    446						     ; TODO: Verify interrupt isn't hijacked and refuse	to stop	in that	case (and   +
    447				     same for int8)
    448
    449						     ; Now I'll	do something incredibly	crotchy	- that is freeing the memory block I+
    450				     reside in.
    451						     ; That clearly contradicts	a well-known russian saying "Don't cut the branch   +
    452				     you're sitting on",
    453						     ; but I believe this shouldn't overwrite us, thanks to how	DOS doesn't support +
    454				     multithreading.
    455						     ; That should get us enough time to shut ourselves	down as	well. The only thing+
    456				     that has a	chance
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 9
revil.asm



    457						     ; to interrupt us is a timer tick (which I	intend to intercept myself as soon  +
    458				     as	I finish the
    459						     ; keyboard	part - then I'll move this bit of code there and it will become	    +
    460				     completely	invincible).
    461						     ; But even	now a disruption is unlikely - that would need the timer to request +
    462				     a memory block (or
    463						     ; start another program, which does that intrinsically), and that doesn't seem +
    464				     like things a timer
    465						     ; would ever want to do.
    466						     ; EDIT: Now that it's in timer, it	can't be interrupted
    467						     ;	     I guess I could have added	a cli as well, but there's no point in that +
    468				     now
    469
    470	02CD  06				     push es
    471	02CE  0E				     push cs
    472	02CF  07				     pop es
    473	02D0  B4 49				     mov ah, 49h
    474	02D2  CD 21				     int 21h
    475	02D4  07				     pop es
    476
    477	02D5  EB 1D 90				     jmp Int8Handler_next
    478
    479	02D8			     Int8Handler_maybeHide:
    480	02D8  F6 06 0302r 01 90			     test Int8Handler_wasShown,	1
    481	02DE  74 14				     jz	Int8Handler_next
    482
    483						     ; Restore saved videobuf from under frame
    484	02E0  BB 0102 90			     mov bx, Int8Handler_FrameS
    485	02E4  B9 060D 90			     mov cx, Int8Handler_FrameE
    486	02E8  E8 013B				     call RestoreBG
    487
    488	02EB  C6 06 0302r 00 90			     mov Int8Handler_wasShown, 0
    489
    490	02F1  EB 01 90				     jmp Int8Handler_next
    491
    492	02F4			     Int8Handler_next:
    493	02F4  FE 0E 0300r			     dec Int8Handler_ticks
    494
    495	02F8  1F 07				     pop ds es
    496	02FA  61				     popa
    497
    498						     ;popa
    499
    500						     NextIRQ 8
1   501
1   502	02FB  EA				     db	0eah  ;	jmp far
1   503	02FC  0000		     Int8Handler_oldOff	     dw	0
1   504	02FE  0000		     Int8Handler_oldSeg	     dw	0
1   505
    506
    507
    508	      =0004		     Int8Handler_interval    equ 4
    509	0300  00		     Int8Handler_ticks	     db	0
    510
    511				     ; TODO: Compress into a bitmask
    512	0301  00		     Int8Handler_show	     db	0
    513	0302  00		     Int8Handler_wasShown    db	0
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 10
revil.asm



    514	0303  00		     Int8Handler_kill	     db	0
    515	0304  00		     Int8Handler_kill9	     db	0
    516
    517	0305  61 78 3A 20 30 30	30+  Int8Handler_Legend	     db	'ax: 0000', 0ah, \
    518	      30 0A 62 78 3A 20	30+				'bx: 0000', 0ah, \
    519	      30 30 30 0A 63 78	3A+				'cx: 0000', 0ah, \
    520	      20 30 30 30 30 0A	64+				'dx: 0000'
    521	      78 3A 20 30 30 30	30
    522	      =0023		     Int8Handler_LegendLen   equ $ - Int8Handler_Legend
    523
    524	      =0002		     Int8Handler_FrameSX     equ 2
    525	      =0001		     Int8Handler_FrameSY     equ 1
    526	      =000B		     Int8Handler_FrameW	     equ 11
    527	      =0005		     Int8Handler_FrameH	     equ 5
    528	      =000D		     Int8Handler_FrameEX     equ Int8Handler_FrameSX + Int8Handler_FrameW
    529	      =0006		     Int8Handler_FrameEY     equ Int8Handler_FrameSY + Int8Handler_FrameH
    530
    531	      =0102		     Int8Handler_FrameS	     equ (Int8Handler_FrameSY SHL 8) OR	Int8Handler_FrameSX
    532	      =060D		     Int8Handler_FrameE	     equ (Int8Handler_FrameEY SHL 8) OR	Int8Handler_FrameEX
    533
    534	      =0204		     Int8Handler_FrameT	     equ Int8Handler_FrameS + 0102h
    535	      =0207		     Int8Handler_FrameTA     equ Int8Handler_FrameT + 0003h
    536	      =0307		     Int8Handler_FrameTB     equ Int8Handler_FrameTA + 0100h
    537	      =0407		     Int8Handler_FrameTC     equ Int8Handler_FrameTB + 0100h
    538	      =0507		     Int8Handler_FrameTD     equ Int8Handler_FrameTC + 0100h
    539
    540	      =	[bp+18]		     Int8Handler_OldA	     equ [bp+18]
    541	      =	[bp+12]		     Int8Handler_OldB	     equ [bp+12]
    542	      =	[bp+16]		     Int8Handler_OldC	     equ [bp+16]
    543	      =	[bp+14]		     Int8Handler_OldD	     equ [bp+14]
    544
    545	0328  B6*(??)		     Int8Handler_BG	     db	(((Int8Handler_FrameH +	2) * (Int8Handler_FrameW + 2)) * 2)dup(?)
    546
    547	03DE			     Int8Handler     endp
    548
    549
    550				     ; void SaveBG(bh: fromRow,	bl: fromCol, ch: toRow,	cl: toCol)
    551				     ; uses ax,	bx, cx,	dx, si,	di
    552	03DE			     SaveBG	     proc near
    553	03DE  06 1E				     push es ds
    554
    555	03E0  FE C5				     inc ch
    556	03E2  FE C1				     inc cl
    557
    558	03E4  53				     push bx
    559						     Coords2KeyM a, b
1   560
1   561	03E5  A1 059Cr				     mov ax, SetChar_width
1   562	03E8  F6 E7				     mul bh
1   563	03EA  32 FF				     xor bh, bh
1   564	03EC  02 C3				     add al, bl
1   565	03EE  80 D4 00				     adc ah, 0
1   566	03F1  D1 E0				     shl ax, 1
1   567
    568	03F3  5B				     pop bx
    569
    570	03F4  8B F0				     mov si, ax
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 11
revil.asm



    571	03F6  BF 0328r				     mov di, offset Int8Handler_BG
    572
    573	03F9  8B D1				     mov dx, cx
    574	03FB  2B D3				     sub dx, bx	 ; actually dl -= bl; dh -= bh
    575
    576	03FD  FF 36 059Er			     push SetChar_buf
    577	0401  1E				     push ds
    578	0402  07				     pop es
    579	0403  1F				     pop ds
    580
    581	0404  FC				     cld
    582
    583	0405  32 ED				     xor ch, ch
    584
    585	0407  84 F6		     SaveBG_loop:    test dh, dh
    586	0409  74 18				     jz	SaveBG_loop_end
    587
    588	040B  8A CA				     mov cl, dl
    589
    590	040D  F3> A5				     rep movsw
    591
    592	040F  FE CE				     dec dh
    593	0411  26: A1 059Cr			     mov ax, es:SetChar_width
    594	0415  D1 E0				     shl ax, 1
    595	0417  03 F0				     add si, ax
    596	0419  32 E4				     xor ah, ah
    597	041B  8A C2				     mov al, dl
    598	041D  D1 E0				     shl ax, 1
    599	041F  2B F0				     sub si, ax
    600
    601	0421  EB E4				     jmp SaveBG_loop
    602	0423			     SaveBG_loop_end:
    603
    604	0423  1F 07				     pop ds es
    605
    606	0425  C3				     ret
    607	0426			     SaveBG	     endp
    608
    609
    610				     ; void RestoreBG(bh: fromRow, bl: fromCol,	ch: toRow, cl: toCol)
    611				     ; uses ax,	bx, cx,	dx, si,	di
    612	0426			     RestoreBG	     proc near
    613	0426  06				     push es
    614
    615	0427  FE C5				     inc ch
    616	0429  FE C1				     inc cl
    617
    618	042B  53				     push bx
    619						     Coords2KeyM a, b
1   620
1   621	042C  A1 059Cr				     mov ax, SetChar_width
1   622	042F  F6 E7				     mul bh
1   623	0431  32 FF				     xor bh, bh
1   624	0433  02 C3				     add al, bl
1   625	0435  80 D4 00				     adc ah, 0
1   626	0438  D1 E0				     shl ax, 1
1   627
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 12
revil.asm



    628	043A  5B				     pop bx
    629
    630	043B  BE 0328r				     mov si, offset Int8Handler_BG
    631	043E  8B F8				     mov di, ax
    632
    633	0440  8B D1				     mov dx, cx
    634	0442  2B D3				     sub dx, bx	 ; actually dl -= bl; dh -= bh
    635
    636	0444  FF 36 059Er			     push SetChar_buf
    637	0448  07				     pop es
    638
    639						     ;mov word ptr ds:[si], 7h SHL 8 OR	'!'
    640						     ;mov byte ptr ds:[si], '!'
    641
    642	0449  FC				     cld
    643
    644	044A  32 ED				     xor ch, ch
    645
    646	044C  84 F6		     RestoreBG_loop: test dh, dh
    647	044E  74 17				     jz	RestoreBG_loop_end
    648
    649	0450  8A CA				     mov cl, dl
    650
    651	0452  F3> A5				     rep movsw
    652
    653	0454  FE CE				     dec dh
    654	0456  A1 059Cr				     mov ax, SetChar_width
    655	0459  D1 E0				     shl ax, 1
    656	045B  03 F8				     add di, ax
    657	045D  32 E4				     xor ah, ah
    658	045F  8A C2				     mov al, dl
    659	0461  D1 E0				     shl ax, 1
    660	0463  2B F8				     sub di, ax
    661
    662	0465  EB E5				     jmp RestoreBG_loop
    663	0467			     RestoreBG_loop_end:
    664
    665	0467  07				     pop es
    666
    667	0468  C3				     ret
    668	0469			     RestoreBG	     endp
    669
    670
    671				     ; void DrawFrame(bh: fromRow, bl: fromCol,	ch: toRow, cl: toCol)
    672				     ; uses ax,	bx, cx,	dx, di,	SetChar
    673	0469			     DrawFrame	     proc near
    674
    675	      =	[bp-1]		     DrawFrame_fromRow	     equ [bp-1]
    676	      =	[bp-2]		     DrawFrame_fromCol	     equ [bp-2]
    677	      =	[bp-3]		     DrawFrame_toRow	     equ [bp-3]
    678	      =	[bp-4]		     DrawFrame_toCol	     equ [bp-4]
    679
    680	0469  55				     push bp
    681	046A  8B EC				     mov bp, sp
    682	046C  83 EC 04				     sub sp, 4
    683
    684	046F  88 7E FF				     mov DrawFrame_fromRow, bh
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 13
revil.asm



    685	0472  88 5E FE				     mov DrawFrame_fromCol, bl
    686	0475  88 6E FD				     mov DrawFrame_toRow, ch
    687	0478  88 4E FC				     mov DrawFrame_toCol, cl
    688
    689	047B  B8 0600				     mov ax, 0600h
    690	047E  8B D1				     mov dx, cx
    691	0480  8B CB				     mov cx, bx
    692	0482  B7 1F				     mov bh, FrameStyle
    693	0484  CD 10				     int 10h
    694
    695	0486  B5 1F				     mov ch, FrameStyle
    696	0488  B1 C9				     mov cl, 201
    697	048A  8A 7E FF				     mov bh, DrawFrame_fromRow
    698	048D  8A 5E FE				     mov bl, DrawFrame_fromCol
    699	0490  E8 00EE				     call SetChar
    700
    701	0493  B5 1F				     mov ch, FrameStyle
    702	0495  B1 BB				     mov cl, 187
    703	0497  8A 7E FF				     mov bh, DrawFrame_fromRow
    704	049A  8A 5E FC				     mov bl, DrawFrame_toCol
    705	049D  E8 00E1				     call SetChar
    706
    707	04A0  B5 1F				     mov ch, FrameStyle
    708	04A2  B1 BC				     mov cl, 188
    709	04A4  8A 7E FD				     mov bh, DrawFrame_toRow
    710	04A7  8A 5E FC				     mov bl, DrawFrame_toCol
    711	04AA  E8 00D4				     call SetChar
    712
    713	04AD  B5 1F				     mov ch, FrameStyle
    714	04AF  B1 C8				     mov cl, 200
    715	04B1  8A 7E FD				     mov bh, DrawFrame_toRow
    716	04B4  8A 5E FE				     mov bl, DrawFrame_fromCol
    717	04B7  E8 00C7				     call SetChar
    718
    719
    720						     ; es is already set by SetChar
    721	04BA  FC				     cld
    722	04BB  32 ED				     xor ch, ch
    723
    724	04BD  8A 4E FC				     mov cl, DrawFrame_toCol
    725	04C0  2A 4E FE				     sub cl, DrawFrame_fromCol
    726	04C3  FE C9				     dec cl
    727	04C5  F6 C1 80				     test cl, 1	SHL 7
    728	04C8  75 44				     jnz DrawFrame_loopH_end
    729
    730	04CA  8A 5E FE				     mov bl, DrawFrame_fromCol
    731	04CD  8A 7E FF				     mov bh, DrawFrame_fromRow
    732						     Coords2KeyM a, b
1   733
1   734	04D0  A1 059Cr				     mov ax, SetChar_width
1   735	04D3  F6 E7				     mul bh
1   736	04D5  32 FF				     xor bh, bh
1   737	04D7  02 C3				     add al, bl
1   738	04D9  80 D4 00				     adc ah, 0
1   739	04DC  D1 E0				     shl ax, 1
1   740
    741	04DE  40				     inc ax
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 14
revil.asm



    742	04DF  40				     inc ax
    743	04E0  8B F8				     mov di, ax
    744
    745	04E2  B4 1F				     mov ah, FrameStyle
    746	04E4  B0 CD				     mov al, 205
    747
    748	04E6  F3> AB				     rep stosw
    749
    750
    751	04E8  8A 4E FC				     mov cl, DrawFrame_toCol
    752	04EB  2A 4E FE				     sub cl, DrawFrame_fromCol
    753	04EE  FE C9				     dec cl
    754
    755	04F0  8A 5E FE				     mov bl, DrawFrame_fromCol
    756	04F3  8A 7E FD				     mov bh, DrawFrame_toRow
    757						     Coords2KeyM a, b
1   758
1   759	04F6  A1 059Cr				     mov ax, SetChar_width
1   760	04F9  F6 E7				     mul bh
1   761	04FB  32 FF				     xor bh, bh
1   762	04FD  02 C3				     add al, bl
1   763	04FF  80 D4 00				     adc ah, 0
1   764	0502  D1 E0				     shl ax, 1
1   765
    766	0504  40				     inc ax
    767	0505  40				     inc ax
    768	0506  8B F8				     mov di, ax
    769
    770	0508  B4 1F				     mov ah, FrameStyle
    771	050A  B0 CD				     mov al, 205
    772
    773	050C  F3> AB				     rep stosw
    774
    775	050E			     DrawFrame_loopH_end:
    776
    777	050E  8A 4E FD				     mov cl, DrawFrame_toRow
    778	0511  2A 4E FF				     sub cl, DrawFrame_fromRow
    779	0514  FE C9				     dec cl
    780	0516  F6 C1 80				     test cl, 1	SHL 7
    781	0519  75 F3				     jnz DrawFrame_loopH_end
    782
    783	051B  8A 5E FE				     mov bl, DrawFrame_fromCol
    784	051E  8A 7E FF				     mov bh, DrawFrame_fromRow
    785	0521  FE C7				     inc bh
    786						     Coords2KeyM a, b
1   787
1   788	0523  A1 059Cr				     mov ax, SetChar_width
1   789	0526  F6 E7				     mul bh
1   790	0528  32 FF				     xor bh, bh
1   791	052A  02 C3				     add al, bl
1   792	052C  80 D4 00				     adc ah, 0
1   793	052F  D1 E0				     shl ax, 1
1   794
    795
    796	0531  8B F8				     mov di, ax
    797	0533  A1 059Cr				     mov ax, SetChar_width  ; TODO: Change previous macro params instead
    798	0536  D1 E0				     shl ax, 1
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 15
revil.asm



    799
    800	0538  32 FF				     xor bh, bh
    801	053A  8A 5E FC				     mov bl, DrawFrame_toCol
    802	053D  2A 5E FE				     sub bl, DrawFrame_fromCol
    803	0540  D0 E3				     shl bl, 1
    804	0542  73 02				     jnc DrawFrame_loopV
    805	0544  32 DB				     xor bl, bl
    806
    807	0546			     DrawFrame_loopV:
    808	0546  26: C7 05	1FBA			     mov word ptr es:[di],    (FrameStyle SHL 8) OR 186
    809	054B  26: C7 01	1FBA			     mov word ptr es:[di+bx], (FrameStyle SHL 8) OR 186
    810
    811	0550  03 F8				     add di, ax
    812	0552  E2 F2				     loop DrawFrame_loopV
    813
    814	0554			     DrawFrame_loopV_end:
    815
    816
    817	0554  8B E5				     mov sp, bp
    818	0556  5D				     pop bp
    819	0557  C3				     ret
    820	0558			     DrawFrame	     endp
    821
    822
    823				     ; void SetCharInit()
    824				     ; uses: ax, bx, es
    825	0558			     SetCharInit     proc near
    826
    827	0558  CD 11				     int 11h
    828	055A  35 0030				     xor ax, 30h
    829	055D  C1 E0 0B				     shl ax, 11
    830	0560  0D B800				     or	ax, VIDEOSEG
    831	0563  A3 059Er				     mov SetChar_buf, ax
    832
    833	0566  B8 0040				     mov ax, 40h
    834	0569  8E C0				     mov es, ax
    835	056B  26: A1 004A			     mov ax, es:4ah  ; 80 most often
    836	056F  A3 059Cr				     mov SetChar_width,	ax
    837
    838	0572  C3				     ret
    839
    840	0573			     SetCharInit     endp
    841
    842
    843				     ; Coords2KeyM moved up
    844
    845
    846				     ; ax: coords Coords2Key(bh: row, bl: column)
    847				     ; uses: ax, (bx), dx
    848	0573			     Coords2Key	     proc near
    849						     Coords2KeyM a, b
1   850
1   851	0573  A1 059Cr				     mov ax, SetChar_width
1   852	0576  F6 E7				     mul bh
1   853	0578  32 FF				     xor bh, bh
1   854	057A  02 C3				     add al, bl
1   855	057C  80 D4 00				     adc ah, 0
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 16
revil.asm



1   856	057F  D1 E0				     shl ax, 1
1   857
    858	0581			     Coords2Key	     endp
    859
    860
    861				     ; ax: index SetChar(cl: letter, ch: attrs,	bh: row, bl: column)
    862				     ; uses: ax, (bx), (cx), dx, es
    863	0581			     SetChar	     proc near
    864	0581  53				     push bx
    865						     Coords2KeyM a, b
1   866
1   867	0582  A1 059Cr				     mov ax, SetChar_width
1   868	0585  F6 E7				     mul bh
1   869	0587  32 FF				     xor bh, bh
1   870	0589  02 C3				     add al, bl
1   871	058B  80 D4 00				     adc ah, 0
1   872	058E  D1 E0				     shl ax, 1
1   873
    874
    875	0590  93				     xchg ax, bx
    876
    877	0591  8B 16 059Er			     mov dx, SetChar_buf
    878	0595  8E C2				     mov es, dx
    879	0597  26: 89 0F				     mov es:[bx], cx
    880
    881	059A  5B				     pop bx
    882
    883	059B  C3				     ret
    884
    885	059C  0050		     SetChar_width   dw	80
    886	059E  0000		     SetChar_buf     dw	0
    887	05A0			     SetChar	     endp
    888
    889
    890				     ; void Beep(bx: frequency,	cx: length)
    891				     ; uses ax,	bx, cx
    892	05A0			     Beep	     proc near
    893	05A0  B0 B6				     mov al, 182
    894	05A2  E6 43				     out 43h, al
    895	05A4  8B C3				     mov ax, bx
    896	05A6  E6 42				     out 42h, al
    897	05A8  8A C4				     mov al, ah
    898	05AA  E6 42				     out 42h, al
    899	05AC  E4 61				     in	al, 61h
    900	05AE  0C 03				     or	al, 00000011b
    901	05B0  E6 61				     out 61h, al
    902	05B2  8B D9				     mov bx, cx
    903
    904
    905	05B4  B9 FFFF		     Beep_pause1:    mov cx, 65535
    906	05B7  49		     Beep_pause2:    dec cx
    907	05B8  75 FD				     jnz Beep_pause2
    908	05BA  4B				     dec bx
    909	05BB  75 F7				     jnz Beep_pause1
    910	05BD  E4 61				     in	al, 61h
    911	05BF  24 FC				     and al, 11111100b
    912	05C1  E6 61				     out 61h, al
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 17
revil.asm



    913
    914	05C3  C3				     ret
    915	05C4			     Beep	     endp
    916
    917
    918				     ; TODO: Maybe use the int 15h 81h
    919				     ; void Sleep(ax: duration)
    920				     ; uses ax
    921	05C4			     Sleep	     proc near
    922
    923	05C4  85 C0		     Sleep_loop:     test ax, ax
    924	05C6  74 03				     jz	Sleep_loop_end
    925	05C8  48				     dec ax
    926	05C9  EB F9				     jmp Sleep_loop
    927	05CB			     Sleep_loop_end:
    928	05CB  C3				     ret
    929	05CC			     Sleep	     endp
    930
    931
    932				     ; void DrawStr(bh:	row, bl: column, cl: length, si: source)
    933				     ; uses ax,	bx, cx,	si, SetChar
    934	05CC			     DrawStr	     proc near
    935	      =	[bp-1]		     DrawStr_i	     equ [bp-1]
    936	      =	[bp-2]		     DrawStr_origCol equ [bp-2]
    937	05CC  55				     push bp
    938	05CD  8B EC				     mov bp, sp
    939	05CF  83 EC 02				     sub sp, 2
    940
    941	05D2  88 5E FE				     mov DrawStr_origCol, bl
    942	05D5  88 4E FF				     mov DrawStr_i, cl
    943
    944	05D8  8A 46 FF		     DrawStr_loop:   mov al, DrawStr_i
    945	05DB  84 C0				     test al, al
    946	05DD  74 20				     jz	DrawStr_loop_end
    947
    948	05DF  8A 0C				     mov cl, [si]
    949	05E1  80 F9 0A				     cmp cl, 0ah
    950	05E4  74 0E				     je	DrawStr_nl
    951
    952	05E6  84 C9				     test cl, cl
    953	05E8  74 15				     jz	DrawStr_loop_end
    954
    955	05EA  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    956	05EC  E8 FF92				     call SetChar
    957
    958	05EF  FE C3				     inc bl
    959
    960	05F1  EB 06 90				     jmp DrawStr_nl_skip
    961
    962	05F4  8A 5E FE		     DrawStr_nl:     mov bl, DrawStr_origCol
    963	05F7  FE C7				     inc bh
    964
    965	05F9			     DrawStr_nl_skip:
    966	05F9  46				     inc si
    967	05FA  FE 4E FF				     dec byte ptr DrawStr_i
    968	05FD  EB D9				     jmp DrawStr_loop
    969	05FF			     DrawStr_loop_end:
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 18
revil.asm



    970
    971	05FF  8B E5				     mov sp, bp
    972	0601  5D				     pop bp
    973	0602  C3				     ret
    974	0603			     DrawStr	     endp
    975
    976
    977				     ; void DrawNum10(ax: num, bh: row,	bl: column)
    978				     ; uses ax,	bx, cx,	dx, SetChar
    979	0603			     DrawNum10	     proc near
    980	0603  80 C3 05				     add bl, 5
    981
    982	0606  85 C0		     DrawNum10_loop: test ax, ax
    983	0608  74 18				     jz	DrawNum10_loop_end
    984
    985						     ;aam  ; This is faster than division and more convenient, although	relies on ax+
    986				     being small enough
    987	060A  B1 0A				     mov cl, 10
    988	060C  32 ED				     xor ch, ch
    989	060E  33 D2				     xor dx, dx
    990	0610  F7 F1				     div cx
    991
    992	0612  80 C2 30				     add dl, '0'
    993	0615  8A CA				     mov cl, dl
    994	0617  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    995
    996	0619  50				     push ax
    997	061A  E8 FF64				     call SetChar
    998	061D  58				     pop ax
    999
   1000	061E  FE CB				     dec bl
   1001	0620  EB E4				     jmp DrawNum10_loop
   1002	0622			     DrawNum10_loop_end:
   1003
   1004	0622  C3				     ret
   1005	0623			     DrawNum10	     endp
   1006
   1007
   1008				     ; void DrawNumHex(ax: num,	bh: row, bl: column)
   1009				     ; uses ax,	bx, cx,	SetChar
   1010	0623			     DrawNumHex	     proc near
   1011	0623  80 C3 04				     add bl, 4
   1012
   1013	0626			     DrawNumHex_loop:
   1014	0626  85 C0				     test ax, ax
   1015	0628  74 21				     jz	DrawNumHex_loop_end
   1016
   1017	062A  8A C8				     mov cl, al
   1018	062C  80 E1 0F				     and cl, 0fh
   1019
   1020	062F  80 F9 0A				     cmp cl, 10
   1021	0632  73 06				     jae DrawNumHex_bigDigit
   1022
   1023	0634  80 C1 30				     add cl, '0'
   1024
   1025	0637  EB 04 90				     jmp DrawNumHex_notBigDigit
   1026	063A			     DrawNumHex_bigDigit:
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 19
revil.asm



   1027	063A  80 C1 37				     add cl, 'A'-10
   1028	063D			     DrawNumHex_notBigDigit:
   1029
   1030	063D  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
   1031
   1032	063F  C1 E8 04				     shr ax, 4
   1033
   1034	0642  50				     push ax
   1035	0643  E8 FF3B				     call SetChar
   1036	0646  58				     pop ax
   1037
   1038	0647  FE CB				     dec bl
   1039	0649  EB DB				     jmp DrawNumHex_loop
   1040	064B			     DrawNumHex_loop_end:
   1041
   1042	064B  C3				     ret
   1043	064C			     DrawNumHex	     endp
   1044
   1045
   1046	064C			     ProgEnd:
   1047
   1048	064C			     .data
   1049
   1050	0000  53 6B 69 70 70 69	6E+  SkipMsg	     db	"Skipping installation.", 0ah, 0dh, "$"
   1051	      67 20 69 6E 73 74	61+
   1052	      6C 6C 61 74 69 6F	6E+
   1053	      2E 0A 0D 24
   1054
   1055				     end Start
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 20
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/19/21"
??FILENAME			  Text	 "revil	  "
??TIME				  Text	 "09:03:18"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REVIL
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BEEP				  Near	 DGROUP:05A0
BEEP_PAUSE1			  Near	 DGROUP:05B4
BEEP_PAUSE2			  Near	 DGROUP:05B7
COORDS2KEY			  Near	 DGROUP:0573
DRAWFRAME			  Near	 DGROUP:0469
DRAWFRAME_FROMCOL		  Text	 [bp-2]
DRAWFRAME_FROMROW		  Text	 [bp-1]
DRAWFRAME_LOOPH_END		  Near	 DGROUP:050E
DRAWFRAME_LOOPV			  Near	 DGROUP:0546
DRAWFRAME_LOOPV_END		  Near	 DGROUP:0554
DRAWFRAME_TOCOL			  Text	 [bp-4]
DRAWFRAME_TOROW			  Text	 [bp-3]
DRAWNUM10			  Near	 DGROUP:0603
DRAWNUM10_LOOP			  Near	 DGROUP:0606
DRAWNUM10_LOOP_END		  Near	 DGROUP:0622
DRAWNUMHEX			  Near	 DGROUP:0623
DRAWNUMHEX_BIGDIGIT		  Near	 DGROUP:063A
DRAWNUMHEX_LOOP			  Near	 DGROUP:0626
DRAWNUMHEX_LOOP_END		  Near	 DGROUP:064B
DRAWNUMHEX_NOTBIGDIGIT		  Near	 DGROUP:063D
DRAWSTR				  Near	 DGROUP:05CC
DRAWSTR_I			  Text	 [bp-1]
DRAWSTR_LOOP			  Near	 DGROUP:05D8
DRAWSTR_LOOP_END		  Near	 DGROUP:05FF
DRAWSTR_NL			  Near	 DGROUP:05F4
DRAWSTR_NL_SKIP			  Near	 DGROUP:05F9
DRAWSTR_ORIGCOL			  Text	 [bp-2]
FRAMESTYLE			  Number 001F
INT8HANDLER			  Far	 DGROUP:01DE
INT8HANDLER_BG			  Byte	 DGROUP:0328
INT8HANDLER_DETACH		  Near	 DGROUP:026A
INT8HANDLER_DETACH_8		  Near	 DGROUP:02A9
INT8HANDLER_DETACH_NOHIDE	  Near	 DGROUP:027D
INT8HANDLER_DOTICK		  Near	 DGROUP:01F9
INT8HANDLER_FRAMEE		  Number 060D
INT8HANDLER_FRAMEEX		  Number 000D
INT8HANDLER_FRAMEEY		  Number 0006
INT8HANDLER_FRAMEH		  Number 0005
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 21
Symbol Table



INT8HANDLER_FRAMES		  Number 0102
INT8HANDLER_FRAMESX		  Number 0002
INT8HANDLER_FRAMESY		  Number 0001
INT8HANDLER_FRAMET		  Number 0204
INT8HANDLER_FRAMETA		  Number 0207
INT8HANDLER_FRAMETB		  Number 0307
INT8HANDLER_FRAMETC		  Number 0407
INT8HANDLER_FRAMETD		  Number 0507
INT8HANDLER_FRAMEW		  Number 000B
INT8HANDLER_INTERVAL		  Number 0004
INT8HANDLER_KILL		  Byte	 DGROUP:0303
INT8HANDLER_KILL9		  Byte	 DGROUP:0304
INT8HANDLER_LEGEND		  Byte	 DGROUP:0305
INT8HANDLER_LEGENDLEN		  Number 0023
INT8HANDLER_MAYBEHIDE		  Near	 DGROUP:02D8
INT8HANDLER_MAYBESHOW		  Near	 DGROUP:020D
INT8HANDLER_NEXT		  Near	 DGROUP:02F4
INT8HANDLER_NOTSHOW		  Near	 DGROUP:0226
INT8HANDLER_OLDA		  Text	 [bp+18]
INT8HANDLER_OLDB		  Text	 [bp+12]
INT8HANDLER_OLDC		  Text	 [bp+16]
INT8HANDLER_OLDD		  Text	 [bp+14]
INT8HANDLER_OLDOFF		  Word	 DGROUP:02FC
INT8HANDLER_OLDSEG		  Word	 DGROUP:02FE
INT8HANDLER_SHOW		  Byte	 DGROUP:0301
INT8HANDLER_TICKS		  Byte	 DGROUP:0300
INT8HANDLER_WASSHOWN		  Byte	 DGROUP:0302
INT9HANDLER			  Far	 DGROUP:015B
INT9HANDLER_END			  Near	 DGROUP:01C0
INT9HANDLER_NEXT		  Near	 DGROUP:01D6
INT9HANDLER_NUM0		  Near	 DGROUP:017F
INT9HANDLER_NUM1		  Near	 DGROUP:0178
INT9HANDLER_OLDOFF		  Word	 DGROUP:01DA
INT9HANDLER_OLDSEG		  Word	 DGROUP:01DC
INT9HANDLER_OVERWRITTEN		  Near	 DGROUP:01B4
PROGEND				  Near	 DGROUP:064C
RESTOREBG			  Near	 DGROUP:0426
RESTOREBG_LOOP			  Near	 DGROUP:044C
RESTOREBG_LOOP_END		  Near	 DGROUP:0467
SAVEBG				  Near	 DGROUP:03DE
SAVEBG_LOOP			  Near	 DGROUP:0407
SAVEBG_LOOP_END			  Near	 DGROUP:0423
SETCHAR				  Near	 DGROUP:0581
SETCHARINIT			  Near	 DGROUP:0558
SETCHAR_BUF			  Word	 DGROUP:059E
SETCHAR_WIDTH			  Word	 DGROUP:059C
SKIPINSTALL			  Near	 DGROUP:014F
SKIPMSG				  Byte	 DGROUP:0000
SLEEP				  Near	 DGROUP:05C4
SLEEP_LOOP			  Near	 DGROUP:05C4
SLEEP_LOOP_END			  Near	 DGROUP:05CB
START				  Near	 DGROUP:0100
VIDEOSEG			  Number B800
Turbo Assembler	 Version 4.1	    02/19/21 09:03:18	    Page 22
Symbol Table




Macro Name

CHECKIRQ
COORDS2KEYM
INSTALLIRQ
NEXTIRQ
UNINSTALLIRQ

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0019 Word	  Public  DATA
  _TEXT				  16  064C Word	  Public  CODE
