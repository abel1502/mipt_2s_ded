Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 1
revil.asm



      1	0000			     .model tiny
      2				     .286
      3	0000			     .code
      4
      5	      =B800		     VIDEOSEG	     equ 0b800h
      6	      =001F		     FrameStyle	     equ 00011111b
      7
      8
      9				     InstallIRQ	     macro number
     10
     11						     mov ax, 3500h OR number
     12						     int 21h
     13						     mov ax, es
     14
     15						     cmp bx, offset Int&number&Handler
     16						     je	SkipInstall
     17
     18
     19						     mov Int&number&Handler_oldOff, bx
     20						     mov Int&number&Handler_oldSeg, ax
     21
     22						     ; cli not needed
     23
     24						     mov ax, 2500h OR number
     25						     mov dx, offset Int&number&Handler
     26						     int 21h
     27
     28						     endm
     29
     30
     31				     UninstallIRQ    macro number
     32
     33						     push ds
     34
     35						     mov ax, 2500h OR number
     36						     mov dx, Int&number&Handler_oldOff
     37						     mov bx, Int&number&Handler_oldSeg
     38						     mov ds, bx
     39
     40						     int 21h
     41
     42						     pop ds
     43
     44						     endm
     45
     46
     47				     NextIRQ	     macro number
     48
     49						     db	0eah  ;	jmp far
     50				     Int&number&Handler_oldOff	     dw	0
     51				     Int&number&Handler_oldSeg	     dw	0
     52
     53						     endm
     54
     55
     56				     ; Same as Coords2Key, but embeddable
     57				     ; macro(result (register letter, can't be d), coords (register letter, can't be d))
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 2
revil.asm



     58				     Coords2KeyM     macro result, coords
     59
     60						     mov result&x, SetChar_width
     61						     mul coords&h
     62						     xor coords&h, coords&h
     63						     add result&l, coords&l
     64						     adc result&h, 0
     65						     shl result&x, 1
     66
     67						     endm
     68
     69
     70				     org 100h
     71	0100  E8 03DC		     Start:	     call SetCharInit
     72
     73						     ; mov ax, 3509h
     74						     ; int 21h
     75						     ; mov ax, es
     76
     77						     ; cmp bx, offset Int9Handler
     78						     ; je SkipInstall
     79
     80
     81						     ; mov Int9Handler_oldOff, bx
     82						     ; mov Int9Handler_oldSeg, ax
     83
     84						     ; ; As the	docs recommend,	we may as well free our	environment block
     85						     ; push es
     86						     ; push cs:2ch
     87						     ; pop es
     88						     ; mov ah, 49h
     89						     ; int 21h
     90						     ; pop es
     91
     92
     93						     ; ; cli not needed
     94
     95						     ; mov ax, 2509h
     96						     ; mov dx, offset Int9Handler
     97						     ; int 21h
     98
     99
    100						     ; As the docs recommend, we may as	well free our environment block
    101	0103  06				     push es
    102	0104  2E: FF 36	002C			     push cs:2ch
    103	0109  07				     pop es
    104	010A  B4 49				     mov ah, 49h
    105	010C  CD 21				     int 21h
    106	010E  07				     pop es
    107
    108						     InstallIRQ	9
1   109
1   110	010F  B8 3509				     mov ax, 3500h OR 9
1   111	0112  CD 21				     int 21h
1   112	0114  8C C0				     mov ax, es
1   113
1   114	0116  81 FB 015Fr			     cmp bx, offset Int9Handler
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 3
revil.asm



1   115	011A  74 37				     je	SkipInstall
1   116
1   117
1   118	011C  89 1E 01B4r			     mov Int9Handler_oldOff, bx
1   119	0120  A3 01B6r				     mov Int9Handler_oldSeg, ax
1   120
1   121						     ; cli not needed
1   122
1   123	0123  B8 2509				     mov ax, 2500h OR 9
1   124	0126  BA 015Fr				     mov dx, offset Int9Handler
1   125	0129  CD 21				     int 21h
1   126
    127
    128						     InstallIRQ	8
1   129
1   130	012B  B8 3508				     mov ax, 3500h OR 8
1   131	012E  CD 21				     int 21h
1   132	0130  8C C0				     mov ax, es
1   133
1   134	0132  81 FB 01B8r			     cmp bx, offset Int8Handler
1   135	0136  74 1B				     je	SkipInstall
1   136
1   137
1   138	0138  89 1E 0284r			     mov Int8Handler_oldOff, bx
1   139	013C  A3 0286r				     mov Int8Handler_oldSeg, ax
1   140
1   141						     ; cli not needed
1   142
1   143	013F  B8 2508				     mov ax, 2500h OR 8
1   144	0142  BA 01B8r				     mov dx, offset Int8Handler
1   145	0145  CD 21				     int 21h
1   146
    147
    148	0147  B8 3100				     mov ax, 3100h
    149	014A  BA 05D3r				     mov dx, offset ProgEnd
    150	014D  C1 EA 04				     shr dx, 4
    151	0150  42				     inc dx
    152	0151  CD 21				     int 21h
    153
    154
    155	0153  B4 09		     SkipInstall:    mov ah, 09h
    156	0155  BA 0000r				     mov dx, offset SkipMsg
    157	0158  CD 21				     int 21h
    158
    159	015A  B8 4C00				     mov ax, 4c00h
    160	015D  CD 21				     int 21h
    161
    162
    163				     ; INT 9 (kbd) handler
    164	015F			     Int9Handler     proc far
    165
    166						     ;pusha
    167
    168						     ;mov ax, 0ah
    169						     ;mov bx, 0bh
    170						     ;mov cx, 0ch
    171						     ;mov dx, 0dh
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 4
revil.asm



    172
    173	015F  60				     pusha
    174	0160  06 1E				     push es ds
    175
    176	0162  8B EC				     mov bp, sp	 ; Old bp saved	by pusha
    177
    178	0164  8C C8				     mov ax, cs
    179	0166  8E D8				     mov ds, ax
    180
    181						     ;call SetCharInit	; I guess we may always	call it
    182
    183	0168  E4 60				     in	al, 60h
    184	016A  8A E0				     mov ah, al
    185	016C  C0 EC 07				     shr ah, 7	; ah holds whether it's	a key pressed or depressed
    186	016F  24 7F				     and al, 01111111b
    187
    188	0171  3C 4F				     cmp al, 4fh  ; Numpad 1
    189	0173  74 07				     je	Int9Handler_Num1
    190	0175  3C 52				     cmp al, 52h  ; Numpad 0
    191	0177  74 0A				     je	Int9Handler_Num0
    192
    193	0179  EB 35 90				     jmp Int9Handler_next
    194
    195	017C			     Int9Handler_Num1:
    196	017C  30 26 0289r			     xor Int8Handler_show, ah  ; TODO: ?
    197
    198	0180  EB 18 90				     jmp Int9Handler_end
    199
    200	0183			     Int9Handler_Num0:
    201						     UninstallIRQ 9
1   202
1   203	0183  1E				     push ds
1   204
1   205	0184  B8 2509				     mov ax, 2500h OR 9
1   206	0187  8B 16 01B4r			     mov dx, Int9Handler_oldOff
1   207	018B  8B 1E 01B6r			     mov bx, Int9Handler_oldSeg
1   208	018F  8E DB				     mov ds, bx
1   209
1   210	0191  CD 21				     int 21h
1   211
1   212	0193  1F				     pop ds
1   213
    214
    215	0194  C6 06 028Br 01 90			     mov Int8Handler_kill, 1
    216
    217						     ; Further shutdown	happens	within timer interrupt
    218
    219						     ; jmp Int9Handler_end ; Happens automatically
    220
    221	019A			     Int9Handler_end:
    222	019A  E4 61				     in	al, 61h
    223	019C  8A E0				     mov ah, al
    224	019E  0C 40				     or	al, 1000000b
    225	01A0  E6 61				     out 61h, al
    226	01A2  8A C4				     mov al, ah
    227	01A4  90				     nop
    228	01A5  90				     nop  ; As recommended
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 5
revil.asm



    229	01A6  E6 61				     out 61h, al
    230
    231	01A8  B0 20				     mov al, 20h
    232	01AA  E6 20				     out 20h, al
    233
    234	01AC  1F 07				     pop ds es
    235	01AE  61				     popa
    236
    237						     ;popa
    238
    239	01AF  CF				     iret
    240
    241	01B0			     Int9Handler_next:
    242	01B0  1F 07				     pop ds es
    243	01B2  61				     popa
    244
    245						     ;popa
    246
    247						     NextIRQ 9
1   248
1   249	01B3  EA				     db	0eah  ;	jmp far
1   250	01B4  0000		     Int9Handler_oldOff	     dw	0
1   251	01B6  0000		     Int9Handler_oldSeg	     dw	0
1   252
    253
    254	01B8			     Int9Handler     endp
    255
    256
    257				     ; INT 8 (timer) handler
    258	01B8			     Int8Handler     proc far
    259
    260						     ;push ax
    261						     ;mov al, 20h
    262						     ;out 20h, al
    263						     ;pop ax
    264						     ;iret
    265
    266						     ;pusha
    267
    268						     ;mov ax, 0ah
    269						     ;mov bx, 0bh
    270						     ;mov cx, 0ch
    271						     ;mov dx, 0dh
    272
    273	01B8  60				     pusha
    274	01B9  06 1E				     push es ds
    275
    276	01BB  8B EC				     mov bp, sp	 ; Old bp saved	by pusha
    277
    278	01BD  8C C8				     mov ax, cs
    279	01BF  8E D8				     mov ds, ax
    280
    281
    282	01C1  F6 06 028Br 01 90			     test Int8Handler_kill, 1
    283	01C7  75 7B				     jnz Int8Handler_detach
    284
    285
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 6
revil.asm



    286	01C9  A0 0288r				     mov al, Int8Handler_ticks
    287	01CC  84 C0				     test al, al
    288	01CE  74 03				     jz	Int8Handler_doTick
    289	01D0  E9 00A9				     jmp Int8Handler_next
    290	01D3			     Int8Handler_doTick:
    291	01D3  C6 06 0288r 04 90			     mov Int8Handler_ticks, Int8Handler_interval
    292
    293	01D9  E8 0303				     call SetCharInit  ; I guess we may	always call it
    294
    295
    296	01DC  F6 06 0289r 01 90			     test Int8Handler_show, 1
    297	01E2  75 03				     jnz Int8Handler_maybeShow	; TODO:	Restore	videobuf
    298	01E4  EB 7A 90				     jmp Int8Handler_maybeHide
    299
    300	01E7			     Int8Handler_maybeShow:
    301	01E7  F6 06 028Ar 01 90			     test Int8Handler_wasShown,	1
    302	01ED  75 11				     jnz Int8Handler_notShow
    303
    304						     ; TODO: Save segment under	frame
    305	01EF  BB 0102 90			     mov bx, Int8Handler_FrameS
    306	01F3  B9 060D 90			     mov cx, Int8Handler_FrameE
    307	01F7  E8 016B				     call SaveBG
    308
    309	01FA  C6 06 028Ar 01 90			     mov Int8Handler_wasShown, 1
    310
    311	0200			     Int8Handler_notShow:
    312	0200  BB 0102 90			     mov bx, Int8Handler_FrameS
    313	0204  B9 060D 90			     mov cx, Int8Handler_FrameE
    314	0208  E8 01E5				     call DrawFrame
    315
    316	020B  BB 0204 90			     mov bx, Int8Handler_FrameT
    317	020F  B1 23 90 90			     mov cl, Int8Handler_LegendLen
    318	0213  BE 028Cr				     mov si, offset Int8Handler_Legend
    319	0216  E8 033A				     call DrawStr
    320
    321	0219  8B 46 12				     mov ax, Int8Handler_OldA
    322	021C  BB 0207 90			     mov bx, Int8Handler_FrameTA
    323	0220  E8 0387				     call DrawNumHex
    324
    325	0223  8B 46 0C				     mov ax, Int8Handler_OldB
    326	0226  BB 0307 90			     mov bx, Int8Handler_FrameTB
    327	022A  E8 037D				     call DrawNumHex
    328
    329	022D  8B 46 10				     mov ax, Int8Handler_OldC
    330	0230  BB 0407 90			     mov bx, Int8Handler_FrameTC
    331	0234  E8 0373				     call DrawNumHex
    332
    333	0237  8B 46 0E				     mov ax, Int8Handler_OldD
    334	023A  BB 0507 90			     mov bx, Int8Handler_FrameTD
    335	023E  E8 0369				     call DrawNumHex
    336
    337	0241  EB 39 90				     jmp Int8Handler_next
    338
    339	0244			     Int8Handler_detach:
    340						     UninstallIRQ 8
1   341
1   342	0244  1E				     push ds
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 7
revil.asm



1   343
1   344	0245  B8 2508				     mov ax, 2500h OR 8
1   345	0248  8B 16 0284r			     mov dx, Int8Handler_oldOff
1   346	024C  8B 1E 0286r			     mov bx, Int8Handler_oldSeg
1   347	0250  8E DB				     mov ds, bx
1   348
1   349	0252  CD 21				     int 21h
1   350
1   351	0254  1F				     pop ds
1   352
    353
    354						     ; TODO: Hide frame
    355
    356						     ; TODO: Verify interrupt isn't hijacked and refuse	to stop	in that	case (and   +
    357				     same for int8)
    358
    359						     ; Now I'll	do something incredibly	crotchy	- that is freeing the memory block I+
    360				     reside in.
    361						     ; That clearly contradicts	a well-known russian saying "Don't cut the branch   +
    362				     you're sitting on",
    363						     ; but I believe this shouldn't overwrite us, thanks to how	DOS doesn't support +
    364				     multithreading.
    365						     ; That should get us enough time to shut ourselves	down as	well. The only thing+
    366				     that has a	chance
    367						     ; to interrupt us is a timer tick (which I	intend to intercept myself as soon  +
    368				     as	I finish the
    369						     ; keyboard	part - then I'll move this bit of code there and it will become	    +
    370				     completely	invincible).
    371						     ; But even	now a disruption is unlikely - that would need the timer to request +
    372				     a memory block (or
    373						     ; start another program, which does that intrinsically), and that doesn't seem +
    374				     like things a timer
    375						     ; would ever want to do.
    376
    377	0255  06				     push es
    378	0256  0E				     push cs
    379	0257  07				     pop es
    380	0258  B4 49				     mov ah, 49h
    381	025A  CD 21				     int 21h
    382	025C  07				     pop es
    383
    384	025D  EB 1D 90				     jmp Int8Handler_next
    385
    386	0260			     Int8Handler_maybeHide:
    387	0260  F6 06 028Ar 01 90			     test Int8Handler_wasShown,	1
    388	0266  74 14				     jz	Int8Handler_next
    389
    390						     ; Restore saved videobuf from under frame
    391	0268  BB 0102 90			     mov bx, Int8Handler_FrameS
    392	026C  B9 060D 90			     mov cx, Int8Handler_FrameE
    393	0270  E8 013A				     call RestoreBG
    394
    395	0273  C6 06 028Ar 00 90			     mov Int8Handler_wasShown, 0
    396
    397	0279  EB 01 90				     jmp Int8Handler_next
    398
    399	027C			     Int8Handler_next:
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 8
revil.asm



    400	027C  FE 0E 0288r			     dec Int8Handler_ticks
    401
    402	0280  1F 07				     pop ds es
    403	0282  61				     popa
    404
    405						     ;popa
    406
    407						     NextIRQ 8
1   408
1   409	0283  EA				     db	0eah  ;	jmp far
1   410	0284  0000		     Int8Handler_oldOff	     dw	0
1   411	0286  0000		     Int8Handler_oldSeg	     dw	0
1   412
    413
    414
    415	      =0004		     Int8Handler_interval    equ 4
    416	0288  00		     Int8Handler_ticks	     db	0
    417
    418	0289  00		     Int8Handler_show	     db	0
    419	028A  00		     Int8Handler_wasShown    db	0
    420	028B  00		     Int8Handler_kill	     db	0
    421
    422	028C  61 78 3A 20 30 30	30+  Int8Handler_Legend	     db	'ax: 0000', 0ah, \
    423	      30 0A 62 78 3A 20	30+				'bx: 0000', 0ah, \
    424	      30 30 30 0A 63 78	3A+				'cx: 0000', 0ah, \
    425	      20 30 30 30 30 0A	64+				'dx: 0000'
    426	      78 3A 20 30 30 30	30
    427	      =0023		     Int8Handler_LegendLen   equ $ - Int8Handler_Legend
    428
    429	      =0002		     Int8Handler_FrameSX     equ 2
    430	      =0001		     Int8Handler_FrameSY     equ 1
    431	      =000B		     Int8Handler_FrameW	     equ 11
    432	      =0005		     Int8Handler_FrameH	     equ 5
    433	      =000D		     Int8Handler_FrameEX     equ Int8Handler_FrameSX + Int8Handler_FrameW
    434	      =0006		     Int8Handler_FrameEY     equ Int8Handler_FrameSY + Int8Handler_FrameH
    435
    436	      =0102		     Int8Handler_FrameS	     equ (Int8Handler_FrameSY SHL 8) OR	Int8Handler_FrameSX
    437	      =060D		     Int8Handler_FrameE	     equ (Int8Handler_FrameEY SHL 8) OR	Int8Handler_FrameEX
    438
    439	      =0204		     Int8Handler_FrameT	     equ Int8Handler_FrameS + 0102h
    440	      =0207		     Int8Handler_FrameTA     equ Int8Handler_FrameT + 0003h
    441	      =0307		     Int8Handler_FrameTB     equ Int8Handler_FrameTA + 0100h
    442	      =0407		     Int8Handler_FrameTC     equ Int8Handler_FrameTB + 0100h
    443	      =0507		     Int8Handler_FrameTD     equ Int8Handler_FrameTC + 0100h
    444
    445	      =	[bp+18]		     Int8Handler_OldA	     equ [bp+18]
    446	      =	[bp+12]		     Int8Handler_OldB	     equ [bp+12]
    447	      =	[bp+16]		     Int8Handler_OldC	     equ [bp+16]
    448	      =	[bp+14]		     Int8Handler_OldD	     equ [bp+14]
    449
    450	02AF  B6*(??)		     Int8Handler_BG	     db	(((Int8Handler_FrameH +	2) * (Int8Handler_FrameW + 2)) * 2)dup(?)
    451
    452	0365			     Int8Handler     endp
    453
    454
    455				     ; void SaveBG(bh: fromRow,	bl: fromCol, ch: toRow,	cl: toCol)
    456				     ; uses ax,	bx, cx,	dx, si,	di
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 9
revil.asm



    457	0365			     SaveBG	     proc near
    458	0365  06 1E				     push es ds
    459
    460	0367  FE C5				     inc ch
    461	0369  FE C1				     inc cl
    462
    463	036B  53				     push bx
    464						     Coords2KeyM a, b
1   465
1   466	036C  A1 0523r				     mov ax, SetChar_width
1   467	036F  F6 E7				     mul bh
1   468	0371  32 FF				     xor bh, bh
1   469	0373  02 C3				     add al, bl
1   470	0375  80 D4 00				     adc ah, 0
1   471	0378  D1 E0				     shl ax, 1
1   472
    473	037A  5B				     pop bx
    474
    475	037B  8B F0				     mov si, ax
    476	037D  BF 02AFr				     mov di, offset Int8Handler_BG
    477
    478	0380  8B D1				     mov dx, cx
    479	0382  2B D3				     sub dx, bx	 ; actually dl -= bl; dh -= bh
    480
    481	0384  FF 36 0525r			     push SetChar_buf
    482	0388  1E				     push ds
    483	0389  07				     pop es
    484	038A  1F				     pop ds
    485
    486	038B  FC				     cld
    487
    488	038C  32 ED				     xor ch, ch
    489
    490	038E  84 F6		     SaveBG_loop:    test dh, dh
    491	0390  74 18				     jz	SaveBG_loop_end
    492
    493	0392  8A CA				     mov cl, dl
    494
    495	0394  F3> A5				     rep movsw
    496
    497	0396  FE CE				     dec dh
    498	0398  26: A1 0523r			     mov ax, es:SetChar_width
    499	039C  D1 E0				     shl ax, 1
    500	039E  03 F0				     add si, ax
    501	03A0  32 E4				     xor ah, ah
    502	03A2  8A C2				     mov al, dl
    503	03A4  D1 E0				     shl ax, 1
    504	03A6  2B F0				     sub si, ax
    505
    506	03A8  EB E4				     jmp SaveBG_loop
    507	03AA			     SaveBG_loop_end:
    508
    509	03AA  1F 07				     pop ds es
    510
    511	03AC  C3				     ret
    512	03AD			     SaveBG	     endp
    513
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 10
revil.asm



    514
    515				     ; void RestoreBG(bh: fromRow, bl: fromCol,	ch: toRow, cl: toCol)
    516				     ; uses ax,	bx, cx,	dx, si,	di
    517	03AD			     RestoreBG	     proc near
    518	03AD  06				     push es
    519
    520	03AE  FE C5				     inc ch
    521	03B0  FE C1				     inc cl
    522
    523	03B2  53				     push bx
    524						     Coords2KeyM a, b
1   525
1   526	03B3  A1 0523r				     mov ax, SetChar_width
1   527	03B6  F6 E7				     mul bh
1   528	03B8  32 FF				     xor bh, bh
1   529	03BA  02 C3				     add al, bl
1   530	03BC  80 D4 00				     adc ah, 0
1   531	03BF  D1 E0				     shl ax, 1
1   532
    533	03C1  5B				     pop bx
    534
    535	03C2  BE 02AFr				     mov si, offset Int8Handler_BG
    536	03C5  8B F8				     mov di, ax
    537
    538	03C7  8B D1				     mov dx, cx
    539	03C9  2B D3				     sub dx, bx	 ; actually dl -= bl; dh -= bh
    540
    541	03CB  FF 36 0525r			     push SetChar_buf
    542	03CF  07				     pop es
    543
    544						     ;mov word ptr ds:[si], 7h SHL 8 OR	'!'
    545						     ;mov byte ptr ds:[si], '!'
    546
    547	03D0  FC				     cld
    548
    549	03D1  32 ED				     xor ch, ch
    550
    551	03D3  84 F6		     RestoreBG_loop: test dh, dh
    552	03D5  74 17				     jz	RestoreBG_loop_end
    553
    554	03D7  8A CA				     mov cl, dl
    555
    556	03D9  F3> A5				     rep movsw
    557
    558	03DB  FE CE				     dec dh
    559	03DD  A1 0523r				     mov ax, SetChar_width
    560	03E0  D1 E0				     shl ax, 1
    561	03E2  03 F8				     add di, ax
    562	03E4  32 E4				     xor ah, ah
    563	03E6  8A C2				     mov al, dl
    564	03E8  D1 E0				     shl ax, 1
    565	03EA  2B F8				     sub di, ax
    566
    567	03EC  EB E5				     jmp RestoreBG_loop
    568	03EE			     RestoreBG_loop_end:
    569
    570	03EE  07				     pop es
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 11
revil.asm



    571
    572	03EF  C3				     ret
    573	03F0			     RestoreBG	     endp
    574
    575
    576				     ; void DrawFrame(bh: fromRow, bl: fromCol,	ch: toRow, cl: toCol)
    577				     ; uses ax,	bx, cx,	dx, di,	SetChar
    578	03F0			     DrawFrame	     proc near
    579
    580	      =	[bp-1]		     DrawFrame_fromRow	     equ [bp-1]
    581	      =	[bp-2]		     DrawFrame_fromCol	     equ [bp-2]
    582	      =	[bp-3]		     DrawFrame_toRow	     equ [bp-3]
    583	      =	[bp-4]		     DrawFrame_toCol	     equ [bp-4]
    584
    585	03F0  55				     push bp
    586	03F1  8B EC				     mov bp, sp
    587	03F3  83 EC 04				     sub sp, 4
    588
    589	03F6  88 7E FF				     mov DrawFrame_fromRow, bh
    590	03F9  88 5E FE				     mov DrawFrame_fromCol, bl
    591	03FC  88 6E FD				     mov DrawFrame_toRow, ch
    592	03FF  88 4E FC				     mov DrawFrame_toCol, cl
    593
    594	0402  B8 0600				     mov ax, 0600h
    595	0405  8B D1				     mov dx, cx
    596	0407  8B CB				     mov cx, bx
    597	0409  B7 1F				     mov bh, FrameStyle
    598	040B  CD 10				     int 10h
    599
    600	040D  B5 1F				     mov ch, FrameStyle
    601	040F  B1 C9				     mov cl, 201
    602	0411  8A 7E FF				     mov bh, DrawFrame_fromRow
    603	0414  8A 5E FE				     mov bl, DrawFrame_fromCol
    604	0417  E8 00EE				     call SetChar
    605
    606	041A  B5 1F				     mov ch, FrameStyle
    607	041C  B1 BB				     mov cl, 187
    608	041E  8A 7E FF				     mov bh, DrawFrame_fromRow
    609	0421  8A 5E FC				     mov bl, DrawFrame_toCol
    610	0424  E8 00E1				     call SetChar
    611
    612	0427  B5 1F				     mov ch, FrameStyle
    613	0429  B1 BC				     mov cl, 188
    614	042B  8A 7E FD				     mov bh, DrawFrame_toRow
    615	042E  8A 5E FC				     mov bl, DrawFrame_toCol
    616	0431  E8 00D4				     call SetChar
    617
    618	0434  B5 1F				     mov ch, FrameStyle
    619	0436  B1 C8				     mov cl, 200
    620	0438  8A 7E FD				     mov bh, DrawFrame_toRow
    621	043B  8A 5E FE				     mov bl, DrawFrame_fromCol
    622	043E  E8 00C7				     call SetChar
    623
    624
    625						     ; es is already set by SetChar
    626	0441  FC				     cld
    627	0442  32 ED				     xor ch, ch
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 12
revil.asm



    628
    629	0444  8A 4E FC				     mov cl, DrawFrame_toCol
    630	0447  2A 4E FE				     sub cl, DrawFrame_fromCol
    631	044A  FE C9				     dec cl
    632	044C  F6 C1 80				     test cl, 1	SHL 7
    633	044F  75 44				     jnz DrawFrame_loopH_end
    634
    635	0451  8A 5E FE				     mov bl, DrawFrame_fromCol
    636	0454  8A 7E FF				     mov bh, DrawFrame_fromRow
    637						     Coords2KeyM a, b
1   638
1   639	0457  A1 0523r				     mov ax, SetChar_width
1   640	045A  F6 E7				     mul bh
1   641	045C  32 FF				     xor bh, bh
1   642	045E  02 C3				     add al, bl
1   643	0460  80 D4 00				     adc ah, 0
1   644	0463  D1 E0				     shl ax, 1
1   645
    646	0465  40				     inc ax
    647	0466  40				     inc ax
    648	0467  8B F8				     mov di, ax
    649
    650	0469  B4 1F				     mov ah, FrameStyle
    651	046B  B0 CD				     mov al, 205
    652
    653	046D  F3> AB				     rep stosw
    654
    655
    656	046F  8A 4E FC				     mov cl, DrawFrame_toCol
    657	0472  2A 4E FE				     sub cl, DrawFrame_fromCol
    658	0475  FE C9				     dec cl
    659
    660	0477  8A 5E FE				     mov bl, DrawFrame_fromCol
    661	047A  8A 7E FD				     mov bh, DrawFrame_toRow
    662						     Coords2KeyM a, b
1   663
1   664	047D  A1 0523r				     mov ax, SetChar_width
1   665	0480  F6 E7				     mul bh
1   666	0482  32 FF				     xor bh, bh
1   667	0484  02 C3				     add al, bl
1   668	0486  80 D4 00				     adc ah, 0
1   669	0489  D1 E0				     shl ax, 1
1   670
    671	048B  40				     inc ax
    672	048C  40				     inc ax
    673	048D  8B F8				     mov di, ax
    674
    675	048F  B4 1F				     mov ah, FrameStyle
    676	0491  B0 CD				     mov al, 205
    677
    678	0493  F3> AB				     rep stosw
    679
    680	0495			     DrawFrame_loopH_end:
    681
    682	0495  8A 4E FD				     mov cl, DrawFrame_toRow
    683	0498  2A 4E FF				     sub cl, DrawFrame_fromRow
    684	049B  FE C9				     dec cl
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 13
revil.asm



    685	049D  F6 C1 80				     test cl, 1	SHL 7
    686	04A0  75 F3				     jnz DrawFrame_loopH_end
    687
    688	04A2  8A 5E FE				     mov bl, DrawFrame_fromCol
    689	04A5  8A 7E FF				     mov bh, DrawFrame_fromRow
    690	04A8  FE C7				     inc bh
    691						     Coords2KeyM a, b
1   692
1   693	04AA  A1 0523r				     mov ax, SetChar_width
1   694	04AD  F6 E7				     mul bh
1   695	04AF  32 FF				     xor bh, bh
1   696	04B1  02 C3				     add al, bl
1   697	04B3  80 D4 00				     adc ah, 0
1   698	04B6  D1 E0				     shl ax, 1
1   699
    700
    701	04B8  8B F8				     mov di, ax
    702	04BA  A1 0523r				     mov ax, SetChar_width  ; TODO: Change previous macro params instead
    703	04BD  D1 E0				     shl ax, 1
    704
    705	04BF  32 FF				     xor bh, bh
    706	04C1  8A 5E FC				     mov bl, DrawFrame_toCol
    707	04C4  2A 5E FE				     sub bl, DrawFrame_fromCol
    708	04C7  D0 E3				     shl bl, 1
    709	04C9  73 02				     jnc DrawFrame_loopV
    710	04CB  32 DB				     xor bl, bl
    711
    712	04CD			     DrawFrame_loopV:
    713	04CD  26: C7 05	1FBA			     mov word ptr es:[di],    (FrameStyle SHL 8) OR 186
    714	04D2  26: C7 01	1FBA			     mov word ptr es:[di+bx], (FrameStyle SHL 8) OR 186
    715
    716	04D7  03 F8				     add di, ax
    717	04D9  E2 F2				     loop DrawFrame_loopV
    718
    719	04DB			     DrawFrame_loopV_end:
    720
    721
    722	04DB  8B E5				     mov sp, bp
    723	04DD  5D				     pop bp
    724	04DE  C3				     ret
    725	04DF			     DrawFrame	     endp
    726
    727
    728				     ; void SetCharInit()
    729				     ; uses: ax, bx, es
    730	04DF			     SetCharInit     proc near
    731
    732	04DF  CD 11				     int 11h
    733	04E1  35 0030				     xor ax, 30h
    734	04E4  C1 E0 0B				     shl ax, 11
    735	04E7  0D B800				     or	ax, VIDEOSEG
    736	04EA  A3 0525r				     mov SetChar_buf, ax
    737
    738	04ED  B8 0040				     mov ax, 40h
    739	04F0  8E C0				     mov es, ax
    740	04F2  26: A1 004A			     mov ax, es:4ah  ; 80 most often
    741	04F6  A3 0523r				     mov SetChar_width,	ax
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 14
revil.asm



    742
    743	04F9  C3				     ret
    744
    745	04FA			     SetCharInit     endp
    746
    747
    748				     ; Coords2KeyM moved up
    749
    750
    751				     ; ax: coords Coords2Key(bh: row, bl: column)
    752				     ; uses: ax, (bx), dx
    753	04FA			     Coords2Key	     proc near
    754						     Coords2KeyM a, b
1   755
1   756	04FA  A1 0523r				     mov ax, SetChar_width
1   757	04FD  F6 E7				     mul bh
1   758	04FF  32 FF				     xor bh, bh
1   759	0501  02 C3				     add al, bl
1   760	0503  80 D4 00				     adc ah, 0
1   761	0506  D1 E0				     shl ax, 1
1   762
    763	0508			     Coords2Key	     endp
    764
    765
    766				     ; ax: index SetChar(cl: letter, ch: attrs,	bh: row, bl: column)
    767				     ; uses: ax, (bx), (cx), dx, es
    768	0508			     SetChar	     proc near
    769	0508  53				     push bx
    770						     Coords2KeyM a, b
1   771
1   772	0509  A1 0523r				     mov ax, SetChar_width
1   773	050C  F6 E7				     mul bh
1   774	050E  32 FF				     xor bh, bh
1   775	0510  02 C3				     add al, bl
1   776	0512  80 D4 00				     adc ah, 0
1   777	0515  D1 E0				     shl ax, 1
1   778
    779
    780	0517  93				     xchg ax, bx
    781
    782	0518  8B 16 0525r			     mov dx, SetChar_buf
    783	051C  8E C2				     mov es, dx
    784	051E  26: 89 0F				     mov es:[bx], cx
    785
    786	0521  5B				     pop bx
    787
    788	0522  C3				     ret
    789
    790	0523  0050		     SetChar_width   dw	80
    791	0525  0000		     SetChar_buf     dw	0
    792	0527			     SetChar	     endp
    793
    794
    795				     ; void Beep(bx: frequency,	cx: length)
    796				     ; uses ax,	bx, cx
    797	0527			     Beep	     proc near
    798	0527  B0 B6				     mov al, 182
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 15
revil.asm



    799	0529  E6 43				     out 43h, al
    800	052B  8B C3				     mov ax, bx
    801	052D  E6 42				     out 42h, al
    802	052F  8A C4				     mov al, ah
    803	0531  E6 42				     out 42h, al
    804	0533  E4 61				     in	al, 61h
    805	0535  0C 03				     or	al, 00000011b
    806	0537  E6 61				     out 61h, al
    807	0539  8B D9				     mov bx, cx
    808
    809
    810	053B  B9 FFFF		     Beep_pause1:    mov cx, 65535
    811	053E  49		     Beep_pause2:    dec cx
    812	053F  75 FD				     jnz Beep_pause2
    813	0541  4B				     dec bx
    814	0542  75 F7				     jnz Beep_pause1
    815	0544  E4 61				     in	al, 61h
    816	0546  24 FC				     and al, 11111100b
    817	0548  E6 61				     out 61h, al
    818
    819	054A  C3				     ret
    820	054B			     Beep	     endp
    821
    822
    823				     ; TODO: Maybe use the int 15h 81h
    824				     ; void Sleep(ax: duration)
    825				     ; uses ax
    826	054B			     Sleep	     proc near
    827
    828	054B  85 C0		     Sleep_loop:     test ax, ax
    829	054D  74 03				     jz	Sleep_loop_end
    830	054F  48				     dec ax
    831	0550  EB F9				     jmp Sleep_loop
    832	0552			     Sleep_loop_end:
    833	0552  C3				     ret
    834	0553			     Sleep	     endp
    835
    836
    837				     ; void DrawStr(bh:	row, bl: column, cl: length, si: source)
    838				     ; uses ax,	bx, cx,	si, SetChar
    839	0553			     DrawStr	     proc near
    840	      =	[bp-1]		     DrawStr_i	     equ [bp-1]
    841	      =	[bp-2]		     DrawStr_origCol equ [bp-2]
    842	0553  55				     push bp
    843	0554  8B EC				     mov bp, sp
    844	0556  83 EC 02				     sub sp, 2
    845
    846	0559  88 5E FE				     mov DrawStr_origCol, bl
    847	055C  88 4E FF				     mov DrawStr_i, cl
    848
    849	055F  8A 46 FF		     DrawStr_loop:   mov al, DrawStr_i
    850	0562  84 C0				     test al, al
    851	0564  74 20				     jz	DrawStr_loop_end
    852
    853	0566  8A 0C				     mov cl, [si]
    854	0568  80 F9 0A				     cmp cl, 0ah
    855	056B  74 0E				     je	DrawStr_nl
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 16
revil.asm



    856
    857	056D  84 C9				     test cl, cl
    858	056F  74 15				     jz	DrawStr_loop_end
    859
    860	0571  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    861	0573  E8 FF92				     call SetChar
    862
    863	0576  FE C3				     inc bl
    864
    865	0578  EB 06 90				     jmp DrawStr_nl_skip
    866
    867	057B  8A 5E FE		     DrawStr_nl:     mov bl, DrawStr_origCol
    868	057E  FE C7				     inc bh
    869
    870	0580			     DrawStr_nl_skip:
    871	0580  46				     inc si
    872	0581  FE 4E FF				     dec byte ptr DrawStr_i
    873	0584  EB D9				     jmp DrawStr_loop
    874	0586			     DrawStr_loop_end:
    875
    876	0586  8B E5				     mov sp, bp
    877	0588  5D				     pop bp
    878	0589  C3				     ret
    879	058A			     DrawStr	     endp
    880
    881
    882				     ; void DrawNum10(ax: num, bh: row,	bl: column)
    883				     ; uses ax,	bx, cx,	dx, SetChar
    884	058A			     DrawNum10	     proc near
    885	058A  80 C3 05				     add bl, 5
    886
    887	058D  85 C0		     DrawNum10_loop: test ax, ax
    888	058F  74 18				     jz	DrawNum10_loop_end
    889
    890						     ;aam  ; This is faster than division and more convenient, although	relies on ax+
    891				     being small enough
    892	0591  B1 0A				     mov cl, 10
    893	0593  32 ED				     xor ch, ch
    894	0595  33 D2				     xor dx, dx
    895	0597  F7 F1				     div cx
    896
    897	0599  80 C2 30				     add dl, '0'
    898	059C  8A CA				     mov cl, dl
    899	059E  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    900
    901	05A0  50				     push ax
    902	05A1  E8 FF64				     call SetChar
    903	05A4  58				     pop ax
    904
    905	05A5  FE CB				     dec bl
    906	05A7  EB E4				     jmp DrawNum10_loop
    907	05A9			     DrawNum10_loop_end:
    908
    909	05A9  C3				     ret
    910	05AA			     DrawNum10	     endp
    911
    912
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 17
revil.asm



    913				     ; void DrawNumHex(ax: num,	bh: row, bl: column)
    914				     ; uses ax,	bx, cx,	SetChar
    915	05AA			     DrawNumHex	     proc near
    916	05AA  80 C3 04				     add bl, 4
    917
    918	05AD			     DrawNumHex_loop:
    919	05AD  85 C0				     test ax, ax
    920	05AF  74 21				     jz	DrawNumHex_loop_end
    921
    922	05B1  8A C8				     mov cl, al
    923	05B3  80 E1 0F				     and cl, 0fh
    924
    925	05B6  80 F9 0A				     cmp cl, 10
    926	05B9  73 06				     jae DrawNumHex_bigDigit
    927
    928	05BB  80 C1 30				     add cl, '0'
    929
    930	05BE  EB 04 90				     jmp DrawNumHex_notBigDigit
    931	05C1			     DrawNumHex_bigDigit:
    932	05C1  80 C1 37				     add cl, 'A'-10
    933	05C4			     DrawNumHex_notBigDigit:
    934
    935	05C4  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    936
    937	05C6  C1 E8 04				     shr ax, 4
    938
    939	05C9  50				     push ax
    940	05CA  E8 FF3B				     call SetChar
    941	05CD  58				     pop ax
    942
    943	05CE  FE CB				     dec bl
    944	05D0  EB DB				     jmp DrawNumHex_loop
    945	05D2			     DrawNumHex_loop_end:
    946
    947	05D2  C3				     ret
    948	05D3			     DrawNumHex	     endp
    949
    950
    951	05D3			     ProgEnd:
    952
    953	05D3			     .data
    954
    955	0000  53 6B 69 70 70 69	6E+  SkipMsg	     db	"Skipping installation.", 0ah, 0dh, "$"
    956	      67 20 69 6E 73 74	61+
    957	      6C 6C 61 74 69 6F	6E+
    958	      2E 0A 0D 24
    959
    960				     end Start
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 18
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/19/21"
??FILENAME			  Text	 "revil	  "
??TIME				  Text	 "00:12:50"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REVIL
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BEEP				  Near	 DGROUP:0527
BEEP_PAUSE1			  Near	 DGROUP:053B
BEEP_PAUSE2			  Near	 DGROUP:053E
COORDS2KEY			  Near	 DGROUP:04FA
DRAWFRAME			  Near	 DGROUP:03F0
DRAWFRAME_FROMCOL		  Text	 [bp-2]
DRAWFRAME_FROMROW		  Text	 [bp-1]
DRAWFRAME_LOOPH_END		  Near	 DGROUP:0495
DRAWFRAME_LOOPV			  Near	 DGROUP:04CD
DRAWFRAME_LOOPV_END		  Near	 DGROUP:04DB
DRAWFRAME_TOCOL			  Text	 [bp-4]
DRAWFRAME_TOROW			  Text	 [bp-3]
DRAWNUM10			  Near	 DGROUP:058A
DRAWNUM10_LOOP			  Near	 DGROUP:058D
DRAWNUM10_LOOP_END		  Near	 DGROUP:05A9
DRAWNUMHEX			  Near	 DGROUP:05AA
DRAWNUMHEX_BIGDIGIT		  Near	 DGROUP:05C1
DRAWNUMHEX_LOOP			  Near	 DGROUP:05AD
DRAWNUMHEX_LOOP_END		  Near	 DGROUP:05D2
DRAWNUMHEX_NOTBIGDIGIT		  Near	 DGROUP:05C4
DRAWSTR				  Near	 DGROUP:0553
DRAWSTR_I			  Text	 [bp-1]
DRAWSTR_LOOP			  Near	 DGROUP:055F
DRAWSTR_LOOP_END		  Near	 DGROUP:0586
DRAWSTR_NL			  Near	 DGROUP:057B
DRAWSTR_NL_SKIP			  Near	 DGROUP:0580
DRAWSTR_ORIGCOL			  Text	 [bp-2]
FRAMESTYLE			  Number 001F
INT8HANDLER			  Far	 DGROUP:01B8
INT8HANDLER_BG			  Byte	 DGROUP:02AF
INT8HANDLER_DETACH		  Near	 DGROUP:0244
INT8HANDLER_DOTICK		  Near	 DGROUP:01D3
INT8HANDLER_FRAMEE		  Number 060D
INT8HANDLER_FRAMEEX		  Number 000D
INT8HANDLER_FRAMEEY		  Number 0006
INT8HANDLER_FRAMEH		  Number 0005
INT8HANDLER_FRAMES		  Number 0102
INT8HANDLER_FRAMESX		  Number 0002
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 19
Symbol Table



INT8HANDLER_FRAMESY		  Number 0001
INT8HANDLER_FRAMET		  Number 0204
INT8HANDLER_FRAMETA		  Number 0207
INT8HANDLER_FRAMETB		  Number 0307
INT8HANDLER_FRAMETC		  Number 0407
INT8HANDLER_FRAMETD		  Number 0507
INT8HANDLER_FRAMEW		  Number 000B
INT8HANDLER_INTERVAL		  Number 0004
INT8HANDLER_KILL		  Byte	 DGROUP:028B
INT8HANDLER_LEGEND		  Byte	 DGROUP:028C
INT8HANDLER_LEGENDLEN		  Number 0023
INT8HANDLER_MAYBEHIDE		  Near	 DGROUP:0260
INT8HANDLER_MAYBESHOW		  Near	 DGROUP:01E7
INT8HANDLER_NEXT		  Near	 DGROUP:027C
INT8HANDLER_NOTSHOW		  Near	 DGROUP:0200
INT8HANDLER_OLDA		  Text	 [bp+18]
INT8HANDLER_OLDB		  Text	 [bp+12]
INT8HANDLER_OLDC		  Text	 [bp+16]
INT8HANDLER_OLDD		  Text	 [bp+14]
INT8HANDLER_OLDOFF		  Word	 DGROUP:0284
INT8HANDLER_OLDSEG		  Word	 DGROUP:0286
INT8HANDLER_SHOW		  Byte	 DGROUP:0289
INT8HANDLER_TICKS		  Byte	 DGROUP:0288
INT8HANDLER_WASSHOWN		  Byte	 DGROUP:028A
INT9HANDLER			  Far	 DGROUP:015F
INT9HANDLER_END			  Near	 DGROUP:019A
INT9HANDLER_NEXT		  Near	 DGROUP:01B0
INT9HANDLER_NUM0		  Near	 DGROUP:0183
INT9HANDLER_NUM1		  Near	 DGROUP:017C
INT9HANDLER_OLDOFF		  Word	 DGROUP:01B4
INT9HANDLER_OLDSEG		  Word	 DGROUP:01B6
PROGEND				  Near	 DGROUP:05D3
RESTOREBG			  Near	 DGROUP:03AD
RESTOREBG_LOOP			  Near	 DGROUP:03D3
RESTOREBG_LOOP_END		  Near	 DGROUP:03EE
SAVEBG				  Near	 DGROUP:0365
SAVEBG_LOOP			  Near	 DGROUP:038E
SAVEBG_LOOP_END			  Near	 DGROUP:03AA
SETCHAR				  Near	 DGROUP:0508
SETCHARINIT			  Near	 DGROUP:04DF
SETCHAR_BUF			  Word	 DGROUP:0525
SETCHAR_WIDTH			  Word	 DGROUP:0523
SKIPINSTALL			  Near	 DGROUP:0153
SKIPMSG				  Byte	 DGROUP:0000
SLEEP				  Near	 DGROUP:054B
SLEEP_LOOP			  Near	 DGROUP:054B
SLEEP_LOOP_END			  Near	 DGROUP:0552
START				  Near	 DGROUP:0100
VIDEOSEG			  Number B800

Macro Name

COORDS2KEYM
INSTALLIRQ
NEXTIRQ
UNINSTALLIRQ
Turbo Assembler	 Version 4.1	    02/19/21 00:12:51	    Page 20
Symbol Table




Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0019 Word	  Public  DATA
  _TEXT				  16  05D3 Word	  Public  CODE
