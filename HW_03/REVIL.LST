Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 1
revil.asm



      1	0000			     .model tiny
      2				     .286
      3	0000			     .code
      4
      5	      =B800		     VIDEOSEG	     equ 0b800h
      6	      =001F		     FrameStyle	     equ 00011111b
      7
      8
      9				     InstallIRQ	     macro number
     10
     11						     mov ax, 3500h OR number
     12						     int 21h
     13						     mov ax, es
     14
     15						     cmp bx, offset Int&number&Handler
     16						     je	SkipInstall
     17
     18
     19						     mov Int&number&Handler_oldOff, bx
     20						     mov Int&number&Handler_oldSeg, ax
     21
     22						     ; cli not needed
     23
     24						     mov ax, 2500h OR number
     25						     mov dx, offset Int&number&Handler
     26						     int 21h
     27
     28						     endm
     29
     30
     31				     CheckIRQ	     macro number, labelOverwritten
     32
     33						     mov ax, 3500h OR number
     34						     int 21h
     35						     mov ax, es
     36
     37						     cmp bx, offset Int&number&Handler
     38						     jne labelOverwritten
     39						     mov bx, cs
     40						     cmp ax, bx
     41						     jne labelOverwritten
     42
     43						     endm
     44
     45
     46				     UninstallIRQ    macro number
     47
     48						     push ds
     49
     50						     mov ax, 2500h OR number
     51						     mov dx, Int&number&Handler_oldOff
     52						     mov bx, Int&number&Handler_oldSeg
     53						     mov ds, bx
     54
     55						     int 21h
     56
     57						     pop ds
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 2
revil.asm



     58
     59						     endm
     60
     61
     62				     NextIRQ	     macro number
     63
     64						     db	0eah  ;	jmp far
     65				     Int&number&Handler_oldOff	     dw	0
     66				     Int&number&Handler_oldSeg	     dw	0
     67
     68						     endm
     69
     70
     71				     ; Same as Coords2Key, but embeddable
     72				     ; macro(result (register letter, can't be d), coords (register letter, can't be d))
     73				     Coords2KeyM     macro result, coords
     74
     75						     mov result&x, SetChar_width
     76						     mul coords&h
     77						     xor coords&h, coords&h
     78						     add result&l, coords&l
     79						     adc result&h, 0
     80						     shl result&x, 1
     81
     82						     endm
     83
     84
     85				     org 100h
     86	0100  E8 0459		     Start:	     call SetCharInit
     87
     88						     ; mov ax, 3509h
     89						     ; int 21h
     90						     ; mov ax, es
     91
     92						     ; cmp bx, offset Int9Handler
     93						     ; je SkipInstall
     94
     95
     96						     ; mov Int9Handler_oldOff, bx
     97						     ; mov Int9Handler_oldSeg, ax
     98
     99						     ; ; As the	docs recommend,	we may as well free our	environment block
    100						     ; push es
    101						     ; push cs:2ch
    102						     ; pop es
    103						     ; mov ah, 49h
    104						     ; int 21h
    105						     ; pop es
    106
    107
    108						     ; ; cli not needed
    109
    110						     ; mov ax, 2509h
    111						     ; mov dx, offset Int9Handler
    112						     ; int 21h
    113
    114
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 3
revil.asm



    115						     ; As the docs recommend, we may as	well free our environment block
    116	0103  06				     push es
    117	0104  2E: FF 36	002C			     push cs:2ch
    118	0109  07				     pop es
    119	010A  B4 49				     mov ah, 49h
    120	010C  CD 21				     int 21h
    121	010E  07				     pop es
    122
    123						     InstallIRQ	9
1   124
1   125	010F  B8 3509				     mov ax, 3500h OR 9
1   126	0112  CD 21				     int 21h
1   127	0114  8C C0				     mov ax, es
1   128
1   129	0116  81 FB 015Fr			     cmp bx, offset Int9Handler
1   130	011A  74 37				     je	SkipInstall
1   131
1   132
1   133	011C  89 1E 01E1r			     mov Int9Handler_oldOff, bx
1   134	0120  A3 01E3r				     mov Int9Handler_oldSeg, ax
1   135
1   136						     ; cli not needed
1   137
1   138	0123  B8 2509				     mov ax, 2500h OR 9
1   139	0126  BA 015Fr				     mov dx, offset Int9Handler
1   140	0129  CD 21				     int 21h
1   141
    142
    143						     InstallIRQ	8
1   144
1   145	012B  B8 3508				     mov ax, 3500h OR 8
1   146	012E  CD 21				     int 21h
1   147	0130  8C C0				     mov ax, es
1   148
1   149	0132  81 FB 01E5r			     cmp bx, offset Int8Handler
1   150	0136  74 1B				     je	SkipInstall
1   151
1   152
1   153	0138  89 1E 0303r			     mov Int8Handler_oldOff, bx
1   154	013C  A3 0305r				     mov Int8Handler_oldSeg, ax
1   155
1   156						     ; cli not needed
1   157
1   158	013F  B8 2508				     mov ax, 2500h OR 8
1   159	0142  BA 01E5r				     mov dx, offset Int8Handler
1   160	0145  CD 21				     int 21h
1   161
    162
    163	0147  B8 3100				     mov ax, 3100h
    164	014A  BA 0650r				     mov dx, offset ProgEnd
    165	014D  C1 EA 04				     shr dx, 4
    166	0150  42				     inc dx
    167	0151  CD 21				     int 21h
    168
    169
    170	0153  B4 09		     SkipInstall:    mov ah, 09h
    171	0155  BA 0000r				     mov dx, offset SkipMsg
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 4
revil.asm



    172	0158  CD 21				     int 21h
    173
    174	015A  B8 4C00				     mov ax, 4c00h
    175	015D  CD 21				     int 21h
    176
    177
    178				     ; INT 9 (kbd) handler
    179	015F			     Int9Handler     proc far
    180
    181						     ;pusha
    182
    183						     ;mov ax, 0ah
    184						     ;mov bx, 0bh
    185						     ;mov cx, 0ch
    186						     ;mov dx, 0dh
    187
    188	015F  60				     pusha
    189	0160  06 1E				     push es ds
    190
    191	0162  8B EC				     mov bp, sp	 ; Old bp saved	by pusha
    192
    193	0164  8C C8				     mov ax, cs
    194	0166  8E D8				     mov ds, ax
    195
    196						     ;call SetCharInit	; I guess we may always	call it
    197
    198	0168  E4 60				     in	al, 60h
    199	016A  8A E0				     mov ah, al
    200	016C  C0 EC 07				     shr ah, 7	; ah holds whether it's	a key pressed or depressed
    201	016F  24 7F				     and al, 01111111b
    202
    203	0171  3C 4F				     cmp al, 4fh  ; Numpad 1
    204	0173  74 07				     je	Int9Handler_Num1
    205	0175  3C 52				     cmp al, 52h  ; Numpad 0
    206	0177  74 0D				     je	Int9Handler_Num0
    207
    208	0179  EB 62 90				     jmp Int9Handler_next
    209
    210	017C			     Int9Handler_Num1:
    211	017C  C0 E4 00				     shl ah, Int8Handler_showF
    212	017F  30 26 0308r			     xor Int8Handler_flags, ah	; TODO:	?
    213
    214	0183  EB 42 90				     jmp Int9Handler_end
    215
    216	0186			     Int9Handler_Num0:
    217						     CheckIRQ 9	Int9Handler_overwritten
1   218
1   219	0186  B8 3509				     mov ax, 3500h OR 9
1   220	0189  CD 21				     int 21h
1   221	018B  8C C0				     mov ax, es
1   222
1   223	018D  81 FB 015Fr			     cmp bx, offset Int9Handler
1   224	0191  75 28				     jne Int9Handler_overwritten
1   225	0193  8C CB				     mov bx, cs
1   226	0195  3B C3				     cmp ax, bx
1   227	0197  75 22				     jne Int9Handler_overwritten
1   228
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 5
revil.asm



    229	0199  F6 06 0308r 08 90			     test Int8Handler_flags, 1 SHL Int8Handler_kill9F
    230	019F  75 26				     jnz Int9Handler_end
    231
    232						     UninstallIRQ 9
1   233
1   234	01A1  1E				     push ds
1   235
1   236	01A2  B8 2509				     mov ax, 2500h OR 9
1   237	01A5  8B 16 01E1r			     mov dx, Int9Handler_oldOff
1   238	01A9  8B 1E 01E3r			     mov bx, Int9Handler_oldSeg
1   239	01AD  8E DB				     mov ds, bx
1   240
1   241	01AF  CD 21				     int 21h
1   242
1   243	01B1  1F				     pop ds
1   244
    245	01B2  80 0E 0308r 04 90			     or	Int8Handler_flags, 1 SHL Int8Handler_killF
    246
    247	01B8  EB 0D 90				     jmp Int9Handler_end
    248
    249	01BB			     Int9Handler_overwritten:
    250
    251	01BB  80 0E 0308r 08 90			     or	Int8Handler_flags, 1 SHL Int8Handler_kill9F
    252	01C1  80 0E 0308r 08 90			     or	Int8Handler_flags, 1 SHL Int8Handler_kill9F
    253
    254						     ; Further shutdown	happens	within timer interrupt
    255
    256						     ; jmp Int9Handler_end ; Happens automatically
    257
    258	01C7			     Int9Handler_end:
    259	01C7  E4 61				     in	al, 61h
    260	01C9  8A E0				     mov ah, al
    261	01CB  0C 40				     or	al, 1000000b
    262	01CD  E6 61				     out 61h, al
    263	01CF  8A C4				     mov al, ah
    264	01D1  90				     nop
    265	01D2  90				     nop  ; As recommended
    266	01D3  E6 61				     out 61h, al
    267
    268	01D5  B0 20				     mov al, 20h
    269	01D7  E6 20				     out 20h, al
    270
    271	01D9  1F 07				     pop ds es
    272	01DB  61				     popa
    273
    274						     ;popa
    275
    276	01DC  CF				     iret
    277
    278	01DD			     Int9Handler_next:
    279	01DD  1F 07				     pop ds es
    280	01DF  61				     popa
    281
    282						     ;popa
    283
    284						     NextIRQ 9
1   285
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 6
revil.asm



1   286	01E0  EA				     db	0eah  ;	jmp far
1   287	01E1  0000		     Int9Handler_oldOff	     dw	0
1   288	01E3  0000		     Int9Handler_oldSeg	     dw	0
1   289
    290
    291	01E5			     Int9Handler     endp
    292
    293
    294				     ; INT 8 (timer) handler
    295	01E5			     Int8Handler     proc far
    296
    297						     ;push ax
    298						     ;mov al, 20h
    299						     ;out 20h, al
    300						     ;pop ax
    301						     ;iret
    302
    303						     ;pusha
    304
    305						     ;mov ax, 0ah
    306						     ;mov bx, 0bh
    307						     ;mov cx, 0ch
    308						     ;mov dx, 0dh
    309
    310	01E5  60				     pusha
    311	01E6  06 1E				     push es ds
    312
    313	01E8  8B EC				     mov bp, sp	 ; Old bp saved	by pusha
    314
    315	01EA  8C C8				     mov ax, cs
    316	01EC  8E D8				     mov ds, ax
    317
    318
    319	01EE  F6 06 0308r 04 90			     test Int8Handler_flags, 1 SHL Int8Handler_killF
    320	01F4  75 7B				     jnz Int8Handler_detach
    321
    322
    323	01F6  A0 0307r				     mov al, Int8Handler_ticks
    324	01F9  84 C0				     test al, al
    325	01FB  74 03				     jz	Int8Handler_doTick
    326	01FD  E9 00FB				     jmp Int8Handler_next
    327	0200			     Int8Handler_doTick:
    328	0200  C6 06 0307r 04 90			     mov Int8Handler_ticks, Int8Handler_interval
    329
    330	0206  E8 0353				     call SetCharInit  ; I guess we may	always call it
    331
    332
    333	0209  F6 06 0308r 01 90			     test Int8Handler_flags, 1 SHL Int8Handler_showF
    334	020F  75 03				     jnz Int8Handler_maybeShow	; TODO:	Restore	videobuf
    335	0211  E9 00CB				     jmp Int8Handler_maybeHide
    336
    337	0214			     Int8Handler_maybeShow:
    338	0214  F6 06 0308r 02 90			     test Int8Handler_flags, 1 SHL Int8Handler_wasShownF
    339	021A  75 11				     jnz Int8Handler_notShow
    340
    341						     ; TODO: Save segment under	frame
    342	021C  BB 0102 90			     mov bx, Int8Handler_FrameS
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 7
revil.asm



    343	0220  B9 060D 90			     mov cx, Int8Handler_FrameE
    344	0224  E8 01BB				     call SaveBG
    345
    346	0227  80 0E 0308r 02 90			     or	Int8Handler_flags, 1 SHL Int8Handler_wasShownF
    347
    348	022D			     Int8Handler_notShow:
    349	022D  BB 0102 90			     mov bx, Int8Handler_FrameS
    350	0231  B9 060D 90			     mov cx, Int8Handler_FrameE
    351	0235  E8 0235				     call DrawFrame
    352
    353	0238  BB 0204 90			     mov bx, Int8Handler_FrameT
    354	023C  B1 23 90 90			     mov cl, Int8Handler_LegendLen
    355	0240  BE 0309r				     mov si, offset Int8Handler_Legend
    356	0243  E8 038A				     call DrawStr
    357
    358	0246  8B 46 12				     mov ax, Int8Handler_OldA
    359	0249  BB 0207 90			     mov bx, Int8Handler_FrameTA
    360	024D  E8 03D7				     call DrawNumHex
    361
    362	0250  8B 46 0C				     mov ax, Int8Handler_OldB
    363	0253  BB 0307 90			     mov bx, Int8Handler_FrameTB
    364	0257  E8 03CD				     call DrawNumHex
    365
    366	025A  8B 46 10				     mov ax, Int8Handler_OldC
    367	025D  BB 0407 90			     mov bx, Int8Handler_FrameTC
    368	0261  E8 03C3				     call DrawNumHex
    369
    370	0264  8B 46 0E				     mov ax, Int8Handler_OldD
    371	0267  BB 0507 90			     mov bx, Int8Handler_FrameTD
    372	026B  E8 03B9				     call DrawNumHex
    373
    374	026E  E9 008A				     jmp Int8Handler_next
    375
    376	0271			     Int8Handler_detach:
    377	0271  F6 06 0308r 01 90			     test Int8Handler_flags, 1 SHL Int8Handler_showF
    378	0277  74 0B				     jz	Int8Handler_detach_noHide
    379
    380	0279  BB 0102 90			     mov bx, Int8Handler_FrameS
    381	027D  B9 060D 90			     mov cx, Int8Handler_FrameE
    382	0281  E8 01A6				     call RestoreBG
    383
    384						     ; or Int8Handler_flags, 1 SHL Int8Handler_showF
    385						     ; or Int8Handler_flags, 1 SHL Int8Handler_wasShownF
    386
    387	0284			     Int8Handler_detach_noHide:
    388
    389						     CheckIRQ 9	Int8Handler_detach_8
1   390
1   391	0284  B8 3509				     mov ax, 3500h OR 9
1   392	0287  CD 21				     int 21h
1   393	0289  8C C0				     mov ax, es
1   394
1   395	028B  81 FB 015Fr			     cmp bx, offset Int9Handler
1   396	028F  75 1F				     jne Int8Handler_detach_8
1   397	0291  8C CB				     mov bx, cs
1   398	0293  3B C3				     cmp ax, bx
1   399	0295  75 19				     jne Int8Handler_detach_8
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 8
revil.asm



1   400
    401	0297  F6 06 0308r 08 90			     test Int8Handler_flags, 1 SHL Int8Handler_kill9F
    402	029D  74 11				     jz	Int8Handler_detach_8
    403
    404						     UninstallIRQ 9
1   405
1   406	029F  1E				     push ds
1   407
1   408	02A0  B8 2509				     mov ax, 2500h OR 9
1   409	02A3  8B 16 01E1r			     mov dx, Int9Handler_oldOff
1   410	02A7  8B 1E 01E3r			     mov bx, Int9Handler_oldSeg
1   411	02AB  8E DB				     mov ds, bx
1   412
1   413	02AD  CD 21				     int 21h
1   414
1   415	02AF  1F				     pop ds
1   416
    417
    418	02B0			     Int8Handler_detach_8:
    419
    420						     CheckIRQ 8	Int8Handler_next
1   421
1   422	02B0  B8 3508				     mov ax, 3500h OR 8
1   423	02B3  CD 21				     int 21h
1   424	02B5  8C C0				     mov ax, es
1   425
1   426	02B7  81 FB 01E5r			     cmp bx, offset Int8Handler
1   427	02BB  75 3E				     jne Int8Handler_next
1   428	02BD  8C CB				     mov bx, cs
1   429	02BF  3B C3				     cmp ax, bx
1   430	02C1  75 38				     jne Int8Handler_next
1   431
    432
    433						     UninstallIRQ 8
1   434
1   435	02C3  1E				     push ds
1   436
1   437	02C4  B8 2508				     mov ax, 2500h OR 8
1   438	02C7  8B 16 0303r			     mov dx, Int8Handler_oldOff
1   439	02CB  8B 1E 0305r			     mov bx, Int8Handler_oldSeg
1   440	02CF  8E DB				     mov ds, bx
1   441
1   442	02D1  CD 21				     int 21h
1   443
1   444	02D3  1F				     pop ds
1   445
    446
    447						     ; TODO: Verify interrupt isn't hijacked and refuse	to stop	in that	case (and   +
    448				     same for int8)
    449
    450						     ; Now I'll	do something incredibly	crotchy	- that is freeing the memory block I+
    451				     reside in.
    452						     ; That clearly contradicts	a well-known russian saying "Don't cut the branch   +
    453				     you're sitting on",
    454						     ; but I believe this shouldn't overwrite us, thanks to how	DOS doesn't support +
    455				     multithreading.
    456						     ; That should get us enough time to shut ourselves	down as	well. The only thing+
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 9
revil.asm



    457				     that has a	chance
    458						     ; to interrupt us is a timer tick (which I	intend to intercept myself as soon  +
    459				     as	I finish the
    460						     ; keyboard	part - then I'll move this bit of code there and it will become	    +
    461				     completely	invincible).
    462						     ; But even	now a disruption is unlikely - that would need the timer to request +
    463				     a memory block (or
    464						     ; start another program, which does that intrinsically), and that doesn't seem +
    465				     like things a timer
    466						     ; would ever want to do.
    467						     ; EDIT: Now that it's in timer, it	can't be interrupted
    468						     ;	     I guess I could have added	a cli as well, but there's no point in that +
    469				     now
    470
    471	02D4  06				     push es
    472	02D5  0E				     push cs
    473	02D6  07				     pop es
    474	02D7  B4 49				     mov ah, 49h
    475	02D9  CD 21				     int 21h
    476	02DB  07				     pop es
    477
    478	02DC  EB 1D 90				     jmp Int8Handler_next
    479
    480	02DF			     Int8Handler_maybeHide:
    481	02DF  F6 06 0308r 02 90			     test Int8Handler_flags, 1 SHL Int8Handler_wasShownF
    482	02E5  74 14				     jz	Int8Handler_next
    483
    484						     ; Restore saved videobuf from under frame
    485	02E7  BB 0102 90			     mov bx, Int8Handler_FrameS
    486	02EB  B9 060D 90			     mov cx, Int8Handler_FrameE
    487	02EF  E8 0138				     call RestoreBG
    488
    489	02F2  80 26 0308r FD 90			     and Int8Handler_flags, NOT	(1 SHL Int8Handler_wasShownF)
    490
    491	02F8  EB 01 90				     jmp Int8Handler_next
    492
    493	02FB			     Int8Handler_next:
    494	02FB  FE 0E 0307r			     dec Int8Handler_ticks
    495
    496	02FF  1F 07				     pop ds es
    497	0301  61				     popa
    498
    499						     ;popa
    500
    501						     NextIRQ 8
1   502
1   503	0302  EA				     db	0eah  ;	jmp far
1   504	0303  0000		     Int8Handler_oldOff	     dw	0
1   505	0305  0000		     Int8Handler_oldSeg	     dw	0
1   506
    507
    508
    509	      =0004		     Int8Handler_interval    equ 4
    510	0307  00		     Int8Handler_ticks	     db	0
    511
    512				     ; TODO: Compress into a bitmask
    513	0308  00		     Int8Handler_flags	     db	0
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 10
revil.asm



    514	      =0000		     Int8Handler_showF	     equ 0
    515	      =0001		     Int8Handler_wasShownF   equ 1
    516	      =0002		     Int8Handler_killF	     equ 2
    517	      =0003		     Int8Handler_kill9F	     equ 3
    518
    519	0309  61 78 3A 20 30 30	30+  Int8Handler_Legend	     db	'ax: 0000', 0ah, \
    520	      30 0A 62 78 3A 20	30+				'bx: 0000', 0ah, \
    521	      30 30 30 0A 63 78	3A+				'cx: 0000', 0ah, \
    522	      20 30 30 30 30 0A	64+				'dx: 0000'
    523	      78 3A 20 30 30 30	30
    524	      =0023		     Int8Handler_LegendLen   equ $ - Int8Handler_Legend
    525
    526	      =0002		     Int8Handler_FrameSX     equ 2
    527	      =0001		     Int8Handler_FrameSY     equ 1
    528	      =000B		     Int8Handler_FrameW	     equ 11
    529	      =0005		     Int8Handler_FrameH	     equ 5
    530	      =000D		     Int8Handler_FrameEX     equ Int8Handler_FrameSX + Int8Handler_FrameW
    531	      =0006		     Int8Handler_FrameEY     equ Int8Handler_FrameSY + Int8Handler_FrameH
    532
    533	      =0102		     Int8Handler_FrameS	     equ (Int8Handler_FrameSY SHL 8) OR	Int8Handler_FrameSX
    534	      =060D		     Int8Handler_FrameE	     equ (Int8Handler_FrameEY SHL 8) OR	Int8Handler_FrameEX
    535
    536	      =0204		     Int8Handler_FrameT	     equ Int8Handler_FrameS + 0102h
    537	      =0207		     Int8Handler_FrameTA     equ Int8Handler_FrameT + 0003h
    538	      =0307		     Int8Handler_FrameTB     equ Int8Handler_FrameTA + 0100h
    539	      =0407		     Int8Handler_FrameTC     equ Int8Handler_FrameTB + 0100h
    540	      =0507		     Int8Handler_FrameTD     equ Int8Handler_FrameTC + 0100h
    541
    542	      =	[bp+18]		     Int8Handler_OldA	     equ [bp+18]
    543	      =	[bp+12]		     Int8Handler_OldB	     equ [bp+12]
    544	      =	[bp+16]		     Int8Handler_OldC	     equ [bp+16]
    545	      =	[bp+14]		     Int8Handler_OldD	     equ [bp+14]
    546
    547	032C  B6*(??)		     Int8Handler_BG	     db	(((Int8Handler_FrameH +	2) * (Int8Handler_FrameW + 2)) * 2)dup(?)
    548
    549	03E2			     Int8Handler     endp
    550
    551
    552				     ; void SaveBG(bh: fromRow,	bl: fromCol, ch: toRow,	cl: toCol)
    553				     ; uses ax,	bx, cx,	dx, si,	di
    554	03E2			     SaveBG	     proc near
    555	03E2  06 1E				     push es ds
    556
    557	03E4  FE C5				     inc ch
    558	03E6  FE C1				     inc cl
    559
    560	03E8  53				     push bx
    561						     Coords2KeyM a, b
1   562
1   563	03E9  A1 05A0r				     mov ax, SetChar_width
1   564	03EC  F6 E7				     mul bh
1   565	03EE  32 FF				     xor bh, bh
1   566	03F0  02 C3				     add al, bl
1   567	03F2  80 D4 00				     adc ah, 0
1   568	03F5  D1 E0				     shl ax, 1
1   569
    570	03F7  5B				     pop bx
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 11
revil.asm



    571
    572	03F8  8B F0				     mov si, ax
    573	03FA  BF 032Cr				     mov di, offset Int8Handler_BG
    574
    575	03FD  8B D1				     mov dx, cx
    576	03FF  2B D3				     sub dx, bx	 ; actually dl -= bl; dh -= bh
    577
    578	0401  FF 36 05A2r			     push SetChar_buf
    579	0405  1E				     push ds
    580	0406  07				     pop es
    581	0407  1F				     pop ds
    582
    583	0408  FC				     cld
    584
    585	0409  32 ED				     xor ch, ch
    586
    587	040B  84 F6		     SaveBG_loop:    test dh, dh
    588	040D  74 18				     jz	SaveBG_loop_end
    589
    590	040F  8A CA				     mov cl, dl
    591
    592	0411  F3> A5				     rep movsw
    593
    594	0413  FE CE				     dec dh
    595	0415  26: A1 05A0r			     mov ax, es:SetChar_width
    596	0419  D1 E0				     shl ax, 1
    597	041B  03 F0				     add si, ax
    598	041D  32 E4				     xor ah, ah
    599	041F  8A C2				     mov al, dl
    600	0421  D1 E0				     shl ax, 1
    601	0423  2B F0				     sub si, ax
    602
    603	0425  EB E4				     jmp SaveBG_loop
    604	0427			     SaveBG_loop_end:
    605
    606	0427  1F 07				     pop ds es
    607
    608	0429  C3				     ret
    609	042A			     SaveBG	     endp
    610
    611
    612				     ; void RestoreBG(bh: fromRow, bl: fromCol,	ch: toRow, cl: toCol)
    613				     ; uses ax,	bx, cx,	dx, si,	di
    614	042A			     RestoreBG	     proc near
    615	042A  06				     push es
    616
    617	042B  FE C5				     inc ch
    618	042D  FE C1				     inc cl
    619
    620	042F  53				     push bx
    621						     Coords2KeyM a, b
1   622
1   623	0430  A1 05A0r				     mov ax, SetChar_width
1   624	0433  F6 E7				     mul bh
1   625	0435  32 FF				     xor bh, bh
1   626	0437  02 C3				     add al, bl
1   627	0439  80 D4 00				     adc ah, 0
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 12
revil.asm



1   628	043C  D1 E0				     shl ax, 1
1   629
    630	043E  5B				     pop bx
    631
    632	043F  BE 032Cr				     mov si, offset Int8Handler_BG
    633	0442  8B F8				     mov di, ax
    634
    635	0444  8B D1				     mov dx, cx
    636	0446  2B D3				     sub dx, bx	 ; actually dl -= bl; dh -= bh
    637
    638	0448  FF 36 05A2r			     push SetChar_buf
    639	044C  07				     pop es
    640
    641						     ;mov word ptr ds:[si], 7h SHL 8 OR	'!'
    642						     ;mov byte ptr ds:[si], '!'
    643
    644	044D  FC				     cld
    645
    646	044E  32 ED				     xor ch, ch
    647
    648	0450  84 F6		     RestoreBG_loop: test dh, dh
    649	0452  74 17				     jz	RestoreBG_loop_end
    650
    651	0454  8A CA				     mov cl, dl
    652
    653	0456  F3> A5				     rep movsw
    654
    655	0458  FE CE				     dec dh
    656	045A  A1 05A0r				     mov ax, SetChar_width
    657	045D  D1 E0				     shl ax, 1
    658	045F  03 F8				     add di, ax
    659	0461  32 E4				     xor ah, ah
    660	0463  8A C2				     mov al, dl
    661	0465  D1 E0				     shl ax, 1
    662	0467  2B F8				     sub di, ax
    663
    664	0469  EB E5				     jmp RestoreBG_loop
    665	046B			     RestoreBG_loop_end:
    666
    667	046B  07				     pop es
    668
    669	046C  C3				     ret
    670	046D			     RestoreBG	     endp
    671
    672
    673				     ; void DrawFrame(bh: fromRow, bl: fromCol,	ch: toRow, cl: toCol)
    674				     ; uses ax,	bx, cx,	dx, di,	SetChar
    675	046D			     DrawFrame	     proc near
    676
    677	      =	[bp-1]		     DrawFrame_fromRow	     equ [bp-1]
    678	      =	[bp-2]		     DrawFrame_fromCol	     equ [bp-2]
    679	      =	[bp-3]		     DrawFrame_toRow	     equ [bp-3]
    680	      =	[bp-4]		     DrawFrame_toCol	     equ [bp-4]
    681
    682	046D  55				     push bp
    683	046E  8B EC				     mov bp, sp
    684	0470  83 EC 04				     sub sp, 4
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 13
revil.asm



    685
    686	0473  88 7E FF				     mov DrawFrame_fromRow, bh
    687	0476  88 5E FE				     mov DrawFrame_fromCol, bl
    688	0479  88 6E FD				     mov DrawFrame_toRow, ch
    689	047C  88 4E FC				     mov DrawFrame_toCol, cl
    690
    691	047F  B8 0600				     mov ax, 0600h
    692	0482  8B D1				     mov dx, cx
    693	0484  8B CB				     mov cx, bx
    694	0486  B7 1F				     mov bh, FrameStyle
    695	0488  CD 10				     int 10h
    696
    697	048A  B5 1F				     mov ch, FrameStyle
    698	048C  B1 C9				     mov cl, 201
    699	048E  8A 7E FF				     mov bh, DrawFrame_fromRow
    700	0491  8A 5E FE				     mov bl, DrawFrame_fromCol
    701	0494  E8 00EE				     call SetChar
    702
    703	0497  B5 1F				     mov ch, FrameStyle
    704	0499  B1 BB				     mov cl, 187
    705	049B  8A 7E FF				     mov bh, DrawFrame_fromRow
    706	049E  8A 5E FC				     mov bl, DrawFrame_toCol
    707	04A1  E8 00E1				     call SetChar
    708
    709	04A4  B5 1F				     mov ch, FrameStyle
    710	04A6  B1 BC				     mov cl, 188
    711	04A8  8A 7E FD				     mov bh, DrawFrame_toRow
    712	04AB  8A 5E FC				     mov bl, DrawFrame_toCol
    713	04AE  E8 00D4				     call SetChar
    714
    715	04B1  B5 1F				     mov ch, FrameStyle
    716	04B3  B1 C8				     mov cl, 200
    717	04B5  8A 7E FD				     mov bh, DrawFrame_toRow
    718	04B8  8A 5E FE				     mov bl, DrawFrame_fromCol
    719	04BB  E8 00C7				     call SetChar
    720
    721
    722						     ; es is already set by SetChar
    723	04BE  FC				     cld
    724	04BF  32 ED				     xor ch, ch
    725
    726	04C1  8A 4E FC				     mov cl, DrawFrame_toCol
    727	04C4  2A 4E FE				     sub cl, DrawFrame_fromCol
    728	04C7  FE C9				     dec cl
    729	04C9  F6 C1 80				     test cl, 1	SHL 7
    730	04CC  75 44				     jnz DrawFrame_loopH_end
    731
    732	04CE  8A 5E FE				     mov bl, DrawFrame_fromCol
    733	04D1  8A 7E FF				     mov bh, DrawFrame_fromRow
    734						     Coords2KeyM a, b
1   735
1   736	04D4  A1 05A0r				     mov ax, SetChar_width
1   737	04D7  F6 E7				     mul bh
1   738	04D9  32 FF				     xor bh, bh
1   739	04DB  02 C3				     add al, bl
1   740	04DD  80 D4 00				     adc ah, 0
1   741	04E0  D1 E0				     shl ax, 1
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 14
revil.asm



1   742
    743	04E2  40				     inc ax
    744	04E3  40				     inc ax
    745	04E4  8B F8				     mov di, ax
    746
    747	04E6  B4 1F				     mov ah, FrameStyle
    748	04E8  B0 CD				     mov al, 205
    749
    750	04EA  F3> AB				     rep stosw
    751
    752
    753	04EC  8A 4E FC				     mov cl, DrawFrame_toCol
    754	04EF  2A 4E FE				     sub cl, DrawFrame_fromCol
    755	04F2  FE C9				     dec cl
    756
    757	04F4  8A 5E FE				     mov bl, DrawFrame_fromCol
    758	04F7  8A 7E FD				     mov bh, DrawFrame_toRow
    759						     Coords2KeyM a, b
1   760
1   761	04FA  A1 05A0r				     mov ax, SetChar_width
1   762	04FD  F6 E7				     mul bh
1   763	04FF  32 FF				     xor bh, bh
1   764	0501  02 C3				     add al, bl
1   765	0503  80 D4 00				     adc ah, 0
1   766	0506  D1 E0				     shl ax, 1
1   767
    768	0508  40				     inc ax
    769	0509  40				     inc ax
    770	050A  8B F8				     mov di, ax
    771
    772	050C  B4 1F				     mov ah, FrameStyle
    773	050E  B0 CD				     mov al, 205
    774
    775	0510  F3> AB				     rep stosw
    776
    777	0512			     DrawFrame_loopH_end:
    778
    779	0512  8A 4E FD				     mov cl, DrawFrame_toRow
    780	0515  2A 4E FF				     sub cl, DrawFrame_fromRow
    781	0518  FE C9				     dec cl
    782	051A  F6 C1 80				     test cl, 1	SHL 7
    783	051D  75 F3				     jnz DrawFrame_loopH_end
    784
    785	051F  8A 5E FE				     mov bl, DrawFrame_fromCol
    786	0522  8A 7E FF				     mov bh, DrawFrame_fromRow
    787	0525  FE C7				     inc bh
    788						     Coords2KeyM a, b
1   789
1   790	0527  A1 05A0r				     mov ax, SetChar_width
1   791	052A  F6 E7				     mul bh
1   792	052C  32 FF				     xor bh, bh
1   793	052E  02 C3				     add al, bl
1   794	0530  80 D4 00				     adc ah, 0
1   795	0533  D1 E0				     shl ax, 1
1   796
    797
    798	0535  8B F8				     mov di, ax
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 15
revil.asm



    799	0537  A1 05A0r				     mov ax, SetChar_width  ; TODO: Change previous macro params instead
    800	053A  D1 E0				     shl ax, 1
    801
    802	053C  32 FF				     xor bh, bh
    803	053E  8A 5E FC				     mov bl, DrawFrame_toCol
    804	0541  2A 5E FE				     sub bl, DrawFrame_fromCol
    805	0544  D0 E3				     shl bl, 1
    806	0546  73 02				     jnc DrawFrame_loopV
    807	0548  32 DB				     xor bl, bl
    808
    809	054A			     DrawFrame_loopV:
    810	054A  26: C7 05	1FBA			     mov word ptr es:[di],    (FrameStyle SHL 8) OR 186
    811	054F  26: C7 01	1FBA			     mov word ptr es:[di+bx], (FrameStyle SHL 8) OR 186
    812
    813	0554  03 F8				     add di, ax
    814	0556  E2 F2				     loop DrawFrame_loopV
    815
    816	0558			     DrawFrame_loopV_end:
    817
    818
    819	0558  8B E5				     mov sp, bp
    820	055A  5D				     pop bp
    821	055B  C3				     ret
    822	055C			     DrawFrame	     endp
    823
    824
    825				     ; void SetCharInit()
    826				     ; uses: ax, bx, es
    827	055C			     SetCharInit     proc near
    828
    829	055C  CD 11				     int 11h
    830	055E  35 0030				     xor ax, 30h
    831	0561  C1 E0 0B				     shl ax, 11
    832	0564  0D B800				     or	ax, VIDEOSEG
    833	0567  A3 05A2r				     mov SetChar_buf, ax
    834
    835	056A  B8 0040				     mov ax, 40h
    836	056D  8E C0				     mov es, ax
    837	056F  26: A1 004A			     mov ax, es:4ah  ; 80 most often
    838	0573  A3 05A0r				     mov SetChar_width,	ax
    839
    840	0576  C3				     ret
    841
    842	0577			     SetCharInit     endp
    843
    844
    845				     ; Coords2KeyM moved up
    846
    847
    848				     ; ax: coords Coords2Key(bh: row, bl: column)
    849				     ; uses: ax, (bx), dx
    850	0577			     Coords2Key	     proc near
    851						     Coords2KeyM a, b
1   852
1   853	0577  A1 05A0r				     mov ax, SetChar_width
1   854	057A  F6 E7				     mul bh
1   855	057C  32 FF				     xor bh, bh
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 16
revil.asm



1   856	057E  02 C3				     add al, bl
1   857	0580  80 D4 00				     adc ah, 0
1   858	0583  D1 E0				     shl ax, 1
1   859
    860	0585			     Coords2Key	     endp
    861
    862
    863				     ; ax: index SetChar(cl: letter, ch: attrs,	bh: row, bl: column)
    864				     ; uses: ax, (bx), (cx), dx, es
    865	0585			     SetChar	     proc near
    866	0585  53				     push bx
    867						     Coords2KeyM a, b
1   868
1   869	0586  A1 05A0r				     mov ax, SetChar_width
1   870	0589  F6 E7				     mul bh
1   871	058B  32 FF				     xor bh, bh
1   872	058D  02 C3				     add al, bl
1   873	058F  80 D4 00				     adc ah, 0
1   874	0592  D1 E0				     shl ax, 1
1   875
    876
    877	0594  93				     xchg ax, bx
    878
    879	0595  8B 16 05A2r			     mov dx, SetChar_buf
    880	0599  8E C2				     mov es, dx
    881	059B  26: 89 0F				     mov es:[bx], cx
    882
    883	059E  5B				     pop bx
    884
    885	059F  C3				     ret
    886
    887	05A0  0050		     SetChar_width   dw	80
    888	05A2  0000		     SetChar_buf     dw	0
    889	05A4			     SetChar	     endp
    890
    891
    892				     ; void Beep(bx: frequency,	cx: length)
    893				     ; uses ax,	bx, cx
    894	05A4			     Beep	     proc near
    895	05A4  B0 B6				     mov al, 182
    896	05A6  E6 43				     out 43h, al
    897	05A8  8B C3				     mov ax, bx
    898	05AA  E6 42				     out 42h, al
    899	05AC  8A C4				     mov al, ah
    900	05AE  E6 42				     out 42h, al
    901	05B0  E4 61				     in	al, 61h
    902	05B2  0C 03				     or	al, 00000011b
    903	05B4  E6 61				     out 61h, al
    904	05B6  8B D9				     mov bx, cx
    905
    906
    907	05B8  B9 FFFF		     Beep_pause1:    mov cx, 65535
    908	05BB  49		     Beep_pause2:    dec cx
    909	05BC  75 FD				     jnz Beep_pause2
    910	05BE  4B				     dec bx
    911	05BF  75 F7				     jnz Beep_pause1
    912	05C1  E4 61				     in	al, 61h
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 17
revil.asm



    913	05C3  24 FC				     and al, 11111100b
    914	05C5  E6 61				     out 61h, al
    915
    916	05C7  C3				     ret
    917	05C8			     Beep	     endp
    918
    919
    920				     ; TODO: Maybe use the int 15h 81h
    921				     ; void Sleep(ax: duration)
    922				     ; uses ax
    923	05C8			     Sleep	     proc near
    924
    925	05C8  85 C0		     Sleep_loop:     test ax, ax
    926	05CA  74 03				     jz	Sleep_loop_end
    927	05CC  48				     dec ax
    928	05CD  EB F9				     jmp Sleep_loop
    929	05CF			     Sleep_loop_end:
    930	05CF  C3				     ret
    931	05D0			     Sleep	     endp
    932
    933
    934				     ; void DrawStr(bh:	row, bl: column, cl: length, si: source)
    935				     ; uses ax,	bx, cx,	si, SetChar
    936	05D0			     DrawStr	     proc near
    937	      =	[bp-1]		     DrawStr_i	     equ [bp-1]
    938	      =	[bp-2]		     DrawStr_origCol equ [bp-2]
    939	05D0  55				     push bp
    940	05D1  8B EC				     mov bp, sp
    941	05D3  83 EC 02				     sub sp, 2
    942
    943	05D6  88 5E FE				     mov DrawStr_origCol, bl
    944	05D9  88 4E FF				     mov DrawStr_i, cl
    945
    946	05DC  8A 46 FF		     DrawStr_loop:   mov al, DrawStr_i
    947	05DF  84 C0				     test al, al
    948	05E1  74 20				     jz	DrawStr_loop_end
    949
    950	05E3  8A 0C				     mov cl, [si]
    951	05E5  80 F9 0A				     cmp cl, 0ah
    952	05E8  74 0E				     je	DrawStr_nl
    953
    954	05EA  84 C9				     test cl, cl
    955	05EC  74 15				     jz	DrawStr_loop_end
    956
    957	05EE  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    958	05F0  E8 FF92				     call SetChar
    959
    960	05F3  FE C3				     inc bl
    961
    962	05F5  EB 06 90				     jmp DrawStr_nl_skip
    963
    964	05F8  8A 5E FE		     DrawStr_nl:     mov bl, DrawStr_origCol
    965	05FB  FE C7				     inc bh
    966
    967	05FD			     DrawStr_nl_skip:
    968	05FD  46				     inc si
    969	05FE  FE 4E FF				     dec byte ptr DrawStr_i
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 18
revil.asm



    970	0601  EB D9				     jmp DrawStr_loop
    971	0603			     DrawStr_loop_end:
    972
    973	0603  8B E5				     mov sp, bp
    974	0605  5D				     pop bp
    975	0606  C3				     ret
    976	0607			     DrawStr	     endp
    977
    978
    979				     ; void DrawNum10(ax: num, bh: row,	bl: column)
    980				     ; uses ax,	bx, cx,	dx, SetChar
    981	0607			     DrawNum10	     proc near
    982	0607  80 C3 05				     add bl, 5
    983
    984	060A  85 C0		     DrawNum10_loop: test ax, ax
    985	060C  74 18				     jz	DrawNum10_loop_end
    986
    987						     ;aam  ; This is faster than division and more convenient, although	relies on ax+
    988				     being small enough
    989	060E  B1 0A				     mov cl, 10
    990	0610  32 ED				     xor ch, ch
    991	0612  33 D2				     xor dx, dx
    992	0614  F7 F1				     div cx
    993
    994	0616  80 C2 30				     add dl, '0'
    995	0619  8A CA				     mov cl, dl
    996	061B  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    997
    998	061D  50				     push ax
    999	061E  E8 FF64				     call SetChar
   1000	0621  58				     pop ax
   1001
   1002	0622  FE CB				     dec bl
   1003	0624  EB E4				     jmp DrawNum10_loop
   1004	0626			     DrawNum10_loop_end:
   1005
   1006	0626  C3				     ret
   1007	0627			     DrawNum10	     endp
   1008
   1009
   1010				     ; void DrawNumHex(ax: num,	bh: row, bl: column)
   1011				     ; uses ax,	bx, cx,	SetChar
   1012	0627			     DrawNumHex	     proc near
   1013	0627  80 C3 04				     add bl, 4
   1014
   1015	062A			     DrawNumHex_loop:
   1016	062A  85 C0				     test ax, ax
   1017	062C  74 21				     jz	DrawNumHex_loop_end
   1018
   1019	062E  8A C8				     mov cl, al
   1020	0630  80 E1 0F				     and cl, 0fh
   1021
   1022	0633  80 F9 0A				     cmp cl, 10
   1023	0636  73 06				     jae DrawNumHex_bigDigit
   1024
   1025	0638  80 C1 30				     add cl, '0'
   1026
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 19
revil.asm



   1027	063B  EB 04 90				     jmp DrawNumHex_notBigDigit
   1028	063E			     DrawNumHex_bigDigit:
   1029	063E  80 C1 37				     add cl, 'A'-10
   1030	0641			     DrawNumHex_notBigDigit:
   1031
   1032	0641  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
   1033
   1034	0643  C1 E8 04				     shr ax, 4
   1035
   1036	0646  50				     push ax
   1037	0647  E8 FF3B				     call SetChar
   1038	064A  58				     pop ax
   1039
   1040	064B  FE CB				     dec bl
   1041	064D  EB DB				     jmp DrawNumHex_loop
   1042	064F			     DrawNumHex_loop_end:
   1043
   1044	064F  C3				     ret
   1045	0650			     DrawNumHex	     endp
   1046
   1047
   1048	0650			     ProgEnd:
   1049
   1050	0650			     .data
   1051
   1052	0000  53 6B 69 70 70 69	6E+  SkipMsg	     db	"Skipping installation.", 0ah, 0dh, "$"
   1053	      67 20 69 6E 73 74	61+
   1054	      6C 6C 61 74 69 6F	6E+
   1055	      2E 0A 0D 24
   1056
   1057				     end Start
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 20
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/19/21"
??FILENAME			  Text	 "revil	  "
??TIME				  Text	 "09:14:32"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REVIL
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BEEP				  Near	 DGROUP:05A4
BEEP_PAUSE1			  Near	 DGROUP:05B8
BEEP_PAUSE2			  Near	 DGROUP:05BB
COORDS2KEY			  Near	 DGROUP:0577
DRAWFRAME			  Near	 DGROUP:046D
DRAWFRAME_FROMCOL		  Text	 [bp-2]
DRAWFRAME_FROMROW		  Text	 [bp-1]
DRAWFRAME_LOOPH_END		  Near	 DGROUP:0512
DRAWFRAME_LOOPV			  Near	 DGROUP:054A
DRAWFRAME_LOOPV_END		  Near	 DGROUP:0558
DRAWFRAME_TOCOL			  Text	 [bp-4]
DRAWFRAME_TOROW			  Text	 [bp-3]
DRAWNUM10			  Near	 DGROUP:0607
DRAWNUM10_LOOP			  Near	 DGROUP:060A
DRAWNUM10_LOOP_END		  Near	 DGROUP:0626
DRAWNUMHEX			  Near	 DGROUP:0627
DRAWNUMHEX_BIGDIGIT		  Near	 DGROUP:063E
DRAWNUMHEX_LOOP			  Near	 DGROUP:062A
DRAWNUMHEX_LOOP_END		  Near	 DGROUP:064F
DRAWNUMHEX_NOTBIGDIGIT		  Near	 DGROUP:0641
DRAWSTR				  Near	 DGROUP:05D0
DRAWSTR_I			  Text	 [bp-1]
DRAWSTR_LOOP			  Near	 DGROUP:05DC
DRAWSTR_LOOP_END		  Near	 DGROUP:0603
DRAWSTR_NL			  Near	 DGROUP:05F8
DRAWSTR_NL_SKIP			  Near	 DGROUP:05FD
DRAWSTR_ORIGCOL			  Text	 [bp-2]
FRAMESTYLE			  Number 001F
INT8HANDLER			  Far	 DGROUP:01E5
INT8HANDLER_BG			  Byte	 DGROUP:032C
INT8HANDLER_DETACH		  Near	 DGROUP:0271
INT8HANDLER_DETACH_8		  Near	 DGROUP:02B0
INT8HANDLER_DETACH_NOHIDE	  Near	 DGROUP:0284
INT8HANDLER_DOTICK		  Near	 DGROUP:0200
INT8HANDLER_FLAGS		  Byte	 DGROUP:0308
INT8HANDLER_FRAMEE		  Number 060D
INT8HANDLER_FRAMEEX		  Number 000D
INT8HANDLER_FRAMEEY		  Number 0006
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 21
Symbol Table



INT8HANDLER_FRAMEH		  Number 0005
INT8HANDLER_FRAMES		  Number 0102
INT8HANDLER_FRAMESX		  Number 0002
INT8HANDLER_FRAMESY		  Number 0001
INT8HANDLER_FRAMET		  Number 0204
INT8HANDLER_FRAMETA		  Number 0207
INT8HANDLER_FRAMETB		  Number 0307
INT8HANDLER_FRAMETC		  Number 0407
INT8HANDLER_FRAMETD		  Number 0507
INT8HANDLER_FRAMEW		  Number 000B
INT8HANDLER_INTERVAL		  Number 0004
INT8HANDLER_KILL9F		  Number 0003
INT8HANDLER_KILLF		  Number 0002
INT8HANDLER_LEGEND		  Byte	 DGROUP:0309
INT8HANDLER_LEGENDLEN		  Number 0023
INT8HANDLER_MAYBEHIDE		  Near	 DGROUP:02DF
INT8HANDLER_MAYBESHOW		  Near	 DGROUP:0214
INT8HANDLER_NEXT		  Near	 DGROUP:02FB
INT8HANDLER_NOTSHOW		  Near	 DGROUP:022D
INT8HANDLER_OLDA		  Text	 [bp+18]
INT8HANDLER_OLDB		  Text	 [bp+12]
INT8HANDLER_OLDC		  Text	 [bp+16]
INT8HANDLER_OLDD		  Text	 [bp+14]
INT8HANDLER_OLDOFF		  Word	 DGROUP:0303
INT8HANDLER_OLDSEG		  Word	 DGROUP:0305
INT8HANDLER_SHOWF		  Number 0000
INT8HANDLER_TICKS		  Byte	 DGROUP:0307
INT8HANDLER_WASSHOWNF		  Number 0001
INT9HANDLER			  Far	 DGROUP:015F
INT9HANDLER_END			  Near	 DGROUP:01C7
INT9HANDLER_NEXT		  Near	 DGROUP:01DD
INT9HANDLER_NUM0		  Near	 DGROUP:0186
INT9HANDLER_NUM1		  Near	 DGROUP:017C
INT9HANDLER_OLDOFF		  Word	 DGROUP:01E1
INT9HANDLER_OLDSEG		  Word	 DGROUP:01E3
INT9HANDLER_OVERWRITTEN		  Near	 DGROUP:01BB
PROGEND				  Near	 DGROUP:0650
RESTOREBG			  Near	 DGROUP:042A
RESTOREBG_LOOP			  Near	 DGROUP:0450
RESTOREBG_LOOP_END		  Near	 DGROUP:046B
SAVEBG				  Near	 DGROUP:03E2
SAVEBG_LOOP			  Near	 DGROUP:040B
SAVEBG_LOOP_END			  Near	 DGROUP:0427
SETCHAR				  Near	 DGROUP:0585
SETCHARINIT			  Near	 DGROUP:055C
SETCHAR_BUF			  Word	 DGROUP:05A2
SETCHAR_WIDTH			  Word	 DGROUP:05A0
SKIPINSTALL			  Near	 DGROUP:0153
SKIPMSG				  Byte	 DGROUP:0000
SLEEP				  Near	 DGROUP:05C8
SLEEP_LOOP			  Near	 DGROUP:05C8
SLEEP_LOOP_END			  Near	 DGROUP:05CF
START				  Near	 DGROUP:0100
VIDEOSEG			  Number B800
Turbo Assembler	 Version 4.1	    02/19/21 09:14:33	    Page 22
Symbol Table




Macro Name

CHECKIRQ
COORDS2KEYM
INSTALLIRQ
NEXTIRQ
UNINSTALLIRQ

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0019 Word	  Public  DATA
  _TEXT				  16  0650 Word	  Public  CODE
