Turbo Assembler	 Version 4.1	    02/15/21 14:29:26	    Page 1
frame.asm



      1	0000			     .model tiny
      2				     .286
      3	0000			     .code
      4
      5	      =B800		     VIDEOSEG	     equ 0b800h
      6	      =001F		     FrameStyle	     equ 00011111b
      7
      8				     org 100h
      9	0100  E8 01AF		     Start:	     call SetCharInit
     10
     11
     12	0103  B8 0600				     mov ax, 0600h
     13	0106  B9 0000				     mov cx, 0000h
     14	0109  BA FFFF				     mov dx, 0ffffh
     15	010C  B7 3F				     mov bh, 00111111b
     16	010E  CD 10				     int 10h
     17
     18	0110  B8 0007				     mov ax, 7h
     19	0113  BB 0909				     mov bx, 0909h
     20	0116  B9 0F46				     mov cx, 0F46h
     21
     22	0119  85 C0		     Main_loop:	     test ax, ax
     23	011B  74 1A				     jz	Main_loop_end
     24
     25	011D  50				     push ax
     26	011E  53				     push bx
     27	011F  51				     push cx
     28	0120  E8 008C				     call DrawFrame
     29	0123  59				     pop cx
     30	0124  5B				     pop bx
     31
     32	0125  B8 2710				     mov ax, 10000
     33	0128  E8 01F1				     call Sleep
     34
     35	012B  58				     pop ax
     36
     37	012C  FE CF				     dec bh
     38	012E  FE CB				     dec bl
     39	0130  FE C5				     inc ch
     40	0132  FE C1				     inc cl
     41	0134  48				     dec ax
     42	0135  EB E2				     jmp Main_loop
     43	0137			     Main_loop_end:
     44
     45	0137  B8 0EDA				     mov ax, 3802
     46	013A  80 C7 03				     add bh, 3
     47	013D  80 C3 05				     add bl, 5
     48						     ;call DrawCmd
     49
     50	0140  50				     push ax
     51	0141  53				     push bx
     52	0142  E8 021D				     call DrawNum10
     53
     54	0145  5B				     pop bx
     55	0146  53				     push bx
     56	0147  B1 64				     mov cl, 'd'
     57	0149  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
Turbo Assembler	 Version 4.1	    02/15/21 14:29:26	    Page 2
frame.asm



     58	014B  E8 018C				     call SetChar
     59
     60	014E  5B				     pop bx
     61	014F  58				     pop ax
     62	0150  FE C7				     inc bh
     63	0152  50				     push ax
     64	0153  53				     push bx
     65	0154  E8 022D				     call DrawNumL1
     66
     67	0157  5B				     pop bx
     68	0158  53				     push bx
     69	0159  B1 62				     mov cl, 'b'
     70	015B  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
     71	015D  E8 017A				     call SetChar
     72
     73	0160  5B				     pop bx
     74	0161  58				     pop ax
     75	0162  FE C7				     inc bh
     76	0164  50				     push ax
     77	0165  53				     push bx
     78	0166  E8 0245				     call DrawNumL3
     79
     80	0169  5B				     pop bx
     81	016A  53				     push bx
     82	016B  B1 6F				     mov cl, 'o'
     83	016D  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
     84	016F  E8 0168				     call SetChar
     85
     86	0172  5B				     pop bx
     87	0173  58				     pop ax
     88	0174  FE C7				     inc bh
     89	0176  50				     push ax
     90	0177  53				     push bx
     91	0178  E8 025E				     call DrawNumL4
     92
     93	017B  5B				     pop bx
     94	017C  53				     push bx
     95	017D  B1 78				     mov cl, 'x'
     96	017F  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
     97	0181  E8 0156				     call SetChar
     98
     99
    100	0184  BB 07D0				     mov bx, 2000
    101	0187  B9 0008				     mov cx, 8
    102	018A  E8 016B				     call Beep
    103
    104	018D  BB 0064				     mov bx, 100
    105	0190  85 DB		     Pause_loop:     test bx, bx
    106	0192  74 09				     jz	Pause_loop_end
    107
    108	0194  B8 FFFF				     mov ax, 0FFFFh
    109	0197  E8 0182				     call Sleep
    110
    111	019A  4B				     dec bx
    112	019B  EB F3				     jmp Pause_loop
    113	019D			     Pause_loop_end:
    114
Turbo Assembler	 Version 4.1	    02/15/21 14:29:26	    Page 3
frame.asm



    115	019D  B8 0600				     mov ax, 0600h
    116	01A0  B9 0000				     mov cx, 0000h
    117	01A3  BA FFFF				     mov dx, 0ffffh
    118	01A6  B7 07				     mov bh, 7h
    119	01A8  CD 10				     int 10h
    120
    121	01AA  B8 4C00				     mov ax, 4c00h
    122	01AD  CD 21				     int 21h
    123
    124
    125				     ; Same as Coords2Key, but embeddable
    126				     ; macro(result (register letter, can't be d), coords (register letter, can't be d))
    127				     Coords2KeyM     macro result, coords
    128
    129						     mov result&x, SetChar_width
    130						     mul coords&h
    131						     xor coords&h, coords&h
    132						     add result&l, coords&l
    133						     adc result&h, 0
    134						     shl result&x, 1
    135
    136						     endm
    137
    138
    139				     ; void DrawFrame(bh: fromRow, bl: fromCol,	ch: toRow, cl: toCol)
    140				     ; uses ax,	ab, cx,	dx, di,	SetChar
    141	01AF			     DrawFrame	     proc near
    142
    143	      =	[bp-1]		     DrawFrame_fromRow	     equ [bp-1]
    144	      =	[bp-2]		     DrawFrame_fromCol	     equ [bp-2]
    145	      =	[bp-3]		     DrawFrame_toRow	     equ [bp-3]
    146	      =	[bp-4]		     DrawFrame_toCol	     equ [bp-4]
    147
    148	01AF  55				     push bp
    149	01B0  8B EC				     mov bp, sp
    150	01B2  83 EC 04				     sub sp, 4
    151
    152	01B5  88 7E FF				     mov DrawFrame_fromRow, bh
    153	01B8  88 5E FE				     mov DrawFrame_fromCol, bl
    154	01BB  88 6E FD				     mov DrawFrame_toRow, ch
    155	01BE  88 4E FC				     mov DrawFrame_toCol, cl
    156
    157	01C1  B8 0600				     mov ax, 0600h
    158	01C4  8B D1				     mov dx, cx
    159	01C6  8B CB				     mov cx, bx
    160	01C8  FE C1				     inc cl
    161	01CA  FE C5				     inc ch
    162	01CC  FE C2				     inc dl
    163	01CE  FE C6				     inc dh
    164	01D0  B7 0F				     mov bh, 00001111b
    165	01D2  CD 10				     int 10h
    166
    167						     ;mov ax, '	'
    168						     ;call FillRect
    169						     ; There's a swifter way to	achieve	this
    170	01D4  FE C9				     dec cl
    171	01D6  FE CD				     dec ch
Turbo Assembler	 Version 4.1	    02/15/21 14:29:26	    Page 4
frame.asm



    172	01D8  FE CA				     dec dl
    173	01DA  FE CE				     dec dh
    174	01DC  B7 1F				     mov bh, FrameStyle
    175	01DE  CD 10				     int 10h
    176
    177	01E0  B5 1F				     mov ch, FrameStyle
    178	01E2  B1 C9				     mov cl, 201
    179	01E4  8A 7E FF				     mov bh, DrawFrame_fromRow
    180	01E7  8A 5E FE				     mov bl, DrawFrame_fromCol
    181	01EA  E8 00ED				     call SetChar
    182
    183	01ED  B5 1F				     mov ch, FrameStyle
    184	01EF  B1 BB				     mov cl, 187
    185	01F1  8A 7E FF				     mov bh, DrawFrame_fromRow
    186	01F4  8A 5E FC				     mov bl, DrawFrame_toCol
    187	01F7  E8 00E0				     call SetChar
    188
    189	01FA  B5 1F				     mov ch, FrameStyle
    190	01FC  B1 BC				     mov cl, 188
    191	01FE  8A 7E FD				     mov bh, DrawFrame_toRow
    192	0201  8A 5E FC				     mov bl, DrawFrame_toCol
    193	0204  E8 00D3				     call SetChar
    194
    195	0207  B5 1F				     mov ch, FrameStyle
    196	0209  B1 C8				     mov cl, 200
    197	020B  8A 7E FD				     mov bh, DrawFrame_toRow
    198	020E  8A 5E FE				     mov bl, DrawFrame_fromCol
    199	0211  E8 00C6				     call SetChar
    200
    201
    202						     ; es is already set by SetChar
    203	0214  FC				     cld
    204	0215  32 ED				     xor ch, ch
    205
    206	0217  8A 4E FC				     mov cl, DrawFrame_toCol
    207	021A  2A 4E FE				     sub cl, DrawFrame_fromCol
    208	021D  FE C9				     dec cl
    209	021F  F6 C1 80				     test cl, 1	SHL 7
    210	0222  75 44				     jnz DrawFrame_loopH_end
    211
    212	0224  8A 5E FE				     mov bl, DrawFrame_fromCol
    213	0227  8A 7E FF				     mov bh, DrawFrame_fromRow
    214						     Coords2KeyM a, b
1   215
1   216	022A  A1 02F4r				     mov ax, SetChar_width
1   217	022D  F6 E7				     mul bh
1   218	022F  32 FF				     xor bh, bh
1   219	0231  02 C3				     add al, bl
1   220	0233  80 D4 00				     adc ah, 0
1   221	0236  D1 E0				     shl ax, 1
1   222
    223	0238  40				     inc ax
    224	0239  40				     inc ax
    225	023A  8B F8				     mov di, ax
    226
    227	023C  B4 1F				     mov ah, FrameStyle
    228	023E  B0 CD				     mov al, 205
Turbo Assembler	 Version 4.1	    02/15/21 14:29:26	    Page 5
frame.asm



    229
    230	0240  F3> AB				     rep stosw
    231
    232
    233	0242  8A 4E FC				     mov cl, DrawFrame_toCol
    234	0245  2A 4E FE				     sub cl, DrawFrame_fromCol
    235	0248  FE C9				     dec cl
    236
    237	024A  8A 5E FE				     mov bl, DrawFrame_fromCol
    238	024D  8A 7E FD				     mov bh, DrawFrame_toRow
    239						     Coords2KeyM a, b
1   240
1   241	0250  A1 02F4r				     mov ax, SetChar_width
1   242	0253  F6 E7				     mul bh
1   243	0255  32 FF				     xor bh, bh
1   244	0257  02 C3				     add al, bl
1   245	0259  80 D4 00				     adc ah, 0
1   246	025C  D1 E0				     shl ax, 1
1   247
    248	025E  40				     inc ax
    249	025F  40				     inc ax
    250	0260  8B F8				     mov di, ax
    251
    252	0262  B4 1F				     mov ah, FrameStyle
    253	0264  B0 CD				     mov al, 205
    254
    255	0266  F3> AB				     rep stosw
    256
    257	0268			     DrawFrame_loopH_end:
    258
    259	0268  8A 4E FD				     mov cl, DrawFrame_toRow
    260	026B  2A 4E FF				     sub cl, DrawFrame_fromRow
    261	026E  FE C9				     dec cl
    262	0270  F6 C1 80				     test cl, 1	SHL 7
    263	0273  75 F3				     jnz DrawFrame_loopH_end
    264
    265	0275  8A 5E FE				     mov bl, DrawFrame_fromCol
    266	0278  8A 7E FF				     mov bh, DrawFrame_fromRow
    267	027B  FE C7				     inc bh
    268						     Coords2KeyM a, b
1   269
1   270	027D  A1 02F4r				     mov ax, SetChar_width
1   271	0280  F6 E7				     mul bh
1   272	0282  32 FF				     xor bh, bh
1   273	0284  02 C3				     add al, bl
1   274	0286  80 D4 00				     adc ah, 0
1   275	0289  D1 E0				     shl ax, 1
1   276
    277
    278	028B  8B F8				     mov di, ax
    279	028D  A1 02F4r				     mov ax, SetChar_width  ; TODO: Change previous macro params instead
    280	0290  D1 E0				     shl ax, 1
    281
    282	0292  32 FF				     xor bh, bh
    283	0294  8A 5E FC				     mov bl, DrawFrame_toCol
    284	0297  2A 5E FE				     sub bl, DrawFrame_fromCol
    285	029A  D0 E3				     shl bl, 1
Turbo Assembler	 Version 4.1	    02/15/21 14:29:26	    Page 6
frame.asm



    286	029C  73 02				     jnc DrawFrame_loopV
    287	029E  32 DB				     xor bl, bl
    288
    289	02A0			     DrawFrame_loopV:
    290	02A0  26: C7 05	1FBA			     mov word ptr es:[di],    (FrameStyle SHL 8) OR 186
    291	02A5  26: C7 01	1FBA			     mov word ptr es:[di+bx], (FrameStyle SHL 8) OR 186
    292
    293	02AA  03 F8				     add di, ax
    294	02AC  E2 F2				     loop DrawFrame_loopV
    295
    296	02AE			     DrawFrame_loopV_end:
    297
    298
    299	02AE  8B E5				     mov sp, bp
    300	02B0  5D				     pop bp
    301	02B1  C3				     ret
    302	02B2			     DrawFrame	     endp
    303
    304
    305				     ; void SetCharInit()
    306				     ; uses: ax, bx, es
    307	02B2			     SetCharInit     proc near
    308
    309	02B2  CD 11				     int 11h
    310	02B4  35 0030				     xor ax, 30h
    311	02B7  C1 E0 0B				     shl ax, 11
    312	02BA  0D B800				     or	ax, VIDEOSEG
    313	02BD  A3 02F6r				     mov SetChar_buf, ax
    314
    315	02C0  B8 0040				     mov ax, 40h
    316	02C3  8E C0				     mov es, ax
    317	02C5  26: A1 004A			     mov ax, es:4ah  ; 80 most often
    318	02C9  A3 02F4r				     mov SetChar_width,	ax
    319
    320	02CC			     SetCharInit     endp
    321
    322
    323				     ; Coords2KeyM moved up
    324
    325
    326				     ; ax: coords Coords2Key(bh: row, bl: column)
    327				     ; uses: ax, (bx), dx
    328	02CC			     Coords2Key	     proc near
    329						     Coords2KeyM a, b
1   330
1   331	02CC  A1 02F4r				     mov ax, SetChar_width
1   332	02CF  F6 E7				     mul bh
1   333	02D1  32 FF				     xor bh, bh
1   334	02D3  02 C3				     add al, bl
1   335	02D5  80 D4 00				     adc ah, 0
1   336	02D8  D1 E0				     shl ax, 1
1   337
    338	02DA			     Coords2Key	     endp
    339
    340
    341				     ; ax: index SetChar(cl: letter, ch: attrs,	bh: row, bl: column)
    342				     ; uses: ax, (bx), (cx), dx, es
Turbo Assembler	 Version 4.1	    02/15/21 14:29:26	    Page 7
frame.asm



    343	02DA			     SetChar	     proc near
    344						     Coords2KeyM a, b
1   345
1   346	02DA  A1 02F4r				     mov ax, SetChar_width
1   347	02DD  F6 E7				     mul bh
1   348	02DF  32 FF				     xor bh, bh
1   349	02E1  02 C3				     add al, bl
1   350	02E3  80 D4 00				     adc ah, 0
1   351	02E6  D1 E0				     shl ax, 1
1   352
    353
    354	02E8  93				     xchg ax, bx
    355
    356	02E9  8B 16 02F6r			     mov dx, SetChar_buf
    357	02ED  8E C2				     mov es, dx
    358	02EF  26: 89 0F				     mov es:[bx], cx
    359
    360	02F2  93				     xchg ax, bx
    361
    362	02F3  C3				     ret
    363
    364	02F4  0050		     SetChar_width   dw	80
    365	02F6  0000		     SetChar_buf     dw	0
    366	02F8			     SetChar	     endp
    367
    368
    369				     ; void Beep(bx: frequency,	cx: length)
    370				     ; uses ax,	bx, cx
    371	02F8			     Beep	     proc near
    372	02F8  B0 B6				     mov al, 182
    373	02FA  E6 43				     out 43h, al
    374	02FC  8B C3				     mov ax, bx
    375	02FE  E6 42				     out 42h, al
    376	0300  8A C4				     mov al, ah
    377	0302  E6 42				     out 42h, al
    378	0304  E4 61				     in	al, 61h
    379	0306  0C 03				     or	al, 00000011b
    380	0308  E6 61				     out 61h, al
    381	030A  8B D9				     mov bx, cx
    382
    383
    384	030C  B9 FFFF		     Beep_pause1:    mov cx, 65535
    385	030F  49		     Beep_pause2:    dec cx
    386	0310  75 FD				     jnz Beep_pause2
    387	0312  4B				     dec bx
    388	0313  75 F7				     jnz Beep_pause1
    389	0315  E4 61				     in	al, 61h
    390	0317  24 FC				     and al, 11111100b
    391	0319  E6 61				     out 61h, al
    392
    393	031B  C3				     ret
    394	031C			     Beep	     endp
    395
    396
    397				     ; TODO: Maybe use the int 15h 81h
    398				     ; void Sleep(ax: duration)
    399				     ; uses ax
Turbo Assembler	 Version 4.1	    02/15/21 14:29:26	    Page 8
frame.asm



    400	031C			     Sleep	     proc near
    401
    402	031C  85 C0		     Sleep_loop:     test ax, ax
    403	031E  74 03				     jz	Sleep_loop_end
    404	0320  48				     dec ax
    405	0321  EB F9				     jmp Sleep_loop
    406	0323			     Sleep_loop_end:
    407	0323  C3				     ret
    408	0324			     Sleep	     endp
    409
    410
    411				     ; void DrawCmd(bh:	row, bl: column)
    412				     ; uses ax,	bx, cx,	si, SetChar
    413	0324			     DrawCmd	     proc near
    414	      =	[bp-1]		     DrawCmd_i	     equ [bp-1]
    415	      =	[bp-2]		     DrawCmd_origCol equ [bp-2]
    416	0324  55				     push bp
    417	0325  8B EC				     mov bp, sp
    418	0327  83 EC 02				     sub sp, 2
    419
    420	032A  88 5E FE				     mov DrawCmd_origCol, bl
    421	032D  A0 0080				     mov al, ds:80h
    422	0330  88 46 FF				     mov DrawCmd_i, al
    423	0333  BE 0081				     mov si, 81h
    424
    425	0336  8A 46 FF		     DrawCmd_loop:   mov al, DrawCmd_i
    426	0339  84 C0				     test al, al
    427	033B  74 21				     jz	DrawCmd_loop_end
    428
    429	033D  8A 0C				     mov cl, [si]
    430	033F  80 F1 24				     xor cl, '$'
    431	0342  74 0F				     je	DrawCmd_nl
    432	0344  80 F1 24				     xor cl, '$'
    433
    434	0347  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    435	0349  53				     push bx
    436	034A  E8 FF8D				     call SetChar
    437	034D  5B				     pop bx
    438
    439	034E  FE C3				     inc bl
    440
    441	0350  EB 06 90				     jmp DrawCmd_nl_skip
    442
    443	0353  8A 5E FE		     DrawCmd_nl:     mov bl, DrawCmd_origCol
    444	0356  FE C7				     inc bh
    445
    446	0358			     DrawCmd_nl_skip:
    447	0358  46				     inc si
    448	0359  FF 4E FF				     dec word ptr DrawCmd_i
    449	035C  EB D8				     jmp DrawCmd_loop
    450	035E			     DrawCmd_loop_end:
    451
    452	035E  8B E5				     mov sp, bp
    453	0360  5D				     pop bp
    454	0361  C3				     ret
    455	0362			     DrawCmd	     endp
    456
Turbo Assembler	 Version 4.1	    02/15/21 14:29:26	    Page 9
frame.asm



    457
    458				     ; void DrawNum10(ax: num, bh: row,	bl: column)
    459				     ; uses ax,	bx, cx,	dx, SetChar
    460	0362			     DrawNum10	     proc near
    461						     ;add bl, 5
    462	0362  80 C3 11				     add bl, 17
    463
    464	0365  85 C0		     DrawNum10_loop: test ax, ax
    465	0367  74 1A				     jz	DrawNum10_loop_end
    466
    467						     ;aam  ; This is faster than division and more convenient, although	relies on ax+
    468				     being small enough
    469	0369  B1 0A				     mov cl, 10
    470	036B  32 ED				     xor ch, ch
    471	036D  33 D2				     xor dx, dx
    472	036F  F7 F1				     div cx
    473
    474	0371  80 C2 30				     add dl, '0'
    475	0374  8A CA				     mov cl, dl
    476	0376  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    477
    478	0378  50				     push ax
    479	0379  53				     push bx
    480
    481	037A  E8 FF5D				     call SetChar
    482
    483	037D  5B				     pop bx
    484	037E  58				     pop ax
    485
    486	037F  FE CB				     dec bl
    487	0381  EB E2				     jmp DrawNum10_loop
    488	0383			     DrawNum10_loop_end:
    489
    490	0383  C3				     ret
    491	0384			     DrawNum10	     endp
    492
    493
    494				     ; macro(base)
    495				     ; void DrawNumL&base(ax: num, bh: row, bl:	column)
    496				     ; uses ax,	bx, cx,	SetChar
    497				     DrawNumLB	     macro base
    498
    499				     DrawNumL&base   proc near
    500						     ;add bl, base
    501						     add bl, 17
    502
    503				     DrawNumL&base&_loop:
    504						     test ax, ax
    505						     jz	DrawNumL&base&_loop_end
    506
    507						     mov cl, al
    508						     and cl, (1	SHL base) - 1
    509
    510						     cmp cl, 10
    511						     jae DrawNumL&base&_bigDigit
    512
    513						     add cl, '0'
Turbo Assembler	 Version 4.1	    02/15/21 14:29:26	    Page 10
frame.asm



    514
    515						     jmp DrawNumL&base&_notBigDigit
    516				     DrawNumL&base&_bigDigit:
    517						     add cl, 'A'-10
    518				     DrawNumL&base&_notBigDigit:
    519
    520						     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    521
    522						     shr ax, base
    523
    524						     push ax
    525						     push bx
    526
    527						     call SetChar
    528
    529						     pop bx
    530						     pop ax
    531
    532						     dec bl
    533						     jmp DrawNumL&base&_loop
    534				     DrawNumL&base&_loop_end:
    535
    536						     ret
    537				     DrawNumL&base&  endp
    538
    539						     endm
    540
    541
    542
    543				     DrawNumLB	     1 ;2
1   544
1   545	0384			     DrawNumL1	     proc near
1   546						     ;add bl, 1
1   547	0384  80 C3 11				     add bl, 17
1   548
1   549	0387			     DrawNumL1_loop:
1   550	0387  85 C0				     test ax, ax
1   551	0389  74 22				     jz	DrawNumL1_loop_end
1   552
1   553	038B  8A C8				     mov cl, al
1   554	038D  80 E1 01				     and cl, (1	SHL 1) - 1
1   555
1   556	0390  80 F9 0A				     cmp cl, 10
1   557	0393  73 06				     jae DrawNumL1_bigDigit
1   558
1   559	0395  80 C1 30				     add cl, '0'
1   560
1   561	0398  EB 04 90				     jmp DrawNumL1_notBigDigit
1   562	039B			     DrawNumL1_bigDigit:
1   563	039B  80 C1 37				     add cl, 'A'-10
1   564	039E			     DrawNumL1_notBigDigit:
1   565
1   566	039E  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
1   567
1   568	03A0  D1 E8				     shr ax, 1
1   569
1   570	03A2  50				     push ax
Turbo Assembler	 Version 4.1	    02/15/21 14:29:26	    Page 11
frame.asm



1   571	03A3  53				     push bx
1   572
1   573	03A4  E8 FF33				     call SetChar
1   574
1   575	03A7  5B				     pop bx
1   576	03A8  58				     pop ax
1   577
1   578	03A9  FE CB				     dec bl
1   579	03AB  EB DA				     jmp DrawNumL1_loop
1   580	03AD			     DrawNumL1_loop_end:
1   581
1   582	03AD  C3				     ret
1   583	03AE			     DrawNumL1	     endp
1   584
    585				     DrawNumLB	     3 ;3
1   586
1   587	03AE			     DrawNumL3	     proc near
1   588						     ;add bl, 3
1   589	03AE  80 C3 11				     add bl, 17
1   590
1   591	03B1			     DrawNumL3_loop:
1   592	03B1  85 C0				     test ax, ax
1   593	03B3  74 23				     jz	DrawNumL3_loop_end
1   594
1   595	03B5  8A C8				     mov cl, al
1   596	03B7  80 E1 07				     and cl, (1	SHL 3) - 1
1   597
1   598	03BA  80 F9 0A				     cmp cl, 10
1   599	03BD  73 06				     jae DrawNumL3_bigDigit
1   600
1   601	03BF  80 C1 30				     add cl, '0'
1   602
1   603	03C2  EB 04 90				     jmp DrawNumL3_notBigDigit
1   604	03C5			     DrawNumL3_bigDigit:
1   605	03C5  80 C1 37				     add cl, 'A'-10
1   606	03C8			     DrawNumL3_notBigDigit:
1   607
1   608	03C8  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
1   609
1   610	03CA  C1 E8 03				     shr ax, 3
1   611
1   612	03CD  50				     push ax
1   613	03CE  53				     push bx
1   614
1   615	03CF  E8 FF08				     call SetChar
1   616
1   617	03D2  5B				     pop bx
1   618	03D3  58				     pop ax
1   619
1   620	03D4  FE CB				     dec bl
1   621	03D6  EB D9				     jmp DrawNumL3_loop
1   622	03D8			     DrawNumL3_loop_end:
1   623
1   624	03D8  C3				     ret
1   625	03D9			     DrawNumL3	     endp
1   626
    627				     DrawNumLB	     4 ;4
Turbo Assembler	 Version 4.1	    02/15/21 14:29:26	    Page 12
frame.asm



1   628
1   629	03D9			     DrawNumL4	     proc near
1   630						     ;add bl, 4
1   631	03D9  80 C3 11				     add bl, 17
1   632
1   633	03DC			     DrawNumL4_loop:
1   634	03DC  85 C0				     test ax, ax
1   635	03DE  74 23				     jz	DrawNumL4_loop_end
1   636
1   637	03E0  8A C8				     mov cl, al
1   638	03E2  80 E1 0F				     and cl, (1	SHL 4) - 1
1   639
1   640	03E5  80 F9 0A				     cmp cl, 10
1   641	03E8  73 06				     jae DrawNumL4_bigDigit
1   642
1   643	03EA  80 C1 30				     add cl, '0'
1   644
1   645	03ED  EB 04 90				     jmp DrawNumL4_notBigDigit
1   646	03F0			     DrawNumL4_bigDigit:
1   647	03F0  80 C1 37				     add cl, 'A'-10
1   648	03F3			     DrawNumL4_notBigDigit:
1   649
1   650	03F3  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
1   651
1   652	03F5  C1 E8 04				     shr ax, 4
1   653
1   654	03F8  50				     push ax
1   655	03F9  53				     push bx
1   656
1   657	03FA  E8 FEDD				     call SetChar
1   658
1   659	03FD  5B				     pop bx
1   660	03FE  58				     pop ax
1   661
1   662	03FF  FE CB				     dec bl
1   663	0401  EB D9				     jmp DrawNumL4_loop
1   664	0403			     DrawNumL4_loop_end:
1   665
1   666	0403  C3				     ret
1   667	0404			     DrawNumL4	     endp
1   668
    669
    670
    671	0404			     .data
    672
    673
    674				     end Start
Turbo Assembler	 Version 4.1	    02/15/21 14:29:26	    Page 13
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/15/21"
??FILENAME			  Text	 "frame	  "
??TIME				  Text	 "14:29:26"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 FRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BEEP				  Near	 DGROUP:02F8
BEEP_PAUSE1			  Near	 DGROUP:030C
BEEP_PAUSE2			  Near	 DGROUP:030F
COORDS2KEY			  Near	 DGROUP:02CC
DRAWCMD				  Near	 DGROUP:0324
DRAWCMD_I			  Text	 [bp-1]
DRAWCMD_LOOP			  Near	 DGROUP:0336
DRAWCMD_LOOP_END		  Near	 DGROUP:035E
DRAWCMD_NL			  Near	 DGROUP:0353
DRAWCMD_NL_SKIP			  Near	 DGROUP:0358
DRAWCMD_ORIGCOL			  Text	 [bp-2]
DRAWFRAME			  Near	 DGROUP:01AF
DRAWFRAME_FROMCOL		  Text	 [bp-2]
DRAWFRAME_FROMROW		  Text	 [bp-1]
DRAWFRAME_LOOPH_END		  Near	 DGROUP:0268
DRAWFRAME_LOOPV			  Near	 DGROUP:02A0
DRAWFRAME_LOOPV_END		  Near	 DGROUP:02AE
DRAWFRAME_TOCOL			  Text	 [bp-4]
DRAWFRAME_TOROW			  Text	 [bp-3]
DRAWNUM10			  Near	 DGROUP:0362
DRAWNUM10_LOOP			  Near	 DGROUP:0365
DRAWNUM10_LOOP_END		  Near	 DGROUP:0383
DRAWNUML1			  Near	 DGROUP:0384
DRAWNUML1_BIGDIGIT		  Near	 DGROUP:039B
DRAWNUML1_LOOP			  Near	 DGROUP:0387
DRAWNUML1_LOOP_END		  Near	 DGROUP:03AD
DRAWNUML1_NOTBIGDIGIT		  Near	 DGROUP:039E
DRAWNUML3			  Near	 DGROUP:03AE
DRAWNUML3_BIGDIGIT		  Near	 DGROUP:03C5
DRAWNUML3_LOOP			  Near	 DGROUP:03B1
DRAWNUML3_LOOP_END		  Near	 DGROUP:03D8
DRAWNUML3_NOTBIGDIGIT		  Near	 DGROUP:03C8
DRAWNUML4			  Near	 DGROUP:03D9
DRAWNUML4_BIGDIGIT		  Near	 DGROUP:03F0
DRAWNUML4_LOOP			  Near	 DGROUP:03DC
DRAWNUML4_LOOP_END		  Near	 DGROUP:0403
DRAWNUML4_NOTBIGDIGIT		  Near	 DGROUP:03F3
FRAMESTYLE			  Number 001F
Turbo Assembler	 Version 4.1	    02/15/21 14:29:26	    Page 14
Symbol Table



MAIN_LOOP			  Near	 DGROUP:0119
MAIN_LOOP_END			  Near	 DGROUP:0137
PAUSE_LOOP			  Near	 DGROUP:0190
PAUSE_LOOP_END			  Near	 DGROUP:019D
SETCHAR				  Near	 DGROUP:02DA
SETCHARINIT			  Near	 DGROUP:02B2
SETCHAR_BUF			  Word	 DGROUP:02F6
SETCHAR_WIDTH			  Word	 DGROUP:02F4
SLEEP				  Near	 DGROUP:031C
SLEEP_LOOP			  Near	 DGROUP:031C
SLEEP_LOOP_END			  Near	 DGROUP:0323
START				  Near	 DGROUP:0100
VIDEOSEG			  Number B800

Macro Name

COORDS2KEYM
DRAWNUMLB

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0404 Word	  Public  CODE
