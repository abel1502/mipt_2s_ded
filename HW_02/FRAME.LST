Turbo Assembler	 Version 4.1	    02/15/21 12:41:17	    Page 1
frame.asm



      1	0000			     .model tiny
      2				     .286
      3	0000			     .code
      4
      5	      =B800		     VIDEOSEG	     equ 0b800h
      6	      =001F		     FrameStyle	     equ 00011111b
      7
      8				     org 100h
      9	0100  E8 01B2		     Start:	     call SetCharInit
     10
     11
     12	0103  B8 0600				     mov ax, 0600h
     13	0106  B9 0000				     mov cx, 0000h
     14	0109  BA FFFF				     mov dx, 0ffffh
     15	010C  B7 3F				     mov bh, 00111111b
     16	010E  CD 10				     int 10h
     17
     18	0110  B8 0007				     mov ax, 7h
     19	0113  BB 0909				     mov bx, 0909h
     20	0116  B9 0F46				     mov cx, 0F46h
     21
     22	0119  85 C0		     Main_loop:	     test ax, ax
     23	011B  74 1A				     jz	Main_loop_end
     24
     25	011D  50				     push ax
     26	011E  53				     push bx
     27	011F  51				     push cx
     28	0120  E8 008C				     call DrawFrame
     29	0123  59				     pop cx
     30	0124  5B				     pop bx
     31
     32	0125  B8 2710				     mov ax, 10000
     33	0128  E8 01E0				     call Sleep
     34
     35	012B  58				     pop ax
     36
     37	012C  FE CF				     dec bh
     38	012E  FE CB				     dec bl
     39	0130  FE C5				     inc ch
     40	0132  FE C1				     inc cl
     41	0134  48				     dec ax
     42	0135  EB E2				     jmp Main_loop
     43	0137			     Main_loop_end:
     44
     45	0137  B8 0EDA				     mov ax, 3802
     46	013A  80 C7 03				     add bh, 3
     47	013D  80 C3 05				     add bl, 5
     48						     ;call DrawCmd
     49
     50	0140  50				     push ax
     51	0141  53				     push bx
     52	0142  E8 020C				     call DrawNum10
     53
     54	0145  5B				     pop bx
     55	0146  53				     push bx
     56	0147  B1 64				     mov cl, 'd'
     57	0149  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
Turbo Assembler	 Version 4.1	    02/15/21 12:41:17	    Page 2
frame.asm



     58	014B  E8 0181				     call SetChar
     59
     60	014E  5B				     pop bx
     61	014F  58				     pop ax
     62	0150  FE C7				     inc bh
     63	0152  50				     push ax
     64	0153  53				     push bx
     65	0154  E8 021C				     call DrawNumL1
     66
     67	0157  5B				     pop bx
     68	0158  53				     push bx
     69	0159  B1 62				     mov cl, 'b'
     70	015B  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
     71	015D  E8 016F				     call SetChar
     72
     73	0160  5B				     pop bx
     74	0161  58				     pop ax
     75	0162  FE C7				     inc bh
     76	0164  50				     push ax
     77	0165  53				     push bx
     78	0166  E8 0234				     call DrawNumL3
     79
     80	0169  5B				     pop bx
     81	016A  53				     push bx
     82	016B  B1 6F				     mov cl, 'o'
     83	016D  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
     84	016F  E8 015D				     call SetChar
     85
     86	0172  5B				     pop bx
     87	0173  58				     pop ax
     88	0174  FE C7				     inc bh
     89	0176  50				     push ax
     90	0177  53				     push bx
     91	0178  E8 024D				     call DrawNumL4
     92
     93	017B  5B				     pop bx
     94	017C  53				     push bx
     95	017D  B1 78				     mov cl, 'x'
     96	017F  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
     97	0181  E8 014B				     call SetChar
     98
     99
    100	0184  BB 07D0				     mov bx, 2000
    101	0187  B9 0008				     mov cx, 8
    102	018A  E8 015A				     call Beep
    103
    104	018D  BB 0064				     mov bx, 100
    105	0190  85 DB		     Pause_loop:     test bx, bx
    106	0192  74 09				     jz	Pause_loop_end
    107
    108	0194  B8 FFFF				     mov ax, 0FFFFh
    109	0197  E8 0171				     call Sleep
    110
    111	019A  4B				     dec bx
    112	019B  EB F3				     jmp Pause_loop
    113	019D			     Pause_loop_end:
    114
Turbo Assembler	 Version 4.1	    02/15/21 12:41:17	    Page 3
frame.asm



    115	019D  B8 0600				     mov ax, 0600h
    116	01A0  B9 0000				     mov cx, 0000h
    117	01A3  BA FFFF				     mov dx, 0ffffh
    118	01A6  B7 07				     mov bh, 7h
    119	01A8  CD 10				     int 10h
    120
    121	01AA  B8 4C00				     mov ax, 4c00h
    122	01AD  CD 21				     int 21h
    123
    124
    125				     ; void DrawFrame(bh: fromRow, bl: fromCol,	ch: toRow, cl: toCol)
    126				     ; uses ax,	ab, cx,	dx, di,	SetChar
    127	01AF			     DrawFrame	     proc near
    128
    129	      =	[bp-1]		     DrawFrame_fromRow	     equ [bp-1]
    130	      =	[bp-2]		     DrawFrame_fromCol	     equ [bp-2]
    131	      =	[bp-3]		     DrawFrame_toRow	     equ [bp-3]
    132	      =	[bp-4]		     DrawFrame_toCol	     equ [bp-4]
    133
    134	01AF  55				     push bp
    135	01B0  8B EC				     mov bp, sp
    136	01B2  83 EC 04				     sub sp, 4
    137
    138	01B5  88 7E FF				     mov DrawFrame_fromRow, bh
    139	01B8  88 5E FE				     mov DrawFrame_fromCol, bl
    140	01BB  88 6E FD				     mov DrawFrame_toRow, ch
    141	01BE  88 4E FC				     mov DrawFrame_toCol, cl
    142
    143	01C1  B8 0600				     mov ax, 0600h
    144	01C4  8B D1				     mov dx, cx
    145	01C6  8B CB				     mov cx, bx
    146	01C8  FE C1				     inc cl
    147	01CA  FE C5				     inc ch
    148	01CC  FE C2				     inc dl
    149	01CE  FE C6				     inc dh
    150	01D0  B7 0F				     mov bh, 00001111b
    151	01D2  CD 10				     int 10h
    152
    153						     ;mov ax, '	'
    154						     ;call FillRect
    155						     ; There's a swifter way to	achieve	this
    156	01D4  FE C9				     dec cl
    157	01D6  FE CD				     dec ch
    158	01D8  FE CA				     dec dl
    159	01DA  FE CE				     dec dh
    160	01DC  B7 1F				     mov bh, FrameStyle
    161	01DE  CD 10				     int 10h
    162
    163	01E0  B5 1F				     mov ch, FrameStyle
    164	01E2  B1 C9				     mov cl, 201
    165	01E4  8A 7E FF				     mov bh, DrawFrame_fromRow
    166	01E7  8A 5E FE				     mov bl, DrawFrame_fromCol
    167	01EA  E8 00E2				     call SetChar
    168
    169	01ED  B5 1F				     mov ch, FrameStyle
    170	01EF  B1 BB				     mov cl, 187
    171	01F1  8A 7E FF				     mov bh, DrawFrame_fromRow
Turbo Assembler	 Version 4.1	    02/15/21 12:41:17	    Page 4
frame.asm



    172	01F4  8A 5E FC				     mov bl, DrawFrame_toCol
    173	01F7  E8 00D5				     call SetChar
    174
    175	01FA  B5 1F				     mov ch, FrameStyle
    176	01FC  B1 BC				     mov cl, 188
    177	01FE  8A 7E FD				     mov bh, DrawFrame_toRow
    178	0201  8A 5E FC				     mov bl, DrawFrame_toCol
    179	0204  E8 00C8				     call SetChar
    180
    181	0207  B5 1F				     mov ch, FrameStyle
    182	0209  B1 C8				     mov cl, 200
    183	020B  8A 7E FD				     mov bh, DrawFrame_toRow
    184	020E  8A 5E FE				     mov bl, DrawFrame_fromCol
    185	0211  E8 00BB				     call SetChar
    186
    187	0214  8A 46 FE				     mov al, DrawFrame_fromCol
    188	0217  32 E4				     xor ah, ah
    189	0219  8B F8				     mov di, ax
    190	021B  47				     inc di
    191
    192	021C			     DrawFrame_loopH:
    193	021C  8A 46 FC				     mov al, DrawFrame_toCol
    194	021F  32 E4				     xor ah, ah
    195	0221  3B F8				     cmp di, ax
    196	0223  73 1B				     jae DrawFrame_loopH_end
    197
    198	0225  B5 1F				     mov ch, FrameStyle
    199	0227  B1 CD				     mov cl, 205
    200	0229  8B DF				     mov bx, di
    201	022B  8A 7E FF				     mov bh, DrawFrame_fromRow
    202	022E  E8 009E				     call SetChar
    203
    204	0231  B5 1F				     mov ch, FrameStyle	 ; TODO: Encapsulate as	framestyle
    205	0233  B1 CD				     mov cl, 205
    206	0235  8B DF				     mov bx, di
    207	0237  8A 7E FD				     mov bh, DrawFrame_toRow
    208	023A  E8 0092				     call SetChar
    209
    210	023D  47				     inc di
    211	023E  EB DC				     jmp DrawFrame_loopH
    212	0240			     DrawFrame_loopH_end:
    213
    214	0240  8A 46 FF				     mov al, DrawFrame_fromRow
    215	0243  32 E4				     xor ah, ah
    216	0245  8B F8				     mov di, ax
    217	0247  47				     inc di
    218
    219	0248			     DrawFrame_loopV:
    220	0248  8A 46 FD				     mov al, DrawFrame_toRow
    221	024B  32 E4				     xor ah, ah
    222	024D  3B F8				     cmp di, ax
    223	024F  73 21				     jae DrawFrame_loopV_end
    224
    225	0251  B5 1F				     mov ch, FrameStyle
    226	0253  B1 BA				     mov cl, 186
    227	0255  8B DF				     mov bx, di
    228	0257  C1 E3 08				     shl bx, 8
Turbo Assembler	 Version 4.1	    02/15/21 12:41:17	    Page 5
frame.asm



    229	025A  8A 5E FE				     mov bl, DrawFrame_fromCol
    230	025D  E8 006F				     call SetChar
    231
    232	0260  B5 1F				     mov ch, FrameStyle
    233	0262  B1 BA				     mov cl, 186
    234	0264  8B DF				     mov bx, di
    235	0266  C1 E3 08				     shl bx, 8
    236	0269  8A 5E FC				     mov bl, DrawFrame_toCol
    237	026C  E8 0060				     call SetChar
    238
    239	026F  47				     inc di
    240	0270  EB D6				     jmp DrawFrame_loopV
    241	0272			     DrawFrame_loopV_end:
    242
    243
    244	0272  8B E5				     mov sp, bp
    245	0274  5D				     pop bp
    246	0275  C3				     ret
    247	0276			     DrawFrame	     endp
    248
    249
    250				     ; void FillRect(ax: symb, bh: fromRow, bl:	fromCol, ch: toRow, cl:	toCol)
    251				     ; uses ax,	bx, cx,	SetChar
    252	0276			     FillRect	     proc near
    253	      =	[bp-1]		     FillRect_fromRow	     equ [bp-1]
    254	      =	[bp-2]		     FillRect_fromCol	     equ [bp-2]
    255	      =	[bp-3]		     FillRect_toRow	     equ [bp-3]
    256	      =	[bp-4]		     FillRect_toCol	     equ [bp-4]
    257	      =	[bp-6]		     FillRect_symb	     equ [bp-6]
    258	0276  55				     push bp
    259	0277  8B EC				     mov bp, sp
    260	0279  83 EC 06				     sub sp, 6
    261
    262	027C  88 7E FF				     mov FillRect_fromRow, bh
    263	027F  88 5E FE				     mov FillRect_fromCol, bl
    264	0282  88 6E FD				     mov FillRect_toRow, ch
    265	0285  88 4E FC				     mov FillRect_toCol, cl
    266	0288  89 46 FA				     mov FillRect_symb,	ax
    267
    268	028B  8A 66 FF				     mov ah, FillRect_fromRow
    269
    270	028E  8A 7E FD		     FillRect_loopV: mov bh, FillRect_toRow
    271	0291  3A E7				     cmp ah, bh
    272	0293  73 1C				     jae FillRect_loopV_end
    273
    274	0295  8A 46 FE				     mov al, FillRect_fromCol
    275	0298  8A 5E FC			     FillRect_loopH: mov bl, FillRect_toCol
    276	029B  3A C3					     cmp al, bl
    277	029D  73 0E					     jae FillRect_loopH_end
    278
    279	029F  8B 4E FA					     mov cx, FillRect_symb
    280	02A2  8B D8					     mov bx, ax
    281	02A4  50					     push ax
    282	02A5  E8 0027					     call SetChar
    283	02A8  58					     pop ax
    284
    285	02A9  FE C0					     inc al
Turbo Assembler	 Version 4.1	    02/15/21 12:41:17	    Page 6
frame.asm



    286	02AB  EB EB					     jmp FillRect_loopH
    287	02AD				     FillRect_loopH_end:
    288
    289	02AD  FE C4				     inc ah
    290	02AF  EB DD				     jmp FillRect_loopV
    291	02B1			     FillRect_loopV_end:
    292
    293	02B1  8B E5				     mov sp, bp
    294	02B3  5D				     pop bp
    295	02B4  C3				     ret
    296	02B5			     FillRect	     endp
    297
    298
    299				     ; void SetCharInit()
    300				     ; uses: ax, bx, es
    301	02B5			     SetCharInit     proc near
    302
    303	02B5  CD 11				     int 11h
    304	02B7  35 0030				     xor ax, 30h
    305	02BA  C1 E0 0B				     shl ax, 11
    306	02BD  0D B800				     or	ax, VIDEOSEG
    307	02C0  A3 02E5r				     mov SetChar_buf, ax
    308
    309	02C3  B8 0040				     mov ax, 40h
    310	02C6  8E C0				     mov es, ax
    311	02C8  26: A1 004A			     mov ax, es:4ah  ; 80 most often
    312	02CC  A3 02E3r				     mov SetChar_width,	ax
    313
    314	02CF			     SetCharInit     endp
    315
    316
    317				     ; void SetChar(cl:	letter,	ch: attrs, bh: row, bl:	column)
    318				     ; uses: ax, bx, cx, dx, es
    319	02CF			     SetChar	     proc near
    320	02CF  A1 02E3r				     mov ax, SetChar_width
    321	02D2  F6 E7				     mul bh
    322	02D4  32 FF				     xor bh, bh
    323	02D6  03 D8				     add bx, ax
    324	02D8  D1 E3				     shl bx, 1
    325
    326	02DA  A1 02E5r				     mov ax, SetChar_buf
    327	02DD  8E C0				     mov es, ax
    328	02DF  26: 89 0F				     mov es:[bx], cx
    329
    330	02E2  C3				     ret
    331
    332	02E3  0050		     SetChar_width   dw	80
    333	02E5  0000		     SetChar_buf     dw	0
    334	02E7			     SetChar	     endp
    335
    336
    337				     ; void Beep(bx: frequency,	cx: length)
    338				     ; uses ax,	bx, cx
    339	02E7			     Beep	     proc near
    340	02E7  B0 B6				     mov al, 182
    341	02E9  E6 43				     out 43h, al
    342	02EB  8B C3				     mov ax, bx
Turbo Assembler	 Version 4.1	    02/15/21 12:41:17	    Page 7
frame.asm



    343	02ED  E6 42				     out 42h, al
    344	02EF  8A C4				     mov al, ah
    345	02F1  E6 42				     out 42h, al
    346	02F3  E4 61				     in	al, 61h
    347	02F5  0C 03				     or	al, 00000011b
    348	02F7  E6 61				     out 61h, al
    349	02F9  8B D9				     mov bx, cx
    350
    351
    352	02FB  B9 FFFF		     Beep_pause1:    mov cx, 65535
    353	02FE  49		     Beep_pause2:    dec cx
    354	02FF  75 FD				     jnz Beep_pause2
    355	0301  4B				     dec bx
    356	0302  75 F7				     jnz Beep_pause1
    357	0304  E4 61				     in	al, 61h
    358	0306  24 FC				     and al, 11111100b
    359	0308  E6 61				     out 61h, al
    360
    361	030A  C3				     ret
    362	030B			     Beep	     endp
    363
    364
    365				     ; TODO: Maybe use the int 15h 81h
    366				     ; void Sleep(ax: duration)
    367				     ; uses ax
    368	030B			     Sleep	     proc near
    369
    370	030B  85 C0		     Sleep_loop:     test ax, ax
    371	030D  74 03				     jz	Sleep_loop_end
    372	030F  48				     dec ax
    373	0310  EB F9				     jmp Sleep_loop
    374	0312			     Sleep_loop_end:
    375	0312  C3				     ret
    376	0313			     Sleep	     endp
    377
    378
    379				     ; void DrawCmd(bh:	row, bl: column)
    380				     ; uses ax,	bx, cx,	si, SetChar
    381	0313			     DrawCmd	     proc near
    382	      =	[bp-1]		     DrawCmd_i	     equ [bp-1]
    383	      =	[bp-2]		     DrawCmd_origCol equ [bp-2]
    384	0313  55				     push bp
    385	0314  8B EC				     mov bp, sp
    386	0316  83 EC 02				     sub sp, 2
    387
    388	0319  88 5E FE				     mov DrawCmd_origCol, bl
    389	031C  A0 0080				     mov al, ds:80h
    390	031F  88 46 FF				     mov DrawCmd_i, al
    391	0322  BE 0081				     mov si, 81h
    392
    393	0325  8A 46 FF		     DrawCmd_loop:   mov al, DrawCmd_i
    394	0328  84 C0				     test al, al
    395	032A  74 21				     jz	DrawCmd_loop_end
    396
    397	032C  8A 0C				     mov cl, [si]
    398	032E  80 F1 24				     xor cl, '$'
    399	0331  74 0F				     je	DrawCmd_nl
Turbo Assembler	 Version 4.1	    02/15/21 12:41:17	    Page 8
frame.asm



    400	0333  80 F1 24				     xor cl, '$'
    401
    402	0336  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    403	0338  53				     push bx
    404	0339  E8 FF93				     call SetChar
    405	033C  5B				     pop bx
    406
    407	033D  FE C3				     inc bl
    408
    409	033F  EB 06 90				     jmp DrawCmd_nl_skip
    410
    411	0342  8A 5E FE		     DrawCmd_nl:     mov bl, DrawCmd_origCol
    412	0345  FE C7				     inc bh
    413
    414	0347			     DrawCmd_nl_skip:
    415	0347  46				     inc si
    416	0348  FF 4E FF				     dec word ptr DrawCmd_i
    417	034B  EB D8				     jmp DrawCmd_loop
    418	034D			     DrawCmd_loop_end:
    419
    420	034D  8B E5				     mov sp, bp
    421	034F  5D				     pop bp
    422	0350  C3				     ret
    423	0351			     DrawCmd	     endp
    424
    425
    426				     ; void DrawNum10(ax: num, bh: row,	bl: column)
    427				     ; uses ax,	bx, cx,	dx, SetChar
    428	0351			     DrawNum10	     proc near
    429						     ;add bl, 5
    430	0351  80 C3 11				     add bl, 17
    431
    432	0354  85 C0		     DrawNum10_loop: test ax, ax
    433	0356  74 1A				     jz	DrawNum10_loop_end
    434
    435						     ;aam  ; This is faster than division and more convenient, although	relies on ax+
    436				     being small enough
    437	0358  B1 0A				     mov cl, 10
    438	035A  32 ED				     xor ch, ch
    439	035C  33 D2				     xor dx, dx
    440	035E  F7 F1				     div cx
    441
    442	0360  80 C2 30				     add dl, '0'
    443	0363  8A CA				     mov cl, dl
    444	0365  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    445
    446	0367  50				     push ax
    447	0368  53				     push bx
    448
    449	0369  E8 FF63				     call SetChar
    450
    451	036C  5B				     pop bx
    452	036D  58				     pop ax
    453
    454	036E  FE CB				     dec bl
    455	0370  EB E2				     jmp DrawNum10_loop
    456	0372			     DrawNum10_loop_end:
Turbo Assembler	 Version 4.1	    02/15/21 12:41:17	    Page 9
frame.asm



    457
    458	0372  C3				     ret
    459	0373			     DrawNum10	     endp
    460
    461
    462				     ; macro(base)
    463				     ; void DrawNumL&base(ax: num, bh: row, bl:	column)
    464				     ; uses ax,	bx, cx,	SetChar
    465				     DrawNumLB	     macro base
    466
    467				     DrawNumL&base   proc near
    468						     ;add bl, base
    469						     add bl, 17
    470
    471				     DrawNumL&base&_loop:
    472						     test ax, ax
    473						     jz	DrawNumL&base&_loop_end
    474
    475						     mov cl, al
    476						     and cl, (1	SHL base) - 1
    477
    478						     cmp cl, 10
    479						     jae DrawNumL&base&_bigDigit
    480
    481						     add cl, '0'
    482
    483						     jmp DrawNumL&base&_notBigDigit
    484				     DrawNumL&base&_bigDigit:
    485						     add cl, 'A'-10
    486				     DrawNumL&base&_notBigDigit:
    487
    488						     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    489
    490						     shr ax, base
    491
    492						     push ax
    493						     push bx
    494
    495						     call SetChar
    496
    497						     pop bx
    498						     pop ax
    499
    500						     dec bl
    501						     jmp DrawNumL&base&_loop
    502				     DrawNumL&base&_loop_end:
    503
    504						     ret
    505				     DrawNumL&base&  endp
    506
    507						     endm
    508
    509
    510
    511				     DrawNumLB	     1 ;2
1   512
1   513	0373			     DrawNumL1	     proc near
Turbo Assembler	 Version 4.1	    02/15/21 12:41:17	    Page 10
frame.asm



1   514						     ;add bl, 1
1   515	0373  80 C3 11				     add bl, 17
1   516
1   517	0376			     DrawNumL1_loop:
1   518	0376  85 C0				     test ax, ax
1   519	0378  74 22				     jz	DrawNumL1_loop_end
1   520
1   521	037A  8A C8				     mov cl, al
1   522	037C  80 E1 01				     and cl, (1	SHL 1) - 1
1   523
1   524	037F  80 F9 0A				     cmp cl, 10
1   525	0382  73 06				     jae DrawNumL1_bigDigit
1   526
1   527	0384  80 C1 30				     add cl, '0'
1   528
1   529	0387  EB 04 90				     jmp DrawNumL1_notBigDigit
1   530	038A			     DrawNumL1_bigDigit:
1   531	038A  80 C1 37				     add cl, 'A'-10
1   532	038D			     DrawNumL1_notBigDigit:
1   533
1   534	038D  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
1   535
1   536	038F  D1 E8				     shr ax, 1
1   537
1   538	0391  50				     push ax
1   539	0392  53				     push bx
1   540
1   541	0393  E8 FF39				     call SetChar
1   542
1   543	0396  5B				     pop bx
1   544	0397  58				     pop ax
1   545
1   546	0398  FE CB				     dec bl
1   547	039A  EB DA				     jmp DrawNumL1_loop
1   548	039C			     DrawNumL1_loop_end:
1   549
1   550	039C  C3				     ret
1   551	039D			     DrawNumL1	     endp
1   552
    553				     DrawNumLB	     3 ;3
1   554
1   555	039D			     DrawNumL3	     proc near
1   556						     ;add bl, 3
1   557	039D  80 C3 11				     add bl, 17
1   558
1   559	03A0			     DrawNumL3_loop:
1   560	03A0  85 C0				     test ax, ax
1   561	03A2  74 23				     jz	DrawNumL3_loop_end
1   562
1   563	03A4  8A C8				     mov cl, al
1   564	03A6  80 E1 07				     and cl, (1	SHL 3) - 1
1   565
1   566	03A9  80 F9 0A				     cmp cl, 10
1   567	03AC  73 06				     jae DrawNumL3_bigDigit
1   568
1   569	03AE  80 C1 30				     add cl, '0'
1   570
Turbo Assembler	 Version 4.1	    02/15/21 12:41:17	    Page 11
frame.asm



1   571	03B1  EB 04 90				     jmp DrawNumL3_notBigDigit
1   572	03B4			     DrawNumL3_bigDigit:
1   573	03B4  80 C1 37				     add cl, 'A'-10
1   574	03B7			     DrawNumL3_notBigDigit:
1   575
1   576	03B7  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
1   577
1   578	03B9  C1 E8 03				     shr ax, 3
1   579
1   580	03BC  50				     push ax
1   581	03BD  53				     push bx
1   582
1   583	03BE  E8 FF0E				     call SetChar
1   584
1   585	03C1  5B				     pop bx
1   586	03C2  58				     pop ax
1   587
1   588	03C3  FE CB				     dec bl
1   589	03C5  EB D9				     jmp DrawNumL3_loop
1   590	03C7			     DrawNumL3_loop_end:
1   591
1   592	03C7  C3				     ret
1   593	03C8			     DrawNumL3	     endp
1   594
    595				     DrawNumLB	     4 ;4
1   596
1   597	03C8			     DrawNumL4	     proc near
1   598						     ;add bl, 4
1   599	03C8  80 C3 11				     add bl, 17
1   600
1   601	03CB			     DrawNumL4_loop:
1   602	03CB  85 C0				     test ax, ax
1   603	03CD  74 23				     jz	DrawNumL4_loop_end
1   604
1   605	03CF  8A C8				     mov cl, al
1   606	03D1  80 E1 0F				     and cl, (1	SHL 4) - 1
1   607
1   608	03D4  80 F9 0A				     cmp cl, 10
1   609	03D7  73 06				     jae DrawNumL4_bigDigit
1   610
1   611	03D9  80 C1 30				     add cl, '0'
1   612
1   613	03DC  EB 04 90				     jmp DrawNumL4_notBigDigit
1   614	03DF			     DrawNumL4_bigDigit:
1   615	03DF  80 C1 37				     add cl, 'A'-10
1   616	03E2			     DrawNumL4_notBigDigit:
1   617
1   618	03E2  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
1   619
1   620	03E4  C1 E8 04				     shr ax, 4
1   621
1   622	03E7  50				     push ax
1   623	03E8  53				     push bx
1   624
1   625	03E9  E8 FEE3				     call SetChar
1   626
1   627	03EC  5B				     pop bx
Turbo Assembler	 Version 4.1	    02/15/21 12:41:17	    Page 12
frame.asm



1   628	03ED  58				     pop ax
1   629
1   630	03EE  FE CB				     dec bl
1   631	03F0  EB D9				     jmp DrawNumL4_loop
1   632	03F2			     DrawNumL4_loop_end:
1   633
1   634	03F2  C3				     ret
1   635	03F3			     DrawNumL4	     endp
1   636
    637
    638
    639	03F3			     .data
    640
    641
    642				     end Start
Turbo Assembler	 Version 4.1	    02/15/21 12:41:17	    Page 13
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/15/21"
??FILENAME			  Text	 "frame	  "
??TIME				  Text	 "12:41:17"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 FRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BEEP				  Near	 DGROUP:02E7
BEEP_PAUSE1			  Near	 DGROUP:02FB
BEEP_PAUSE2			  Near	 DGROUP:02FE
DRAWCMD				  Near	 DGROUP:0313
DRAWCMD_I			  Text	 [bp-1]
DRAWCMD_LOOP			  Near	 DGROUP:0325
DRAWCMD_LOOP_END		  Near	 DGROUP:034D
DRAWCMD_NL			  Near	 DGROUP:0342
DRAWCMD_NL_SKIP			  Near	 DGROUP:0347
DRAWCMD_ORIGCOL			  Text	 [bp-2]
DRAWFRAME			  Near	 DGROUP:01AF
DRAWFRAME_FROMCOL		  Text	 [bp-2]
DRAWFRAME_FROMROW		  Text	 [bp-1]
DRAWFRAME_LOOPH			  Near	 DGROUP:021C
DRAWFRAME_LOOPH_END		  Near	 DGROUP:0240
DRAWFRAME_LOOPV			  Near	 DGROUP:0248
DRAWFRAME_LOOPV_END		  Near	 DGROUP:0272
DRAWFRAME_TOCOL			  Text	 [bp-4]
DRAWFRAME_TOROW			  Text	 [bp-3]
DRAWNUM10			  Near	 DGROUP:0351
DRAWNUM10_LOOP			  Near	 DGROUP:0354
DRAWNUM10_LOOP_END		  Near	 DGROUP:0372
DRAWNUML1			  Near	 DGROUP:0373
DRAWNUML1_BIGDIGIT		  Near	 DGROUP:038A
DRAWNUML1_LOOP			  Near	 DGROUP:0376
DRAWNUML1_LOOP_END		  Near	 DGROUP:039C
DRAWNUML1_NOTBIGDIGIT		  Near	 DGROUP:038D
DRAWNUML3			  Near	 DGROUP:039D
DRAWNUML3_BIGDIGIT		  Near	 DGROUP:03B4
DRAWNUML3_LOOP			  Near	 DGROUP:03A0
DRAWNUML3_LOOP_END		  Near	 DGROUP:03C7
DRAWNUML3_NOTBIGDIGIT		  Near	 DGROUP:03B7
DRAWNUML4			  Near	 DGROUP:03C8
DRAWNUML4_BIGDIGIT		  Near	 DGROUP:03DF
DRAWNUML4_LOOP			  Near	 DGROUP:03CB
DRAWNUML4_LOOP_END		  Near	 DGROUP:03F2
DRAWNUML4_NOTBIGDIGIT		  Near	 DGROUP:03E2
FILLRECT			  Near	 DGROUP:0276
Turbo Assembler	 Version 4.1	    02/15/21 12:41:17	    Page 14
Symbol Table



FILLRECT_FROMCOL		  Text	 [bp-2]
FILLRECT_FROMROW		  Text	 [bp-1]
FILLRECT_LOOPH			  Near	 DGROUP:0298
FILLRECT_LOOPH_END		  Near	 DGROUP:02AD
FILLRECT_LOOPV			  Near	 DGROUP:028E
FILLRECT_LOOPV_END		  Near	 DGROUP:02B1
FILLRECT_SYMB			  Text	 [bp-6]
FILLRECT_TOCOL			  Text	 [bp-4]
FILLRECT_TOROW			  Text	 [bp-3]
FRAMESTYLE			  Number 001F
MAIN_LOOP			  Near	 DGROUP:0119
MAIN_LOOP_END			  Near	 DGROUP:0137
PAUSE_LOOP			  Near	 DGROUP:0190
PAUSE_LOOP_END			  Near	 DGROUP:019D
SETCHAR				  Near	 DGROUP:02CF
SETCHARINIT			  Near	 DGROUP:02B5
SETCHAR_BUF			  Word	 DGROUP:02E5
SETCHAR_WIDTH			  Word	 DGROUP:02E3
SLEEP				  Near	 DGROUP:030B
SLEEP_LOOP			  Near	 DGROUP:030B
SLEEP_LOOP_END			  Near	 DGROUP:0312
START				  Near	 DGROUP:0100
VIDEOSEG			  Number B800

Macro Name

DRAWNUMLB

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  03F3 Word	  Public  CODE
