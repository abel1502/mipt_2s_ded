Turbo Assembler	 Version 4.1	    02/15/21 15:08:37	    Page 1
tframe.asm



      1	0000			     .model tiny
      2				     .286
      3	0000			     .code
      4
      5	      =B800		     VIDEOSEG	     equ 0b800h
      6	      =001F		     FrameStyle	     equ 00011111b
      7
      8				     org 100h
      9	0100  E8 016B		     Start:	     call SetCharInit
     10
     11
     12	0103  B8 0600				     mov ax, 0600h
     13	0106  B9 0000				     mov cx, 0000h
     14	0109  BA FFFF				     mov dx, 0ffffh
     15	010C  B7 3F				     mov bh, 00111111b
     16	010E  CD 10				     int 10h
     17
     18	0110  B8 0007				     mov ax, 7h
     19	0113  BB 0909				     mov bx, 0909h
     20	0116  B9 0F46				     mov cx, 0F46h
     21
     22	0119  85 C0		     Main_loop:	     test ax, ax
     23	011B  74 1A				     jz	Main_loop_end
     24
     25	011D  50				     push ax
     26	011E  53				     push bx
     27	011F  51				     push cx
     28	0120  E8 0048				     call DrawFrame
     29	0123  59				     pop cx
     30	0124  5B				     pop bx
     31
     32	0125  B8 2710				     mov ax, 10000
     33	0128  E8 01AD				     call Sleep
     34
     35	012B  58				     pop ax
     36
     37	012C  FE CF				     dec bh
     38	012E  FE CB				     dec bl
     39	0130  FE C5				     inc ch
     40	0132  FE C1				     inc cl
     41	0134  48				     dec ax
     42	0135  EB E2				     jmp Main_loop
     43	0137			     Main_loop_end:
     44
     45						     ; mov ax, 3802
     46	0137  80 C7 03				     add bh, 3
     47	013A  80 C3 05				     add bl, 5
     48	013D  E8 01A0				     call DrawCmd
     49
     50						     ; push ax
     51						     ; push bx
     52						     ; call DrawNum10
     53
     54						     ; pop bx
     55						     ; push bx
     56						     ; mov cl, 'd'
     57						     ; mov ch, (FrameStyle AND 11110000b) OR 0100b
Turbo Assembler	 Version 4.1	    02/15/21 15:08:37	    Page 2
tframe.asm



     58						     ; call SetChar
     59
     60						     ; pop bx
     61						     ; pop ax
     62						     ; inc bh
     63						     ; push ax
     64						     ; push bx
     65						     ; call DrawNumL1
     66
     67						     ; pop bx
     68						     ; push bx
     69						     ; mov cl, 'b'
     70						     ; mov ch, (FrameStyle AND 11110000b) OR 0100b
     71						     ; call SetChar
     72
     73						     ; pop bx
     74						     ; pop ax
     75						     ; inc bh
     76						     ; push ax
     77						     ; push bx
     78						     ; call DrawNumL3
     79
     80						     ; pop bx
     81						     ; push bx
     82						     ; mov cl, 'o'
     83						     ; mov ch, (FrameStyle AND 11110000b) OR 0100b
     84						     ; call SetChar
     85
     86						     ; pop bx
     87						     ; pop ax
     88						     ; inc bh
     89						     ; push ax
     90						     ; push bx
     91						     ; call DrawNumL4
     92
     93						     ; pop bx
     94						     ; push bx
     95						     ; mov cl, 'x'
     96						     ; mov ch, (FrameStyle AND 11110000b) OR 0100b
     97						     ; call SetChar
     98
     99	0140  BB 07D0				     mov bx, 2000
    100	0143  B9 0008				     mov cx, 8
    101	0146  E8 016B				     call Beep
    102
    103	0149  BB 0064				     mov bx, 100
    104	014C  85 DB		     Pause_loop:     test bx, bx
    105	014E  74 09				     jz	Pause_loop_end
    106
    107	0150  B8 FFFF				     mov ax, 0FFFFh
    108	0153  E8 0182				     call Sleep
    109
    110	0156  4B				     dec bx
    111	0157  EB F3				     jmp Pause_loop
    112	0159			     Pause_loop_end:
    113
    114	0159  B8 0600				     mov ax, 0600h
Turbo Assembler	 Version 4.1	    02/15/21 15:08:37	    Page 3
tframe.asm



    115	015C  B9 0000				     mov cx, 0000h
    116	015F  BA FFFF				     mov dx, 0ffffh
    117	0162  B7 07				     mov bh, 7h
    118	0164  CD 10				     int 10h
    119
    120	0166  B8 4C00				     mov ax, 4c00h
    121	0169  CD 21				     int 21h
    122
    123
    124				     ; Same as Coords2Key, but embeddable
    125				     ; macro(result (register letter, can't be d), coords (register letter, can't be d))
    126				     Coords2KeyM     macro result, coords
    127
    128						     mov result&x, SetChar_width
    129						     mul coords&h
    130						     xor coords&h, coords&h
    131						     add result&l, coords&l
    132						     adc result&h, 0
    133						     shl result&x, 1
    134
    135						     endm
    136
    137
    138				     ; void DrawFrame(bh: fromRow, bl: fromCol,	ch: toRow, cl: toCol)
    139				     ; uses ax,	ab, cx,	dx, di,	SetChar
    140	016B			     DrawFrame	     proc near
    141
    142	      =	[bp-1]		     DrawFrame_fromRow	     equ [bp-1]
    143	      =	[bp-2]		     DrawFrame_fromCol	     equ [bp-2]
    144	      =	[bp-3]		     DrawFrame_toRow	     equ [bp-3]
    145	      =	[bp-4]		     DrawFrame_toCol	     equ [bp-4]
    146
    147	016B  55				     push bp
    148	016C  8B EC				     mov bp, sp
    149	016E  83 EC 04				     sub sp, 4
    150
    151	0171  88 7E FF				     mov DrawFrame_fromRow, bh
    152	0174  88 5E FE				     mov DrawFrame_fromCol, bl
    153	0177  88 6E FD				     mov DrawFrame_toRow, ch
    154	017A  88 4E FC				     mov DrawFrame_toCol, cl
    155
    156	017D  B8 0600				     mov ax, 0600h
    157	0180  8B D1				     mov dx, cx
    158	0182  8B CB				     mov cx, bx
    159	0184  FE C1				     inc cl
    160	0186  FE C5				     inc ch
    161	0188  FE C2				     inc dl
    162	018A  FE C6				     inc dh
    163	018C  B7 0F				     mov bh, 00001111b
    164	018E  CD 10				     int 10h
    165
    166						     ;mov ax, '	'
    167						     ;call FillRect
    168						     ; There's a swifter way to	achieve	this
    169	0190  FE C9				     dec cl
    170	0192  FE CD				     dec ch
    171	0194  FE CA				     dec dl
Turbo Assembler	 Version 4.1	    02/15/21 15:08:37	    Page 4
tframe.asm



    172	0196  FE CE				     dec dh
    173	0198  B7 1F				     mov bh, FrameStyle
    174	019A  CD 10				     int 10h
    175
    176	019C  B5 1F				     mov ch, FrameStyle
    177	019E  B1 C9				     mov cl, 201
    178	01A0  8A 7E FF				     mov bh, DrawFrame_fromRow
    179	01A3  8A 5E FE				     mov bl, DrawFrame_fromCol
    180	01A6  E8 00ED				     call SetChar
    181
    182	01A9  B5 1F				     mov ch, FrameStyle
    183	01AB  B1 BB				     mov cl, 187
    184	01AD  8A 7E FF				     mov bh, DrawFrame_fromRow
    185	01B0  8A 5E FC				     mov bl, DrawFrame_toCol
    186	01B3  E8 00E0				     call SetChar
    187
    188	01B6  B5 1F				     mov ch, FrameStyle
    189	01B8  B1 BC				     mov cl, 188
    190	01BA  8A 7E FD				     mov bh, DrawFrame_toRow
    191	01BD  8A 5E FC				     mov bl, DrawFrame_toCol
    192	01C0  E8 00D3				     call SetChar
    193
    194	01C3  B5 1F				     mov ch, FrameStyle
    195	01C5  B1 C8				     mov cl, 200
    196	01C7  8A 7E FD				     mov bh, DrawFrame_toRow
    197	01CA  8A 5E FE				     mov bl, DrawFrame_fromCol
    198	01CD  E8 00C6				     call SetChar
    199
    200
    201						     ; es is already set by SetChar
    202	01D0  FC				     cld
    203	01D1  32 ED				     xor ch, ch
    204
    205	01D3  8A 4E FC				     mov cl, DrawFrame_toCol
    206	01D6  2A 4E FE				     sub cl, DrawFrame_fromCol
    207	01D9  FE C9				     dec cl
    208	01DB  F6 C1 80				     test cl, 1	SHL 7
    209	01DE  75 44				     jnz DrawFrame_loopH_end
    210
    211	01E0  8A 5E FE				     mov bl, DrawFrame_fromCol
    212	01E3  8A 7E FF				     mov bh, DrawFrame_fromRow
    213						     Coords2KeyM a, b
1   214
1   215	01E6  A1 02B0r				     mov ax, SetChar_width
1   216	01E9  F6 E7				     mul bh
1   217	01EB  32 FF				     xor bh, bh
1   218	01ED  02 C3				     add al, bl
1   219	01EF  80 D4 00				     adc ah, 0
1   220	01F2  D1 E0				     shl ax, 1
1   221
    222	01F4  40				     inc ax
    223	01F5  40				     inc ax
    224	01F6  8B F8				     mov di, ax
    225
    226	01F8  B4 1F				     mov ah, FrameStyle
    227	01FA  B0 CD				     mov al, 205
    228
Turbo Assembler	 Version 4.1	    02/15/21 15:08:37	    Page 5
tframe.asm



    229	01FC  F3> AB				     rep stosw
    230
    231
    232	01FE  8A 4E FC				     mov cl, DrawFrame_toCol
    233	0201  2A 4E FE				     sub cl, DrawFrame_fromCol
    234	0204  FE C9				     dec cl
    235
    236	0206  8A 5E FE				     mov bl, DrawFrame_fromCol
    237	0209  8A 7E FD				     mov bh, DrawFrame_toRow
    238						     Coords2KeyM a, b
1   239
1   240	020C  A1 02B0r				     mov ax, SetChar_width
1   241	020F  F6 E7				     mul bh
1   242	0211  32 FF				     xor bh, bh
1   243	0213  02 C3				     add al, bl
1   244	0215  80 D4 00				     adc ah, 0
1   245	0218  D1 E0				     shl ax, 1
1   246
    247	021A  40				     inc ax
    248	021B  40				     inc ax
    249	021C  8B F8				     mov di, ax
    250
    251	021E  B4 1F				     mov ah, FrameStyle
    252	0220  B0 CD				     mov al, 205
    253
    254	0222  F3> AB				     rep stosw
    255
    256	0224			     DrawFrame_loopH_end:
    257
    258	0224  8A 4E FD				     mov cl, DrawFrame_toRow
    259	0227  2A 4E FF				     sub cl, DrawFrame_fromRow
    260	022A  FE C9				     dec cl
    261	022C  F6 C1 80				     test cl, 1	SHL 7
    262	022F  75 F3				     jnz DrawFrame_loopH_end
    263
    264	0231  8A 5E FE				     mov bl, DrawFrame_fromCol
    265	0234  8A 7E FF				     mov bh, DrawFrame_fromRow
    266	0237  FE C7				     inc bh
    267						     Coords2KeyM a, b
1   268
1   269	0239  A1 02B0r				     mov ax, SetChar_width
1   270	023C  F6 E7				     mul bh
1   271	023E  32 FF				     xor bh, bh
1   272	0240  02 C3				     add al, bl
1   273	0242  80 D4 00				     adc ah, 0
1   274	0245  D1 E0				     shl ax, 1
1   275
    276
    277	0247  8B F8				     mov di, ax
    278	0249  A1 02B0r				     mov ax, SetChar_width  ; TODO: Change previous macro params instead
    279	024C  D1 E0				     shl ax, 1
    280
    281	024E  32 FF				     xor bh, bh
    282	0250  8A 5E FC				     mov bl, DrawFrame_toCol
    283	0253  2A 5E FE				     sub bl, DrawFrame_fromCol
    284	0256  D0 E3				     shl bl, 1
    285	0258  73 02				     jnc DrawFrame_loopV
Turbo Assembler	 Version 4.1	    02/15/21 15:08:37	    Page 6
tframe.asm



    286	025A  32 DB				     xor bl, bl
    287
    288	025C			     DrawFrame_loopV:
    289	025C  26: C7 05	1FBA			     mov word ptr es:[di],    (FrameStyle SHL 8) OR 186
    290	0261  26: C7 01	1FBA			     mov word ptr es:[di+bx], (FrameStyle SHL 8) OR 186
    291
    292	0266  03 F8				     add di, ax
    293	0268  E2 F2				     loop DrawFrame_loopV
    294
    295	026A			     DrawFrame_loopV_end:
    296
    297
    298	026A  8B E5				     mov sp, bp
    299	026C  5D				     pop bp
    300	026D  C3				     ret
    301	026E			     DrawFrame	     endp
    302
    303
    304				     ; void SetCharInit()
    305				     ; uses: ax, bx, es
    306	026E			     SetCharInit     proc near
    307
    308	026E  CD 11				     int 11h
    309	0270  35 0030				     xor ax, 30h
    310	0273  C1 E0 0B				     shl ax, 11
    311	0276  0D B800				     or	ax, VIDEOSEG
    312	0279  A3 02B2r				     mov SetChar_buf, ax
    313
    314	027C  B8 0040				     mov ax, 40h
    315	027F  8E C0				     mov es, ax
    316	0281  26: A1 004A			     mov ax, es:4ah  ; 80 most often
    317	0285  A3 02B0r				     mov SetChar_width,	ax
    318
    319	0288			     SetCharInit     endp
    320
    321
    322				     ; Coords2KeyM moved up
    323
    324
    325				     ; ax: coords Coords2Key(bh: row, bl: column)
    326				     ; uses: ax, (bx), dx
    327	0288			     Coords2Key	     proc near
    328						     Coords2KeyM a, b
1   329
1   330	0288  A1 02B0r				     mov ax, SetChar_width
1   331	028B  F6 E7				     mul bh
1   332	028D  32 FF				     xor bh, bh
1   333	028F  02 C3				     add al, bl
1   334	0291  80 D4 00				     adc ah, 0
1   335	0294  D1 E0				     shl ax, 1
1   336
    337	0296			     Coords2Key	     endp
    338
    339
    340				     ; ax: index SetChar(cl: letter, ch: attrs,	bh: row, bl: column)
    341				     ; uses: ax, (bx), (cx), dx, es
    342	0296			     SetChar	     proc near
Turbo Assembler	 Version 4.1	    02/15/21 15:08:37	    Page 7
tframe.asm



    343						     Coords2KeyM a, b
1   344
1   345	0296  A1 02B0r				     mov ax, SetChar_width
1   346	0299  F6 E7				     mul bh
1   347	029B  32 FF				     xor bh, bh
1   348	029D  02 C3				     add al, bl
1   349	029F  80 D4 00				     adc ah, 0
1   350	02A2  D1 E0				     shl ax, 1
1   351
    352
    353	02A4  93				     xchg ax, bx
    354
    355	02A5  8B 16 02B2r			     mov dx, SetChar_buf
    356	02A9  8E C2				     mov es, dx
    357	02AB  26: 89 0F				     mov es:[bx], cx
    358
    359	02AE  93				     xchg ax, bx
    360
    361	02AF  C3				     ret
    362
    363	02B0  0050		     SetChar_width   dw	80
    364	02B2  0000		     SetChar_buf     dw	0
    365	02B4			     SetChar	     endp
    366
    367
    368				     ; void Beep(bx: frequency,	cx: length)
    369				     ; uses ax,	bx, cx
    370	02B4			     Beep	     proc near
    371	02B4  B0 B6				     mov al, 182
    372	02B6  E6 43				     out 43h, al
    373	02B8  8B C3				     mov ax, bx
    374	02BA  E6 42				     out 42h, al
    375	02BC  8A C4				     mov al, ah
    376	02BE  E6 42				     out 42h, al
    377	02C0  E4 61				     in	al, 61h
    378	02C2  0C 03				     or	al, 00000011b
    379	02C4  E6 61				     out 61h, al
    380	02C6  8B D9				     mov bx, cx
    381
    382
    383	02C8  B9 FFFF		     Beep_pause1:    mov cx, 65535
    384	02CB  49		     Beep_pause2:    dec cx
    385	02CC  75 FD				     jnz Beep_pause2
    386	02CE  4B				     dec bx
    387	02CF  75 F7				     jnz Beep_pause1
    388	02D1  E4 61				     in	al, 61h
    389	02D3  24 FC				     and al, 11111100b
    390	02D5  E6 61				     out 61h, al
    391
    392	02D7  C3				     ret
    393	02D8			     Beep	     endp
    394
    395
    396				     ; TODO: Maybe use the int 15h 81h
    397				     ; void Sleep(ax: duration)
    398				     ; uses ax
    399	02D8			     Sleep	     proc near
Turbo Assembler	 Version 4.1	    02/15/21 15:08:37	    Page 8
tframe.asm



    400
    401	02D8  85 C0		     Sleep_loop:     test ax, ax
    402	02DA  74 03				     jz	Sleep_loop_end
    403	02DC  48				     dec ax
    404	02DD  EB F9				     jmp Sleep_loop
    405	02DF			     Sleep_loop_end:
    406	02DF  C3				     ret
    407	02E0			     Sleep	     endp
    408
    409
    410				     ; void DrawCmd(bh:	row, bl: column)
    411				     ; uses ax,	bx, cx,	si, SetChar
    412	02E0			     DrawCmd	     proc near
    413	      =	[bp-1]		     DrawCmd_i	     equ [bp-1]
    414	      =	[bp-2]		     DrawCmd_origCol equ [bp-2]
    415	02E0  55				     push bp
    416	02E1  8B EC				     mov bp, sp
    417	02E3  83 EC 02				     sub sp, 2
    418
    419	02E6  88 5E FE				     mov DrawCmd_origCol, bl
    420	02E9  A0 0080				     mov al, ds:80h
    421	02EC  88 46 FF				     mov DrawCmd_i, al
    422	02EF  BE 0081				     mov si, 81h
    423
    424	02F2  8A 46 FF		     DrawCmd_loop:   mov al, DrawCmd_i
    425	02F5  84 C0				     test al, al
    426	02F7  74 21				     jz	DrawCmd_loop_end
    427
    428	02F9  8A 0C				     mov cl, [si]
    429	02FB  80 F1 24				     xor cl, '$'
    430	02FE  74 0F				     je	DrawCmd_nl
    431	0300  80 F1 24				     xor cl, '$'
    432
    433	0303  B5 14				     mov ch, (FrameStyle AND 11110000b)	OR 0100b
    434	0305  53				     push bx
    435	0306  E8 FF8D				     call SetChar
    436	0309  5B				     pop bx
    437
    438	030A  FE C3				     inc bl
    439
    440	030C  EB 06 90				     jmp DrawCmd_nl_skip
    441
    442	030F  8A 5E FE		     DrawCmd_nl:     mov bl, DrawCmd_origCol
    443	0312  FE C7				     inc bh
    444
    445	0314			     DrawCmd_nl_skip:
    446	0314  46				     inc si
    447	0315  FE 4E FF				     dec byte ptr DrawCmd_i
    448	0318  EB D8				     jmp DrawCmd_loop
    449	031A			     DrawCmd_loop_end:
    450
    451	031A  8B E5				     mov sp, bp
    452	031C  5D				     pop bp
    453	031D  C3				     ret
    454	031E			     DrawCmd	     endp
    455
    456
Turbo Assembler	 Version 4.1	    02/15/21 15:08:37	    Page 9
tframe.asm



    457
    458	031E			     .data
    459
    460
    461				     end Start
Turbo Assembler	 Version 4.1	    02/15/21 15:08:37	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/15/21"
??FILENAME			  Text	 "tframe  "
??TIME				  Text	 "15:08:37"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 TFRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BEEP				  Near	 DGROUP:02B4
BEEP_PAUSE1			  Near	 DGROUP:02C8
BEEP_PAUSE2			  Near	 DGROUP:02CB
COORDS2KEY			  Near	 DGROUP:0288
DRAWCMD				  Near	 DGROUP:02E0
DRAWCMD_I			  Text	 [bp-1]
DRAWCMD_LOOP			  Near	 DGROUP:02F2
DRAWCMD_LOOP_END		  Near	 DGROUP:031A
DRAWCMD_NL			  Near	 DGROUP:030F
DRAWCMD_NL_SKIP			  Near	 DGROUP:0314
DRAWCMD_ORIGCOL			  Text	 [bp-2]
DRAWFRAME			  Near	 DGROUP:016B
DRAWFRAME_FROMCOL		  Text	 [bp-2]
DRAWFRAME_FROMROW		  Text	 [bp-1]
DRAWFRAME_LOOPH_END		  Near	 DGROUP:0224
DRAWFRAME_LOOPV			  Near	 DGROUP:025C
DRAWFRAME_LOOPV_END		  Near	 DGROUP:026A
DRAWFRAME_TOCOL			  Text	 [bp-4]
DRAWFRAME_TOROW			  Text	 [bp-3]
FRAMESTYLE			  Number 001F
MAIN_LOOP			  Near	 DGROUP:0119
MAIN_LOOP_END			  Near	 DGROUP:0137
PAUSE_LOOP			  Near	 DGROUP:014C
PAUSE_LOOP_END			  Near	 DGROUP:0159
SETCHAR				  Near	 DGROUP:0296
SETCHARINIT			  Near	 DGROUP:026E
SETCHAR_BUF			  Word	 DGROUP:02B2
SETCHAR_WIDTH			  Word	 DGROUP:02B0
SLEEP				  Near	 DGROUP:02D8
SLEEP_LOOP			  Near	 DGROUP:02D8
SLEEP_LOOP_END			  Near	 DGROUP:02DF
START				  Near	 DGROUP:0100
VIDEOSEG			  Number B800
Turbo Assembler	 Version 4.1	    02/15/21 15:08:37	    Page 11
Symbol Table




Macro Name

COORDS2KEYM

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  031E Word	  Public  CODE
